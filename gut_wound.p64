picotron cartridge // www.picotron.net
version 2

:: gfx/
:: gfx/0.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA1LTAzIDEzOjI2OjEwIixtb2RpZmllZD0iMjAyNC0w
OS0yNCAyMjozNDowNSIscmV2aXNpb249ODYyMl1dbHo0AC8sAABs3wAA8R57WzBdPXtibXA9cHh1
AEMgEBAE8PAsZmxhZ3M9MSxwYW5feD0yLjA3MTQyODUGABE2FgB2eT0tMC43MRkAqjMsem9vbT04
fSxOAEJ-MX8hBADyCx8hAS8RHyFvMS8hPzAfIU8xDxAPIA8wfyE-CgAzMQ8wIwCRHzEPEB8gLzEf
KQARDx8AMD8xjwoAIiAvLQAEKwAAEwAXH0AAAzEAISAPFACRLzF-IQ8xLyA-CAA7DxBPRQAbf0AA
ABAAJB8gOgAPBwE5cP8QEw8SbxAEABEfBAARXwgAUA8S-xAABQBhBQ8S7xAfBACRPxAPEp8QHxIv
JgDTDxJ-EB8STxAfEv8QK5IAHzCSADFVHzBfMZ8EAPMDTzGvMD8xvzAfMf8wAS8xrzBPFQDRLzHP
MA8xLzAPMc8wPyUAABQAv-8wAQ8xvzBPMX8wlAA5wf8QFB8xXxAfMW8QDwQAPP8QEhEAHxoiAAwv
XxCSADvoSQ8g3xAvIN8QDyD-EAsNAB86aQA58RgADxAADg8gDg2PMQ4QHh2MEB4NDg2MTh2MDg0O
DR4NjA0ODQ4tjG0IAAAaAA8IAC0P3QI6cBEQ-yEB3zF7AzG-IQ8IAF8PIZ8xDwwAPAJcAITfMf8h
Ai8xv6ADHzXDADFwDyAPED8xHwIEYyAPEB8xPwoAQA8xHzCJBBECbQQAGwAjMC-BBAAOABEvqgQE
NQABRwQzMA8gLwBALxAfIEAAA5YEAQ4ANS8wj1gAABIACVoAA4cEEyAxAAEnAADHBBIfmwQUIEMA
In8hFgBZHzAPMY9PAAImAEQPMA8xTAADEgAP1QRDLjHwAwMPhAE1ES-fAAO-AGAxLzAfMY8WAEEw
HzGfLQEwHzEfDwFDIS8xL30BALoFYB8gPxAvIBoAADUBMK8gHzoABSYAAskEES8kAAFxAQHuBRKP
GgAALwEIUgABYQEAUAART8YBEQ94AAAmBgI2AAYqABM-OgAAKgBPTzF-IBQBOS--MGMBOrD-IBcf
MM8gPzDPIAgAEA8cASEwj7UCIF8wvQJTTyAvMA8YAFsPIC8wPxAAF08sABOPGAAmzyBUAD--IBew
ADkCbwEPBAAHNv8xAA0ADyEAAxYCDQAPQgCoHwFpAz0GBAAmjzEMAA8QALMTbwQAD_wEOi8hEeEG
WX8B-yAA-zEA9gE5Ed8UBhG-qwQXrwYAQs8xDyAcABfPBgARHzcLAuIGMj8gL3AGISAvXQUC9gYC
NQURH34BUU8xHxB-FwUi7zGIARTvDgADDAAPwAI9BFoAES8GAHKvIP8xDA8QxAUTr_ALMt8xDxcA
CvAAEH8JDCAgb9wAQSCvMR8nAC-vMaAAORHvUgACgAcAbABwDxBfMR8gT7MGA6sGEU8_ARI-SwYB
KgAkHyAeADIvMB9eASEwP0AAIw8x2QABDAARX_gHABcEAi4AID8QJgAQL5QBAHoIMTFfEJ4LMv8x
MowBDz4GOxIA3QEPBAAJKAAOAgBI8AIOAAIAEN7jCiLOLQ0Azw4ALg0eHYA_DQ4NcAoADwPKAB85
ygAzFgGyAA4EAF8fEA8-DwQABjb-PwINAA4EABcfSQAOBAA2-yACDQAPBAD-Ag-nAVgMrQJbAA7w
AA4CAAKwAlPOHR4NLhIAAD8NID6AEQAfcAoACw-KACsPlRFJz-8hMP8xQP8wIP8xMFgAOjAxaU-I
BGEQPzEvIE84BjEfIB8eBn8fMT8g-zFKjwQ6wDFiPyEvMU8gPzE-IXAAAEQFNj8hD3IAjzC-MT8w
-zE63QVPOV8wD90FFV-ZBQB3DRMfIwcBCAAcMNUFEW_XBiEfMXgENDEPMNMFUQ8xTzAP3BAgLzCT
ET--MUTJADkQgKkEAJQAI3BPEAMPEgBrDokCD_IKKw8EAP_qJP8gCAYfOA8CMSIfIG4CEoBgAD9P
EHASAGsO6wIPGgZ2hjoA-yBA-xBwggEfMHEJrcEB-xAA-zABnxEPIA8EAJEfMC8RLyAfER8QAFMf
ER8wDwwANT8RDxQAEx8MADkvER8UAAA4ABIvGAAQMBgAfr8RHzDfEQ9JBw8vAauxXxEvEE8RHzBP
ET8IAJI-ES8QHyIPED8-AWEQPyIPEC8TAQAYACAfIBwAAksBASgAAKQAARQAEw8UAFAPIg8gP2MA
ARQADy8BWjb-EAINAA-zAAEvAx9tAQoVHwwACgQAAtkDHw84AOIPrgc9oBAOHyCPMR8gDhADGXAN
DhAOHYwdDQAfjAwANQ88CToFCwEBUwMQgCoBVR8-DxCAUwEAFAAQTxAABkMBI4AvCQBwDyCAboAP
EEkMTw4NgA0IACsPiQE5AIEBAIsBAlUTADwBLo8xSQEPDAAuDooBDyoFSS8gDxsEChYADQAPIQAD
EhLkAQ8EAAMXHwwAD4wFAx9gKgM7Eh-VAPELPw8QAB4PIB4dDg1ODz9ODQ4dHg0eDA4MHg0TAB8M
EgBcD4YCOjEPMN9TBwJfBwKbBycfIAwAAxgANQ8gAQUAAw4ABDcAE78nAJaxDh8w3h3e-QHRAQ8E
AGMPTwk8Hw9TBwAPewcDDJ8HCLsHCNMHBOcHBPcHEd8EAC--MDoBvg8oB1wPOAD-Cl-vIB8Qv-gP
OjN-Py_SABFvgQUTP2wADxgAJwBqBQoEAAQkAAQQAAQEAAQyABPPIAAe3xgBDQQAJt8QFAgMBAAO
PAEPrAsADz0BORaAWgAABAARgI8ibw4NDoAODQgASz9tgG3jAzkCdwJCLxB-P8sAET_hAS9vPxgA
MwoEAAQkAAYSAAMEAAEyADHPEB8sJB8PBAAKAiQAD_8BBg9HAg4--yAABwI5N-8-acgARz8PEH-7
AhVvDAATTxgAE18UABFfNwMRT8oAE28IADUPIF8cAABSAQc7Ax8gswA7FGCXAAIEADePPz_-ABVP
DAA0bz9f0wAjIF8SABEflBEifz_xABJPzwADHgAmXz_xAAD9AA_1ADoiEBQTKBNPEyg1TxAPCADh
-xAZDxLfEB8SfxAPEj8IAAISKBN-FAAR3xIoHyM4Azmv-yGvDzGvIf8xJVYAO4FQHzHfIU8xrwgq
QK8xTyFJHz--MUAHDFsvPw-RG2MC7xcPIADoDjQDDxgTpXAwAL8hHxFvtSHyAxEPMS8hHxF-IQ8R
PzEfES8hD7gsAQ4AAc0hIhEvKABgIS8xHxEf4yEkET8uAGcxDxEfMR8OAABUKBMvDABPPzEPITQB
thIP1SgPBAAHDyAA7A-pATpxIV4fMa8hT24vMU8hr2YFH04iBpAvEPClADtBoA8x73EGP-8xIFoA
OTFfMZ-EBnOfMV8hvzE-yAYfoJ8OOy8PEI0FCQ8gAGokMB8KAA8eADkEYCovEA8eABsBGgAPHgAg
BRoADx4AHAUWAAQEAI9vIJ8wTyCvMAACOQARBiKPMTUGUc8xHxG-azEHdQAPBAD-IC--MHsTPQYU
Ag8EAAEPIABuDdQCDx4AGAAzAR8fHgAoDiIADx4AGw4iAA8eABsMIgB-nzBfIK8wTwcGOjGfIV9j
B3FfIZ8xPyG-BQYfrsIGTw8MCq8Bzi4mnxDYLgAGJXtPIR8RDyEPFgBdPyEfER8WAABzCx0vFgAB
Pi0DdQsOHAABXgABfwsOZgAEiwsNNgADlQsPTgAAAqELAxgAD_InOUFfIJ8xMjQgEA_pLAI3ARcx
4S4AICYBEAAybzEPaiYD6CwSXwoAAa8tQA8gTzGGMgIzOQGaEjIgHzAaAAIuABEfyDEULxIAAk4E
IjAP7jIDFgAjHzCBOSMwDxIAAEYzAJwzAg4AAWIAAwwAALQAFl84AAG4ABVPWAARHywAPz8wH40v
OgKvLga1LhMfBgAjvzE2AQcKABGvCgAVHwoAAcwBJCCfFgAFDAAB5DMhII8MAAAmNAQMAAEWAQE1
LgI8ACEvMYIBA_AAET8OADM-MD8WKA_tAzoREPoHFy8EAAFfAQUOABMv7QQBaygmIS8EAAOdNAYE
AAKtAAkSAALFAicgHxQALx8xTACXD2kBOycAH1MBA1cBKjAvEAAJuQAXXwwAA6MALyEvEAAKD0AA
ew9BAU4D2gEHBAABvAIHgQAgDyG8Agr8AQNDKwi3AAJMAAcUAC8vMUwAnQ-CB7oPBAD-Cg4QCA-p
AbsjIACJBR4wBAAA6QIATCMPOgC3D84BOQNZACIQf98GAg4ADxIAFAsyCyEwH5MEAgQAHx8YAAQF
BAAPHgAoHx8cABAGEgAOXAAPIAANDlgABgQAFy8MAA8EAB8O8w8PhjyvNgFPEQ8ACAQAaE8RrzFP
Ec0BBgQAABgAEp8eAAUUAA06AAcSAAg6AC_vMUQBPQ8EAHwO_gAHBAA2Eg8RDQAOBACRAg4PER8a
Dg8wwiAQEgUAIQ8afw4gGg3nGfEDEj8hPxo-IS8RTyE-Gi8hLxFfEACQDxF-IR8a-yECkyxyOB8Q
Dzg-EAgAky8QDzgPEB84DxAABAwABT4IHzKGATIPGgw4D0wA0Q8CAzkGVgAFcAAvIS8zDBkPQACs
D04BRw-sCy0PhAz-HgYHBQ8EAP_kL-8QDwJRD38LEA86AP9KI68QJgAjrxASAA9kKToAdwQnEB8E
ABAPChYCLgwIBAAmEC8MAAEEABdfDAAPEABxAZ49BxAAER9FAQCxEiC-IPgTAfQWQBIPET92MBAS
NkowLyAvJy8fMCIOOx9PwQsCIA8wySEzTyF-rQpQTyEPEU97OAUKAAIkACB-EREGEd9EAFDfIR8x
zx8GEDCqGiGfIScGAMwAAAwAAMgAIDGvDhkBFAACDAAA8BYkrxEmAE_-MD8xxEo7EBKIPw8EABIg
ID_RFy0-DwgALh8wQRgPCAv-JQcEAA9QGAE--xAA9wr-CwctAQIxAQ9BAVgC3gUfH1IKJg9MAJgH
UwEABAAPvAIBP-8QAcgIT2hPEK8xTxASAAecBQIcAAcSAA84AIkPLAE5EK9UAA8EACYPjAA7YP8x
DR8hz7sHAwYAEG9GAhIaBAAAf1MRXyMHEh91WDQaDzAcACAPGhQAMz8xLx4AIT8xHAAUMB4AAj4A
My8xPyAAAeEeDUAAABEeFS8iAAH2Ag1EAAFVCAUmAADRRQ9IAAEEaAAfDy0fOkH-MQEfqyg1DzDP
BgAXH6EAEW8QAACACBJfGgAFlwAAowATTx4AOy8wPzgAAcEAAxYAX08hPzAvPgAAAj5VAkAAASIg
D0IAACgPICQAAIIIDkgAEy8WAC9PIUwgPTCfMV-qHwFzBDEvEH8KAABiCwZ6IQHLBAd6ISEvMX0H
AuggAbRUAMIAAnAhAOhHEU8OAALMVAKCIRMvOAAA4AAiHzAMAAJaACMfMCkFAokHA34AATYBAAUF
AxIAAMIhNB8gLyAAFjBkABFflU8CXwICGgAkDyC2IBE-KAAPLAE5AFwAIt8xBgAAoAATzwYAASAB
SSAPEL8KAAHaACIQr_AABwwAAhgAEJ8iACUwDwwAAZxVAI5VEjGMIgQMACQvMT4AEn9kAQPqABFv
DgARPwgAD79PO-8D-zEQDzDfMS8wvzFPMJ8x-zCjwR3WgP8xMP8gAd8-vEATjwYAHw-nDDokrzCX
DhQwqQ4PEgBqDwkRViOvMXIABRgACgQADCYABBgAD0wAyA8mCzwCTQYJeAcP3AcAGBp0Bw4gAA9A
AKUPNAg7Eg_DBwWMAArrBwULCAWMAA4gAA9AAKsfL04BOvEA-yEQ-xIB3zAfEg8wvxIPCAAjDxJL
KgB-KgUUAAGPKgCREQoUAAHMAAgUAAINCQFYCg8oAAoOUAAPeAABApQAQN8w-xJYXx8SWF85EPp2
BpHfIh8gDyK-IA8IAACtQyF-IrVDBBAAMyIPEaRCNhEPIhgAABAAED-KQwkUAChfIBAAXw8ifyAP
EAAJZxEPIl8gD3AAAogAn98i-yACLzC-IO4AOfAG-yEQ8gHeEg6-MQ4SDg0PES4cLgwNCwCBDgwe
HxIeDA4NAFIeDDsMHgoAGlsIAFMODA47DiYAMgwuGz0An70OEt7yAi8wsqoAOhERmQElMB-oFACf
BTIfEV-3TAMQAAEmFJA-DxEfPw8RDz91RAccAAEaAAF0CAQeAAgcABERKUEUP2gUDzQABQ9sABMK
mAACsAAg3zDBAT8xvyAXAUAAoQYhMb_WWQDcBj_fEA8MADwCXAAu3zHDAA_aF-8cKTEPBABxEh4v
IA4PMZQhXg0OHyEOoxcPZAh_EiAgAADUEg5AAAIWADMvMI8cABGfCAABFwESGgQAIR8amS9SIH8a
HyAxAQQKADEfGk8eAAMfAUUgHxpfEAAxLzB-GlcOqRQPNQhrHyBAAAEA8gECIAAACgAFHgAFQAAQ
j6hiAJ5jIhoPRAAXGh8BAaQvAh8BAicBIQ8xbFcWMCEBBA4AAB8BEQ8fAV8-MH8xL3ZhPTz-EhED
CD_fMQ8MADwGywcBx1EPQmA7PP8gEcsHP58iDwwAPAafBw-CAEBE8hHfIZ8HL5INBgAUAYEHAI0A
H-1OAT4H0AYAowMBo1QPDAA6BiwHDxACRA8rB1gPwgBAHw9NBhlQLyAPHL_8EyAgvzRUYw68Dhwe
DR8AMxIeLAoAASsAHywdAAYdGxwAQwwPEAwNAAAfAE8MKrwazhI8AUk0Ac1KAeQUANcRBBQSCgQA
AKwUBCQAAAgAOv8QJBEAAslHDzkAAwhhADb-EAMdAA5TUV8DLzG-EPUIOQS0AQ8EAKEBsQkfMB4A
WS8fERwABVM-ER8Q3wQARJ8RQg8FAABROA9gEDsvDzAEAP9RchECHyACDm88IoIQDxEOAh4CbQ0A
4Q0eAh5tLA0CHgIObSwNGQAP4QE5dv8wTh8Q3zAEACKvMHYCEY92UhPPBABEjxFCHwUAP08xH-Vd
OjX-MKMBARYf-wAfH-0AAw8oDDkPVgYZLz8gSAY1D2QGaaEQAV8RjxAPEV8hcFRgMR8QDyE-YgQg
EB-JPVAQDzGvEIgScT8QHxGPEE_UElBPEB8xXzIvITEPDgAAsAJRTyEvEA8oAACvPRCPRgAAwjAA
LGkvIS-2c1kgFB81DyMRD2MAATxVISEPrgAhfxDsSUEQDxGfpgBALxBfEX8fAVAwAAwAAs4AIxEP
0gAChT4RHywAAAYAEW8UAQIMAADkAAApcgAKAARsABMfVgAACgASH0oAEiE0AAJEABB-YAEpIR8y
AAFEAA8FAT4fETYIex8i3gA5AtQGCAYAEL81CyURHwgAMW8hT38cMm8QP_hsEBB7QBUfFgAQjwQA
NyBvPwQAFjAEAA_rdzsAvgREHyACHsoEAboEAAsAGg3UBAEJAAUdACAPIR4A0GwfMB8QHgIeax8w
CwAcAGALIAsQGhsbAP8KaxobDgsCCw5rGhu-PxobDgkOCQ5pGhu5_r8AOjD-MFMqTZNPMA8RryE-
ML8EABGvjSj-AwKPIQ8RAj8wsj4PIJINTp3_A20dPAEJAQ8EAAIBThABQA8TLwQAFE9iWgCOFBAS
BgABJAACzQMICAACDAACQgAjET8EACFPIEIAIRIvOAAPeAAEATYAAGwAA1AqQjAPEW8wAAF2ACQv
ICwAKR8RcgABOAABNAAA01lBMA8Rf6QAASEXFxJuAAQwAAYEAAE_AwA6ABIfdgC-IC8QTyAfEU8g
HxBrATlA3xAfEQQAIj8QmgUBuwQCnwSCEd8Q-xES3yEhAA8lAAcCBAACGgAhPxDxFQEcAAAMAA_r
AFcNhgAWEIYAD8AAkWH-EQEPId8fBlLfIf8QFiQAHG86BwGVBQ88B0ABnQYPBAAGFz8MAA4EAAEM
FA88AJwvHzGREDwfEAQATSavIQwAAI5sL08wEACDIh8gDgATTwgAHy_WBjj-ASAE8BHBIAGgASAP
EqAOIA4EABuBEAEOoA4h0BECAEkBDtAeAgA8-gHwpRITMJwAEjCNAB82EA-9MP8hQEQMEDBJb0Mf
ED8wqUwhMA8MAAsCOwtNAS4xMPMSMACfEfowBAQAABgnBQYAJiBPGgAPJgAOCxQPD3sAC5MOLwQA
sRABkAEEAFYRAAGgAQQAABAABRwADyAAAw8cAA8PGAADZQ8SkA4QDgQAVh4ADqAOBAAAEAAPGAAK
PA4QvrICVS05LjQ2AQAUN-gANi4xMwEAAgUBHzTNAp0O_xIPHgBXAdYJHzEcAAESP6YRDRgAAo8T
RA8QQp8FAE9PMZ8RmAIND5QBAQ8EAP9KlG8RDyACHgIPEQ8AAGkNEQ0DEFQwbR4CHgsAAHYNQQ0v
EG0fAB8sxgEhCHoILx8hEgAEBxAAAuYfCxAAD0QAtA18CQ9CAQ4jHzFUCAMIABE-Ljcy3yAfCAAA
BAAfMAQACST-MXsDHzNzABKEEiEE8QPwABEDAG8BDxfwAB4DADo-DvECbggc0P8wCi8hvzBPIZ8w
XyHqhAA7JhIviokiIC8nMRIgDABVDyFPMR8MAAAyDAYEAAMWAACvhAcwABdfGgAGDAAfbwoAEg3l
NwxdAR8xjFMBL58RwgcFDx4AEBYhBokO2QEPfAAItAgIBD8RMD8hDzAgBQAgICASAG4wMD4wPjCY
Ag-IAAsC1gUIBgAjHxBdcgMIAADwL0JPMW8hmX8ibxAQACIfIZcSA40SD5ESBg_QAAwcMpAAEW9v
EgBOEDEfMG85FxANCwATbdcEFB-VBDUfMG0dACBvIR4AEQwLAABxEnAbHzAQCyALIABAAAsaax0A
MRsaa3EScRsavz8bGmlxEm8bGrkb_iKhAB0EeQUvvyEKABQUEAoAAZ0wAwoAAV1JBw4ACtFtLB8-
HAAbTxQAMS8QHygAKh8QKgADPgABBAAZDzIAH58qABYEXAARbygAIR8-wgADKAAA3novDxA0AR0O
GAEPLAENATNTAwwAAboABQ4AAogAAgQAAZQACRwAHk8UAAESADkfPy8WAAQ_AAVOAA5wAA8qAAEP
XAASEm8sACIxX5AYBDwALzFPOAEewP8wB08hjzBvIW8wL_AEIRFPrzUARhMxPzAPkgMBBBcB0RQC
uCAyHxA-x4lBIB8QXwoAANIOEX8KABWfBgBhLzAPEJ8gFiUAGwIHCgABBzlCMB8QnwwzEBD_iAAK
AAshGw_7AA4eD2YFDwoABAK6BQHMAAXUBRMPxjMA7D4TDxAAAN4AHy-6BQwfbwoAAQ8MBj0N7AAE
yAUAvY4CwY4AIgUEFgAPGgAJP-8xFm0AHRsPpg4fHxAADgTeDg8IABNA-xAC3-EzHDAnZw6uAg9h
NJkPBABPId8gCgBDIL8hDwoAIk8hvRsVHxIAA15aJREvEgATLxIAAMcHDchRD3MBrFAhEp8gEv0A
wAKuAh8h3h0OAj8RDpwC8ABOHR49LxAPMD4dHg0PEg0_PBAuCwBxIg0PMC8QDg4Abz0cDgw_DREB
HRI-xwQCBAMFtgYTD4YFGT9QBxs-SgcEHgACLAACBAAsDz9SAA4eAA9EAAEIYgACPAAQr2ZCAAoA
cD9PEF8-PzA2Bi5vPzFQD24EDwFhACI-MIEAAgQAAQwAAxYAGE8OAAmhBiQ-MCwABTwAARYAH58e
AAoMRAAKYgAEPAAAsQcC4QARX-dsQD8wbz8XAT--MBThAB0B3zkwMA8Q140BygRQEG8wHxCzBgDS
AhBv1gIkIB8OAB4wDgAAVUQwHxBvfAcSMQwAQE8wAg4OABYuQQAQLuECEG-lArU-Lg0fEG0cDS4N
HAYAbj4cbhz_E5sFD-QGGwCraQbYDABKLACaDBFfCAAG-AwQT_RcICGvqwAlIb8GABfPBAAgHyAT
OQQIAD--MBJSAR0Gtw4ABAAB4S4JEAAZDxAALx8hEgABHy9EALgvDzH2CyUPilNqHwIwUwUPolME
MCFPEeOND2pTBB8hOgAIEjAcAA8mASAjIB-RBhVP4wYTDxIAF18SACAPEQsPDDEHhB8hHxI-IR8i
MQdALyAPEp8ebB8RDyIvIDIoCgcTUx8gfxFPdjYQT5AcAwQAkV8hHyBfIS8Rv7oiUN8R-yEBoBwv
DxADAiIQIPGHABIfABASAIpnMQ8wP5kAIP8QvjMUEAQAEM8UNxAQo2MxHxCvURIyHxCfgAIhEI9R
EgG4jgABHACqBADtECIQX2kSATYMEU8cAAIMABE-IAAADAAPtQAkDwQA3iAvEggAkJ8hDxIvEA8S
rzYEkBIPMK8hTzAvIUSDQT8hLzAMVQ-6GQ0fM2gBRhcRBAAGuAAC1AIfERwAAQJ1IQE6VhcSBAAf
MTwAEg4QAB8xIAAzAkAbIT8-ZgUBBgAQPyQQAQoADAQALh8-WAEP4QouLwAO9o8JEx5KeAQCAB79
KAwPBACgJF8RCgAGBAAdf6EBfB8RDxINAQz5GQ9jDB0EOAAPBACFAUufGjDaBgBKBQcQAAAEABAh
DiMfDxgAABBf9ZQBLQeDIA8hjzFvIY8MAAAOXRFvCyomDyAEAA8QAA0PoQUkEyIIAA8EAAIfHx4A
CiYvIgwADxwAMxAfGgAOHgAMBAAfER0EChkgIAAUIAwAIE8hfJwAkwcQ3z1AITC-fBkCGAAiTyEM
ABC-pQEfIZ4FTgLhUAIOADB-EU9PEwBLJyERT1ICBAwAAFxMAB4ABOFQE99wAhPP2xchDzGsCBEg
cAYAWpUA2ggEFAAgEa8HogGAKAYqACCvEfGgDykCHRIfkw8jPz8IAAL7ewKrDRcfDAB-LxA-Pz8Q
PyAACAAQACIfMAQAHw9IACwPkAAvP-8QAYeaIA9FDhAAGQwTX0MJAPcLE28MAAAFBBGvuywRjy9O
ADMuAAoAES_bCREPkwkxfzEPkwkhbzFNBDEQXzGuSiAQTw0CAZMJADQAAOsJD78ARgr0Ah8fEAAO
BCwDD_YTFQBWeAIQDQQEAA_NJjoP4gAQAbwAHTF9BCMgHxoACgYAAZgUcR8QLz8PIZ9jCHAvIR8-
DyFfTQIBb1IAVgQA3wkhHxB6EwODUgLpLTEvIT8cAA-3AHARMQ8NAJ4HICFfOAVAER8hP7UMADAF
ECEJjgDbeQB6QAAMAADXMAIMABLP-Y0BwQyRUk8w-yEKDyDfcgYW33YGDxEFFgDBKQHxMAe6BgAm
AwIMogkXAHcPEA8SUA8wEQACFQBPIA8SDzAAAxEvGwBALxBvIZOUG68EAEGfEA8zBgARIQYAEDEG
AACklSEfEDoZATenANoCACMqCGkBD20BITL-MANwHlGvMF8hn6NEEX8SGTE-MX_GEQCsEQBrDQIM
ABAfWE0FGAAYDwQABRYAAC4CJA8gDgAXXzAAJl8xGAAvbzEKAAsvDzBcEh0eH0YADwoABAIbnQSa
ABMfwgAGuAACrT8HVBkDPAAGIgAXP0AADmAADgoAD_wASwHPfCIgb61AA64BEV-0GRMv0gEACgAR
T9IBEa8eADW-MQ8GAA9IEwkP4BAhHzC_DlUPBAACKxIv9g0FBAASEpUQAHoDNw8wAXwJAOYBAQcP
AO4BVAEPEQEOGQBBHyAvEgsCQiEBDg0VAPAHDW8gDQ8wHQw9byANPE1LHTxdKz0c-Wc1zlwbXBo8
CgwbDAo8ChcpDzcBCHcRFATxAuARAgBfAQ8S4B4CAAAf-k8iDB443wMQBNsDwG8hfzAPEV8xLyFP
MF8wAAsGIj8wTwUBOKAA1QcABkMCWgYA6wIAnFMBDgAACgATf6kwOR8hnwYAAfWlAAgAADkIAB8B
BQwAAAumAUAJAR0dBZYRHzi4ABUgIQHCBRF6wgUUEKQGBAQAAroIHx_SBkQfOGIPHgCrCQ9DGkIw
LyBvQROCMR8wEQ4BLg_bOOAdbo1vII1s-Qf8Ad8-HAdQThxOiwy1Dg-UAIRD-yABzw4NIt8R3SAA
InYvDzAEAAUTLy4ADwQAAgA8AA8pBAkPWgAJD3gADA8eAA0PcgEcBn8CD7MCHxc-DAAPBAABPv8w
kEIGD44AmA_OAmoAWUokIQDYAQ8EAKUPjgIZMAgIBPIAAJ8FEyDnDg8IAAgvjxAwBRwhHzDzd0Mw
3xAvmhwAgg3FHzAPGx8QbxsfEA8bDgAfIA4ACCAwL9IcUDEvEAJuIhCszi0PPx5sHgwtDAYAbj0e
bR79EnMCD9cxCwDGMgDSCxAhS4ofHw4ABxwxDgAB8EQiDxADIh_A4CkcANkqAFsJEE8dDwMGAABR
ACICD7oNIxBvfgADvwIEkAABoz8DfE0tMF8kAAAzHwUUABMxFAA-MU8wFAAAFCEUABSfdwASH_gd
DAMBITAfpJIAbwAFEFQfM_cAFA9YBQsPHgD-dASrOA-CAhwAm6QjIAAfBBcxBAAHEAAAIRIEDAAD
BAAHEAAfPzwAVwWUBgn5CR8x6wAdHzGLAAEjHzB7HA_LAAIBBAAmED8MAA88AE0H5wAP6wAQDxAI
LRK-k7YRIZNmMSG-MBQAACEPFRAmAABOBAkQABQ-FAAGGAAWEMMAJz8xAwEEPAAG7wAJLAADRAAO
7wAfMKAEMAYEAA8SNAUOXR8NlAoVIQ4ACxIYSj8hjxEKAAD7HxGfCgAAq6ATD-YXIV8Qn0IBDAAA
X0I0HyBFDwAB7xIBvghABS8xBRYAAJWuIDEBlCAhDxD1DwDeCAF-HyJPEfWmB9IhHzIkAQQPlQnC
AXMoAcWTXv8QArAeJgkPJwIODwQA6QC8HiAxANcmEa_KCQIIAA9IApkEygAPIQcbD90DAw_sdwMB
mxYHEAAGPQQPGAADD1kEDQ8eADcP7QIcBa6mHzAxAKcCQB1CTxACDv8EQp8RAg0KAHW9DB8xDL8h
BgDzA9z7Et8-G94LPhteG24Lbgv_EgkAH15zABwwHxCg4xsGBQDyASAPP0AOED8QTiA_-QIPMd2N
AZACLxEvEh8REgwNAP8aHyG8OyJMEg8SDDsSbCo7HyJ-MB8iSw8wfyAPMCsvMZ8gLzEtnyBdmS1r
AxwMqgMPCAAXEs8MABM-FAACGkMPnkIDLm8QnEIPKgESBJgCDswCD70RIQ8XEgsP_REpDx4A3TA-
Eb-4a18RzxAvIdIDHg8xAKy-Eh0EENEgAdABAAEIOjl-DgAO0A4g0SIDHbIvEJ8gXxCfIG8QfzC2
ETB9GgC3DwAPDEMgPzBfCAARL_woQQ8gfzD9nACRHwFOdHG-EF8gfxA-5TQANgAA-ggBCAADgykO
xAMPjwF69AkVIgTwDk8Q4A5PIA7ADi0OHzANDqAOLQ6rAjANDpAOAAWHBwEPAADQKgCgNwwNACA9
Dr0gEQ0KABE9BgAgLR5NADENLqBJFxAcXABgDQ8iLQ4MJQDRDQtNDh0OcA4NC20ODQgAIB0uDWDw
C3AOHQs9Dh0egB4NOw4dHpAuLQ4dHqBODB4MmwB2HhweoA59DgQA1B0OTQ6wDh0OAC0OsD4FAP8R
oE4ADh0OkB4CHhA_gB4CDgIgDiKQAi4gAi4CkC4gTjAkAQsdNyQBHyMkAXoyHQ5gJAEAFAABJgEA
O6AhLi0IABCQKgFgHqAOPRweFwERLbQA-yEdDsAOPQ4NDtAOPQ7QLj0OsE49DpBOAA4tDoBOIE5g
DiIOQD5wLgJADjJwPjACPiAgAQwPRAKuRS6QDo1kACEtHgYAIA4AJAAASgIRTgYAJD6wBgD-Bi4C
HrBOAg4CwA4iAC7AAi4QHsBOgEMCqw9nAxYxPQ4tqwAALAIVkAgAAMKqAggAECBEAgMIAP8HcD5A
PnAOIkAOInACLkACLgJgTjBOECkBDA-yBB4PMQD--xcAdQMVDXUDMg1PMBgDAJ8JB3cDAJ8KAYUr
BnsDEQ9sAyEvIZllHDERAEAhDpAO1gxRCwwbDA5HBEAebR6AcQPxGh4tHgoNDmAODQodDisOHQoN
DkAODQo9DgsOPQoNDiAODQpdDl0KDQ4AIgDxCj0ObQoNHg0KLR4LLgtNCg0eHRotDi0OCw06AEYA
Hh0qDgAnEC4bAPUJMD4LLgsuHQoeQA4NHiseDU5QDo0eLQ5ABgCxHQ5QHh0uLQ4AHmDjBQLpBSGg
PgYAIQ4SwwP-BaAyAD6wMgAeIrASEA4CLgLwAE4wXQEdHyJdAZkoCj1dAS8NOl0BM4AdHpBOAD6w
PicGEBItBgDhQd8OIrA_AAIuArAeID5AsgL-FiIOLVUBAGMGMR4NHmsGEU4GABI_fwYQEtoJ-wEy
oCIeADKQAi4CDhASoE6wswL-I2GgPgBOoD63AgBWASAiDgtXv6ACLgIAPqA_IB5glgU8HzUxAI0K
dwMwbQ6gxQEPBAAB8CIebR6gLi0ukB6NHmAOHQ5tDh0OQA49Dk0OPQ4gDv0BDgAOTQ5tDk0ePQ4N
Hi0eDQ49FQNwDo0OPQ4QPgYAczAubR49DkAeAFUtHkAOja0BMT0OPQgAMC0uLbEBAbMFArEBBMEF
MpAOIn4JMEIATgQAMKAiELkFPwEiUAYDHB9w7AAZPy5tLuwAPgbyAACbAi0NPuoABAYAEE4EAJ_g
LhAOIg7wAELrABAP2AGOANYBE07nBCZOkAYAIA4i8AARQgQAjwIuAhAisCKw1wGqXw4tPg0e6QAA
FE7XAQDPAjAQLqDWAQ-qAA0P3wMdHzQxAI0KmgIPEA5BIh4dEA5QDyIODS4cAEENDD0eBw6wDF0O
LQ5QDg0MfQ6vAeENDB0_DzEePQ4wDh0MTTEQQUAeDUwJADFQLj0IAPACYF4LHgsdHmAOPR4bPnAO
jQ6BEAQGAABKDlBNDi0egCwCIw4dLQ4PCAAAoE4APqAeIgAeIpBxCgAEAAAHAgxrEG4tMC4xNjZv
U00xLjgzcFMfNlYBWyCQLlYBEJBWAUINDg0uTwEiTR5PASFtDhgDMgx9DkwBEg1XAVNAHg08DU4B
Ii0MTwEAOLgRDlABUA4LHgsuQAEsGx5UATCNHoBYAS8OkFgBbg-fAgoPMQD2D70L9QGzAg8IAAMA
dQoAwQswHiKAqgIQAKwCLnBOjxVXLTcuNzIBAAR3AYMuMjYxOTA0NwYADmoTD4YBWxOQBgcSgBEE
MysODZABUy0OCw4tkAEzTQ5NjgEATQcEkAEFhgEAIQAEawFZHh0aHQqUASYaDQ8AAOG8AooBjw0O
QD4rLi0KfQcAB2YIHg6SAQ_KAU0PfgmSDxgBCgWdCAAODY8CLgKgIiAiUBQBY0_ATi1OowlNDrYD
DxQBT1BtPTd9fQ==
:: gfx/1.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA3LTA4IDIxOjI3OjMwIixtb2RpZmllZD0iMjAyNC0w
OS0yNCAyMjozNDowNSIscmV2aXNpb249MTM5OV1dbHo0AMQVAACfYAAA8xR7WzBdPXtibXA9cHh1
AEMgEBAE8PAsZmxhZ3M9MCxwYW5feAgAynk9MCx6b29tPTd9LDEAdv86AB8xHzoEABc-DAAABAA-
-zrAUwA58gAPOg8x-zoADzHvOg8x3zoIAA8RABQvDzqKABwFDgEfMTEAFP8H-xsg-yEg-zAB3zEf
MF8xHyFfMf8wAg0ABhMBXwAfMl8AEbkSEgT-NgP-IQAfNgUA8AAPNg8l-zAAHyUPMN8xDzAIAAJg
AAAMAA8ZACJ-DyX-FALwFC0BGTAICASLAABIAIcwHzEfIR8xnwwAL48weQElDzEABBw2MQAYD_gB
DgoCDxEAEi-POnUAHC--OqcAHR7fiQAPxgI_HzbGAh0OMQAP1wAajyAgBPD----zNABNDpkAD0gC
Dw8XAigfH9QECh8A1AQeFsA-AA9TACMPTAI0Fw91AAyJAD--OgSFABz-AMAqsDqgSqBKoDoPHaA6
DgMACw9NBRxf_jD-HbA0ABxAKsA6sI8AXw8dOqAOAwAND5AAIFETjzFvHQQAEjAEAJcfME82HzA-
Ki8OABtvDAAjPx1qAB8zagAYqlBPKv8dAA8q7x0EAC_fHbcAHBEPBgIA3QEf3rUCIQ4fBQ8-ABcW
z4ACHw8_AB0OUgIPAwAIXw86oDoNnwAdXx3Q-zoQNQAcDlgCDwMABl8POjqgDWUCG7ALDAS-No8x
HzaPMdYHMY8wHwQAAkoCDwwACT8PJa_vBwwcOcoAF09UAg8EAAH_Cj8dLxOPHQ8qLx0vI58dLyov
I88dLyP-HSM1AQ9rAA0--zoE_QQHHh_lBA_tBzEeOTwGDzEATQKHAh4OAwAPEAUND5EARQCCAh4O
AwAPEQUlHDnyCXN-MZ8wPza-BAAvnzBhATwvMTFuBhdbDzigOg0DAA9eAB0AdgXfQP8pAd8aHykP
Gr8vDwgADiMPKWQAHzVkAAUPoAYxD8EAFgGBAo5KoEqwOsAq8M0BDz4ADF--OgD6MDcAHyMPOpMB
T7Aq8K09AA0PAwIHDzIARwIdAh8OAwATDkkGD2IAEBcPFwJWDy8vIX8MABQqDAAfvwgAMl-fGv8p
AYEFDi8xMbcGNg89AxtP3zofKQQABQNRAB80UQATXwkE-zqAhAAiz-8SAd8iHxIPIr8jDwgADiMP
EmQALzEz6QAdHxIEAAUEUgAfMgUDHw8yAKsE6gEPBAAdDtACD50AQBcP_gFWDyMvE38MABQSDAAf
vwgAMk-fIv8SpAMhBEACDwQAHQ8-AVIf8jIAHj--HPCXAB4PMgD---------------8U9BVArxcg
HpgOEA64DgAOyA4ADhgPIAgNGA0IDSgeOA04DTgeKA0QABHYAgAxOA0IAgAQKC0ABQwAAEEAvyAO
mA5AHlgecF5AhwA9NSgPGIkAswgcHqgsHpg8HohMjQA1DA0sjQD-BQwNPA4ADkh8DhAOKIwOIB6c
DkCujgAi02gvGA4QDng9DgAOeE2SAPEEDBgMDQwtHjgMGB0MPR4oDAgMHREA0UiNHjidHiitHhgd
AA0CADQtHggLADA9Ht0CAC-_AYcAHXT-FwHfGB8XBACTLxgPIA8YDyAfCACCLxgfFz8YDyAEAA8g
AAMX3wQAEz8YABcPIAAENAAEBAAXPzAAT98Y-xe0ABu0dwYE-xdo-yBlHxcFALwPFwAO-yBjDiD_
Y08P8wAtNC4wNTk1MjM4MDk1MjRaAKItOC43MTkwNDc2BgACaQAZMmgAcDwKBAD-FypaAD8qHv0D
AABMDgD_KvgdEzNhAEYxLjE2AQASN2AAHzRKAx4fMDIALwFnAvELnx4OEA69DgAOzQ4ADh0HXQct
Hh0nPScdHi0MAAA7Av4RDb8gDR4NDJcMDQ4ADg0MdwwNDhAOHXwdDiAOnQ5AHl1xAw98ADGAHQIe
vRIerSJ-ABECfwATAn8AEBIuAM58Ig4QDj1yDiAeDYJjAw_AABMgbx5FAHF9Mg4ADn1CgwD3CT0S
ByIeHScdEicSHi0HHTIHIh5Ngh49koUAIB4dgwC-Hg0SfCIe0h7S-gF7AB1A-xcB0joAwx4iB1IH
Ih4SJzInEgwAABYAEAJqAO8CDZcNAh4SDXcNEh4ifWkAISB3RAwDcI8gDxf-IDYFABACBQAQARUD
9QBFHxdPIB8XvyA-F28gHxckACI-IBkAMU8gDwQAMR8gHyEABTIAF68VAAk2ABMfGQAANgAxXyA-
EAAUPzoAMw8gDwQAQh8X3yAQABpPQgBRLxcvIC8_AGN-IC8XXyDAAw2_ADT-F2nZAw8FAPYP4gQI
RjcuNTMBAAMvAlwtMS4zMYAECuAE0XQSBBD-E2Ag-mIA-v8BAH1OAP5iIP5gQwVIMzIuNs0EA2MA
ODIuMwEAA6ECD_QEZvILnA4QDrwOAA48PyBMDgAOLA08DTwePF08HjwKAAgGAAEWACE-EMYH-gQs
DTsNLA4QDjw9PA4gDpwOQB5c7AQPhAAxMSwPEAgAIRwbBwDDDCsePF07HjwNOw07hwAACADPPD1L
DhAOLIsOIB6b8wQlgnwfEA4QDowtigAQDF4IsiwLPAs9HjxbPR48CgAHBgDhLA1bPR4cHQs9Cz0e
DC0HAD5NO01PCA-4BBRA3xAfFwQA8QBPED8gTxAfFz8QDyA8Dj8KAKlePR8XPQ48Dj0bBgAQXgoA
JD0OBgCPTT5NG90b3ft_AB4v8PAyALMBxgH3BZsOEA67DgAOSy8gSw4ADlsNWx5rBAD_HFsNCQ1L
HksNKQ07HjsNSQ0rDgAOKw1JDRsOEA47DSkNKw4gDjstKw5AHlvQAg_DAC1xSwMeaw07E4UAIRsj
hgARM4YAEyOGAAAIAACGAM8zDhAOKwMtQw4gHpPPAiVyexMOEA6LI4gAIQsziQBhC0Meaw1TBADh
WwMNUx5LAw0JDUMeOwOKACArA4MAMR4bEwcAIQszFQBfUy1DHtPSAiLJ0x7THlMvIEMeYw1TBAAR
U3UAEUNfABEzbAACBgAfQ3EAKS-w8DIAswG8AfERmg4QDroOAA7KDgAOWg8gWh5aDQoNSh5qDVoe
2h46DQoCAJUqHiqNGh4aDQgCALMKDgAOGo0KDhAOKiQAnhoOIA6aDkAeWs0CD4sAKbU6Dxkeag06
HB6qLI8AWSweKo0cjwARDI8AMRwOAI8AEQwMDj4QDir7DQ_PABhweh8ZDhAOiqUFIoo9kwDxBApN
HloMCgxNHmoMXR5afR46DA0CAJUtHiqMHR4aDAgCAJUNHhoNjB0eCi0iAA_uBSY0GR8XBAD3Am8Z
DyBfGR8XXxkPIA8ZDyBPFAAAIAATPxgABAQA9AMvGR8XLxmPIB8ZHxcfGQ8gCA4CABEPGgAgjh3u
BRENAgBvLRzdHN38DQPr9QqXDhAOtw4ADlcIVw4ADkcoRx5XKEceR0g3BAAAEAARZx4AEbcsAH4g
DpcOQB5X9AIPcgAs8AcnDxIeR0gXHR5HSActHlcoBz0eZwgHghAgZ10vAL9tDhAON30OIB4HjeAC
JYF3HxIOEA6HLX4AIRc9fwCVTR5XKE0eR0g9BAD-ADcdKE0eJz0IXR4XvR4HzccCJzASHxcEAKBv
EgheHxdeKE4dBAA1Tkg_BAAAEABSbgheHd4CAB-9iwIgDzIA-3n-EQgIBCAWUBdADyMPEB8jIA4v
EB4QHg0uEBcNJxBeEF4AfwAfD0cB5bAQJjBIIB8gKCAOOAMAfx4oIEgwJiCNASLfPxAwNyBeEFcQ
XhBXAEIAIm8PHA8QHxzPASwATQDyBB8gUAUPFUAFLiAFDgcuEAUnHhAJAAEFAB9OngAg8gFABhAG
YAYQFxAGIAcABxAHBgAQAAIATxcgB1BRAB3-C0AoMDggBygPGBAnCA4QNwYQNwYgJwYwFwZA8wE9
HzYxAF1fEgTw-xEyABzwIDB-F2AOcQ5ADpEOIA4RFQFFEQ4QDgEFDxYPIAUvFg8gDxYFAQ4QDgUd
DyA9DB0FHQBQHQU9BR0VADARfRE1APABXREOMA4CcQIOIA4CHxVRG0oU4AIbHR8YCx0rAh4rLQot
YA--EBsVCBsVKw4gHnEeQA5xDlAOIR4hDmAPEx8REBkPEzC3AHZACA8YW7YAMQgKW7YA0Ao7LQUO
EB5xDQUOMA68AA_4ACov8ARwAWIPtABDECC2ACIfFggAArcAAA4AET8WAAG7AKENDyAFDB0MBQwN
wAB-BQ0FHQUNBcYAYA59Aw8xAG4PrgMuO7EOEAQAMCAOkVUBIX8VVgERnVMBjL0CHt0OAA69egNf
LxMQLDB-AFYRnRECSB5xDAVGA08vExArjgIfDwQBLg4AAQ98AI4OjwIPMQCe8AwVIgTwDk8g4A5L
DsAOKw4fIwsOoA4rDg8yDyMEADALDpAOABQkEAABDwCMHyQPEQ8QDzINAIE7Dg8kHzIPGgsAET0G
ACAtHk4AoA0uoA4LDgsOHzJeADALDw1hAABbAOELDw1LDhsOcA4LDGsOCwgAQBsuAh4KAPYUGww7
DhsegB4LPA4bHpAuKw4bHqBOAh4CDqAOLR4SHqAOfQ4EANAdDk0OsA4dDgAtDrA_BQD-GA8QLgAt
DqAqHgAOHQ6QGgEaEDqAGgEKASAKIZABKiABKgGQKiBKMDM3GQAqAR8jKgF9MhsOYCoBABQAASwB
YQ4LDoAuKwgAEJAwAWAeoA49Eh4dAaAtDsAOLQ4dDsAOhhBw0A49DtAuPSsBQD49DpAqAf8JLQ6A
SiBOYAohCkA6cCoBQAoxcDowATogJgEMD1ACsYEukA6NDpAOPWcAIS0eBgAAHh0QHlwCIQBOBgAx
Dg8QSAEhACpsAv8GGgEasEoBCgHACiEAKsABKhAawEqAUQKuD3sDFlE9Di0OoCUBNS0OkAgAMx0O
EAgAECBPAgMIAP8IcD8QQDpwCiFACiFwASpAASoBYEowShAtAQwPCgUeDzEA-1LxDhQZBPALTxPQ
DkMOwD4jDqAOPxUOEw6gDh8fDyAHCgA5DxYPDAAhHxYLAOAjDiMOsA4DDiMO0B4TDkAAQLAOEx5C
AF8DDhMOEwgAB0MeEw4jQAD-DqAOEw5DDoBOQxFgER5ADjEwQWBBIDGAIUARkBEwxgCQIJAeQAAQ
kBMAvjMegBMuIx4RYBETyQAP8QF5AKYEFA2mBDILTyNHBEcyDyMfqAQgDzKoBBgfrAQRD50EjC8k
DxAPEQ8yEQDwCCQOkA4NHzINDA0cDQ6QDo8aDpAeah6AlgTxGh4qHgkLDmAOCwkbDiwOGwkLDkAO
Cwk7DgwOOwkLDiAOCwlbDlsJCw4AIgDxCjsOawkLHgsJKx4CLgJLCQseGxkrDisOAgs6AEYAHhsp
DgAnEC4bAPUJMD4CLgIuGwkeQA4KHiIeCk5QDooeKw5ABgDwBRsOUB4aLioOAB5gTgAOKg6QHi8Q
CAAhoDgGADEIEQgIAP8EMQA4sDEAGCGwERAIASgB8ABIMF8BHR8iXwGZKAk7XwEvCzlfATMhGh5f
AYA_sDgACB4IsF0B-wQ4sAEYAQAIIbA4AAEoAbAYIDhAuAIeD1kB5CIOKlkBEA4GADAKHpAIABFO
BgAwPxCgBwD-BwgRCLA4ADGgIRgAMZABKAEIEBGgSLC4Av8jsaA_AE6gPgA-ELA4VwH-AiEIAAEY
AaABKAEAOKA4IBhgVgEZ-AERGQTwBm8TgA5jDmAOgw5QBABwHmMeUC5DLgwAoEAegx4gDhMeQx4Q
IEAzHgMeXSDxCAMOgw4DDhA_Yz4QM24zECMOYw4jEBMAuAZAABNALroG-wxwDhEeIw5wAR8YAQAB
EwFwPQAxgB0QDREN0B1iAwwcNa0AH0CsAE4RTrAAEQ6pAGAxADFwMQC4AE_AERA9rgAPD1sBWvEA
DiMOAy5wDiMeEQ5wARMBpwDfcDEAPXANEQ0QHZAdkFsBeASsABFOqgAxDhEOWwEAsgBvADFwPRAR
rgAcCWsFf2sOoA6LDpAEAAHwEB5rHqAuKy6QHoseYA4bDmsOGw5ADjsOSw47DiAO_wHSIuAOaw5L
HjsOCx4rHgsOO8AHcA6LDjsOED4GAPEJMC5rHjsOQA4PGh4rHg0OKx5ADo1OUA6NmgMxPQ49CAAw
LS4tpAMQTpAMcQAeYA8QLgybDBFMBgCwDCEMAAwtDJBBAEwEAK_gIRABLAHwASFQ-AQcH3DvABg-
Lmsu7wA-BvUAAJEEMw0_LZEENy0OkPMAAOsAMEwATAQAn6AsEAwhDPAAQe4AEA-eAY4A3AEQTuEG
MC0OAO8AAYEOgEyQDC0MAAwh8wARQQQAjwEsARAhsCGw3QGqUw4tPg0e7AAlTpDyAADsABRM3QEA
2AIwECyg3AEP7QAa8gAOGQQwTxNwDkMOYD4jDkAHDRVABw0XQAcNFkAHDRFASAQRUAcNQHAeEw5A
ABFQBw0TQO8MDwgABTFQDhM6AAQMADITDmAGAP8ALiMOkDGQLxgBgDENgDEN2gUMHDTFAC-wAsYA
WRFAzQ0AQAAFxgAvPhPAACcOkw0PMQA9CcMDD2oSQiIeG2oSUA8NDgsuUABCCww7Hl4SoFsOKw5Q
DgsMew7VAsALDBs_Ah47DjAOGwyAEgCSKSELTAkAMVAuOwgA8AJgXgIeAhseYA49HhI_cA6NDuUU
BAYAAKASYE0OLR6ADkQjEx2DEg8IAADwAE8QADqgGiEAGiGQCgEqAQQATJBKAErNFCktMJwyBdAt
TTEuODPPLR82VgFbIJAuVgEBqxNCCw4LLk8BIkseTwExaw47TwEiew5NARELVwFTQB4LPAtOASIr
DE8BEE4RAAFQAVAOAh4CLkABLBIeVAEwjR6AWAEvDpBYAW8O3wIPTwB5CUgKoQNvFQMOUA4PFgdz
HWAVDyAHDxURAFAfBw8gL3QEgg8fDlAODR8W0wwFvgnxBz4tPkAOMw4MDjMOMA4zLjMOIA5TDlO6
CTAzDjO8CbAuMw4zLhAjjiMQ47oJE2O4CQAPCwcGAAC4CRAvyAuBK2AxCwALMVAGAB8gHQQFD9EA
SlFQDiMODBkFCNEAC9cAP_4Q448KAQ-RACwP6gtdBa8AAeoLA5sM3w8YEQ0ADRENgB0gHUCxAB0f
F7EADwGtAE4ugy4QsQAwHmMeMwJDA24DLq8AAJ4AHiO3AA_xADMPFBTpCFwRABYUDwgABFCgPxAA
OGARMBghgGEREAAdFD1wSCAeFFctNy43MgEABHgBPi4yNpQ5HzeHAWaSkA4LHioeCw6AjgYzLA4L
kQFTKw4MDiuRATNLDkuPAQDxCgSRAQWHAQAhAARsAVkeGxkbCZUBJhkLDwBCIB4bDosBcAsOQD4i
LiuTARuKjwEyKi4qkQEBcQEOkwEPiwFMDyUNkgAEACMeYAoAFJAIAEgPEC0MHA4AKQ2fAAEsAaAh
ICFQFQFiT4BOK05IDU4eLg0BDxUBT1BtPTd9fQ==
:: gfx/2.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA3LTA4IDIxOjI3OjQ0Iixtb2RpZmllZD0iMjAyNC0w
OS0yNCAyMjozNDowNSIscmV2aXNpb249MTM5Ml1dbHo0AMQVAACfYAAA8xR7WzBdPXtibXA9cHh1
AEMgEBAE8PAsZmxhZ3M9MCxwYW5feAgAynk9MCx6b29tPTd9LDEAdv86AB8xHzoEABc-DAAABAA-
-zrAUwA58gAPOg8x-zoADzHvOg8x3zoIAA8RABQvDzqKABwFDgEfMTEAFP8H-xsg-yEg-zAB3zEf
MF8xHyFfMf8wAg0ABhMBXwAfMl8AEbkSEgT-NgP-IQAfNgUA8AAPNg8l-zAAHyUPMN8xDzAIAAJg
AAAMAA8ZACJ-DyX-FALwFC0BGTAICASLAABIAIcwHzEfIR8xnwwAL48weQElDzEABBw2MQAYD_gB
DgoCDxEAEi-POnUAHC--OqcAHR7fiQAPxgI_HzbGAh0OMQAP1wAajyAgBPD----zNABNDpkAD0gC
Dw8XAigfH9QECh8A1AQeFsA-AA9TACMPTAI0Fw91AAyJAD--OgSFABz-AMAqsDqgSqBKoDoPHaA6
DgMACw9NBRxf_jD-HbA0ABxAKsA6sI8AXw8dOqAOAwAND5AAIFETjzFvHQQAEjAEAJcfME82HzA-
Ki8OABtvDAAjPx1qAB8zagAYqlBPKv8dAA8q7x0EAC_fHbcAHBEPBgIA3QEf3rUCIQ4fBQ8-ABcW
z4ACHw8_AB0OUgIPAwAIXw86oDoNnwAdXx3Q-zoQNQAcDlgCDwMABl8POjqgDWUCG7ALDAS-No8x
HzaPMdYHMY8wHwQAAkoCDwwACT8PJa_vBwwcOcoAF09UAg8EAAH_Cj8dLxOPHQ8qLx0vI58dLyov
I88dLyP-HSM1AQ9rAA0--zoE_QQHHh_lBA_tBzEeOTwGDzEATQKHAh4OAwAPEAUND5EARQCCAh4O
AwAPEQUlHDnyCXN-MZ8wPza-BAAvnzBhATwvMTFuBhdbDzigOg0DAA9eAB0AdgXfQP8pAd8aHykP
Gr8vDwgADiMPKWQAHzVkAAUPoAYxD8EAFgGBAo5KoEqwOsAq8M0BDz4ADF--OgD6MDcAHyMPOpMB
T7Aq8K09AA0PAwIHDzIARwIdAh8OAwATDkkGD2IAEBcPFwJWDy8vIX8MABQqDAAfvwgAMl-fGv8p
AYEFDi8xMbcGNg89AxtP3zofKQQABQNRAB80UQATXwkE-zqAhAAiz-8SAd8iHxIPIr8jDwgADiMP
EmQALzEz6QAdHxIEAAUEUgAfMgUDHw8yAKsE6gEPBAAdDtACD50AQBcP_gFWDyMvE38MABQSDAAf
vwgAMk-fIv8SpAMhBEACDwQAHQ8-AVIf8jIAHj--HPCXAB4PMgD---------------8U9BVArxcg
HpgOEA64DgAOyA4ADhgPIAgNGA0IDSgeOA04DTgeKA0QABHYAgAxOA0IAgAQKC0ABQwAAEEAvyAO
mA5AHlgecF5AhwA9NSgPGIkAswgcHqgsHpg8HohMjQA1DA0sjQD-BQwNPA4ADkh8DhAOKIwOIB6c
DkCujgAi02gvGA4QDng9DgAOeE2SAPEEDBgMDQwtHjgMGB0MPR4oDAgMHREA0UiNHjidHiitHhgd
AA0CADQtHggLADA9Ht0CAC-_AYcAHXT-FwHfGB8XBACTLxgPIA8YDyAfCACCLxgfFz8YDyAEAA8g
AAMX3wQAEz8YABcPIAAENAAEBAAXPzAAT98Y-xe0ABu0dwYE-xdo-yBlHxcFALwPFwAO-yBjDiD_
Y08P8wAtNC4wNTk1MjM4MDk1MjRaAKItOC43MTkwNDc2BgACaQAZMmgAcDwKBAD-FypaAD8qHv0D
AABMDgD_KvgdEzNhAEYxLjE2AQASN2AAHzRKAx4fMDIALwFnAvELnx4OEA69DgAOzQ4ADh0HXQct
Hh0nPScdHi0MAAA7Av4RDb8gDR4NDJcMDQ4ADg0MdwwNDhAOHXwdDiAOnQ5AHl1xAw98ADGAHQIe
vRIerSJ-ABECfwATAn8AEBIuAM58Ig4QDj1yDiAeDYJjAw_AABMgbx5FAHF9Mg4ADn1CgwD3CT0S
ByIeHScdEicSHi0HHTIHIh5Ngh49koUAIB4dgwC-Hg0SfCIe0h7S-gF7AB1A-xcB0joAwx4iB1IH
Ih4SJzInEgwAABYAEAJqAO8CDZcNAh4SDXcNEh4ifWkAISB3RAwDcI8gDxf-IDYFABACBQAQARUD
9QBFHxdPIB8XvyA-F28gHxckACI-IBkAMU8gDwQAMR8gHyEABTIAF68VAAk2ABMfGQAANgAxXyA-
EAAUPzoAMw8gDwQAQh8X3yAQABpPQgBRLxcvIC8_AGN-IC8XXyDAAw2_ADT-F2nZAw8FAPYP4gQI
RjcuNTMBAAMvAlwtMS4zMYAECuAE0XQSBBD-E2Ag-mIA-v8BAH1OAP5iIP5gQwVIMzIuNs0EA2MA
ODIuMwEAA6ECD_QEZvILnA4QDrwOAA48PyBMDgAOLA08DTwePF08HjwKAAgGAAEWACE-EMYH-gQs
DTsNLA4QDjw9PA4gDpwOQB5c7AQPhAAxMSwPEAgAIRwbBwDDDCsePF07HjwNOw07hwAACADPPD1L
DhAOLIsOIB6b8wQlgnwfEA4QDowtigAQDF4IsiwLPAs9HjxbPR48CgAHBgDhLA1bPR4cHQs9Cz0e
DC0HAD5NO01PCA-4BBRA3xAfFwQA8QBPED8gTxAfFz8QDyA8Dj8KAKlePR8XPQ48Dj0bBgAQXgoA
JD0OBgCPTT5NG90b3ft_AB4v8PAyALMBxgH3BZsOEA67DgAOSy8gSw4ADlsNWx5rBAD_HFsNCQ1L
HksNKQ07HjsNSQ0rDgAOKw1JDRsOEA47DSkNKw4gDjstKw5AHlvQAg_DAC1xSwMeaw07E4UAIRsj
hgARM4YAEyOGAAAIAACGAM8zDhAOKwMtQw4gHpPPAiVyexMOEA6LI4gAIQsziQBhC0Meaw1TBADh
WwMNUx5LAw0JDUMeOwOKACArA4MAMR4bEwcAIQszFQBfUy1DHtPSAiLJ0x7THlMvIEMeYw1TBAAR
U3UAEUNfABEzbAACBgAfQ3EAKS-w8DIAswG8AfERmg4QDroOAA7KDgAOWg8gWh5aDQoNSh5qDVoe
2h46DQoCAJUqHiqNGh4aDQgCALMKDgAOGo0KDhAOKiQAnhoOIA6aDkAeWs0CD4sAKbU6Dxkeag06
HB6qLI8AWSweKo0cjwARDI8AMRwOAI8AEQwMDj4QDir7DQ_PABhweh8ZDhAOiqUFIoo9kwDxBApN
HloMCgxNHmoMXR5afR46DA0CAJUtHiqMHR4aDAgCAJUNHhoNjB0eCi0iAA_uBSY0GR8XBAD3Am8Z
DyBfGR8XXxkPIA8ZDyBPFAAAIAATPxgABAQA9AMvGR8XLxmPIB8ZHxcfGQ8gCA4CABEPGgAgjh3u
BRENAgBvLRzdHN38DQPr9QqXDhAOtw4ADlcIVw4ADkcoRx5XKEceR0g3BAAAEAARZx4AEbcsAH4g
DpcOQB5X9AIPcgAs8AcnDxIeR0gXHR5HSActHlcoBz0eZwgHghAgZ10vAL9tDhAON30OIB4HjeAC
JYF3HxIOEA6HLX4AIRc9fwCVTR5XKE0eR0g9BAD-ADcdKE0eJz0IXR4XvR4HzccCJzASHxcEAKBv
EgheHxdeKE4dBAA1Tkg_BAAAEABSbgheHd4CAB-9iwIgDzIA-3n-EQgIBCAWUBdADyMPEB8jIA4v
EB4QHg0uEBcNJxBeEF4AfwAfD0cB5bAQJjBIIB8gKCAOOAMAfx4oIEgwJiCNASLfPxAwNyBeEFcQ
XhBXAEIAIm8PHA8QHxzPASwATQDyBB8gUAUPFUAFLiAFDgcuEAUnHhAJAAEFAB9OngAg8gFABhAG
YAYQFxAGIAcABxAHBgAQAAIATxcgB1BRAB3-C0AoMDggBygPGBAnCA4QNwYQNwYgJwYwFwZA8wE9
HzYxAF1fEgTw-xEyABzwIDB-F2AOcQ5ADpEOIA4RFQFFEQ4QDgEFDxYPIAUvFg8gDxYFAQ4QDgUd
DyA9DB0FHQBQHQU9BR0VADARfRE1APABXREOMA4CcQIOIA4CHxVRG0oU4AIbHR8YCx0rAh4rLQot
YA--EBsVCBsVKw4gHnEeQA5xDlAOIR4hDmAPEx8REBkPEzC3AHZACA8YW7YAMQgKW7YA0Ao7LQUO
EB5xDQUOMA68AA_4ACov8ARwAWIPtABDECC2ACIfFggAArcAAA4AET8WAAG7AKENDyAFDB0MBQwN
wAB-BQ0FHQUNBcYAYA59Aw8xAG4PrgMuO7EOEAQAMCAOkVUBIX8VVgERnVMBjL0CHt0OAA69egNf
LxMQLDB-AFYRnRECSB5xDAVGA08vExArjgIfDwQBLg4AAQ98AI4OjwIPMQCe8AwVIgTwDk8g4A5L
DsAOKw4fIwsOoA4rDg8yDyMEADALDpAOABQkEAABDwCMHyQPEQ8QDzINAIE7Dg8kHzIPGgsAET0G
ACAtHk4AoA0uoA4LDgsOHzJeADALDw1hAABbAOELDw1LDhsOcA4LDGsOCwgAQBsuAh4KAPYUGww7
DhsegB4LPA4bHpAuKw4bHqBOAh4CDqAOLR4SHqAOfQ4EANAdDk0OsA4dDgAtDrA_BQD-GA8QLgAt
DqAqHgAOHQ6QGgEaEDqAGgEKASAKIZABKiABKgGQKiBKMDM3GQAqAR8jKgF9MhsOYCoBABQAASwB
YQ4LDoAuKwgAEJAwAWAeoA49Eh4dAaAtDsAOLQ4dDsAOhhBw0A49DtAuPSsBQD49DpAqAf8JLQ6A
SiBOYAohCkA6cCoBQAoxcDowATogJgEMD1ACsYEukA6NDpAOPWcAIS0eBgAAHh0QHlwCIQBOBgAx
Dg8QSAEhACpsAv8GGgEasEoBCgHACiEAKsABKhAawEqAUQKuD3sDFlE9Di0OoCUBNS0OkAgAMx0O
EAgAECBPAgMIAP8IcD8QQDpwCiFACiFwASpAASoBYEowShAtAQwPCgUeDzEA-1LxDhQZBPALTxPQ
DkMOwD4jDqAOPxUOEw6gDh8fDyAHCgA5DxYPDAAhHxYLAOAjDiMOsA4DDiMO0B4TDkAAQLAOEx5C
AF8DDhMOEwgAB0MeEw4jQAD-DqAOEw5DDoBOQxFgER5ADjEwQWBBIDGAIUARkBEwxgCQIJAeQAAQ
kBMAvjMegBMuIx4RYBETyQAP8QF5AKYEFA2mBDILTyNHBEcyDyMfqAQgDzKoBBgfrAQRD50EjC8k
DxAPEQ8yEQDwCCQOkA4NHzINDA0cDQ6QDo8aDpAeah6AlgTxGh4qHgkLDmAOCwkbDiwOGwkLDkAO
Cwk7DgwOOwkLDiAOCwlbDlsJCw4AIgDxCjsOawkLHgsJKx4CLgJLCQseGxkrDisOAgs6AEYAHhsp
DgAnEC4bAPUJMD4CLgIuGwkeQA4KHiIeCk5QDooeKw5ABgDwBRsOUB4aLioOAB5gTgAOKg6QHi8Q
CAAhoDgGADEIEQgIAP8EMQA4sDEAGCGwERAIASgB8ABIMF8BHR8iXwGZKAk7XwEvCzlfATMhGh5f
AYA_sDgACB4IsF0B-wQ4sAEYAQAIIbA4AAEoAbAYIDhAuAIeD1kB5CIOKlkBEA4GADAKHpAIABFO
BgAwPxCgBwD-BwgRCLA4ADGgIRgAMZABKAEIEBGgSLC4Av8jsaA_AE6gPgA-ELA4VwH-AiEIAAEY
AaABKAEAOKA4IBhgVgEZ-AERGQTwBm8TgA5jDmAOgw5QBABwHmMeUC5DLgwAoEAegx4gDhMeQx4Q
IEAzHgMeXSDxCAMOgw4DDhA_Yz4QM24zECMOYw4jEBMAuAZAABNALroG-wxwDhEeIw5wAR8YAQAB
EwFwPQAxgB0QDREN0B1iAwwcNa0AH0CsAE4RTrAAEQ6pAGAxADFwMQC4AE_AERA9rgAPD1sBWvEA
DiMOAy5wDiMeEQ5wARMBpwDfcDEAPXANEQ0QHZAdkFsBeASsABFOqgAxDhEOWwEAsgBvADFwPRAR
rgAcCWsFf2sOoA6LDpAEAAHwEB5rHqAuKy6QHoseYA4bDmsOGw5ADjsOSw47DiAO_wHSIuAOaw5L
HjsOCx4rHgsOO8AHcA6LDjsOED4GAPEJMC5rHjsOQA4PGh4rHg0OKx5ADo1OUA6NmgMxPQ49CAAw
LS4tpAMQTpAMcQAeYA8QLgybDBFMBgCwDCEMAAwtDJBBAEwEAK_gIRABLAHwASFQ-AQcH3DvABg-
Lmsu7wA-BvUAAJEEMw0_LZEENy0OkPMAAOsAMEwATAQAn6AsEAwhDPAAQe4AEA-eAY4A3AEQTuEG
MC0OAO8AAYEOgEyQDC0MAAwh8wARQQQAjwEsARAhsCGw3QGqUw4tPg0e7AAlTpDyAADsABRM3QEA
2AIwECyg3AEP7QAa8gAOGQQwTxNwDkMOYD4jDkAHDRVABw0XQAcNFkAHDRFASAQRUAcNQHAeEw5A
ABFQBw0TQO8MDwgABTFQDhM6AAQMADITDmAGAP8ALiMOkDGQLxgBgDENgDEN2gUMHDTFAC-wAsYA
WRFAzQ0AQAAFxgAvPhPAACcOkw0PMQA9CcMDD2oSQiIeG2oSUA8NDgsuUABCCww7Hl4SoFsOKw5Q
DgsMew7VAsALDBs_Ah47DjAOGwyAEgCSKSELTAkAMVAuOwgA8AJgXgIeAhseYA49HhI_cA6NDuUU
BAYAAKASYE0OLR6ADkQjEx2DEg8IAADwAE8QADqgGiEAGiGQCgEqAQQATJBKAErNFCktMJwyBdAt
TTEuODPPLR82VgFbIJAuVgEBqxNCCw4LLk8BIkseTwExaw47TwEiew5NARELVwFTQB4LPAtOASIr
DE8BEE4RAAFQAVAOAh4CLkABLBIeVAEwjR6AWAEvDpBYAW8O3wIPTwB5CUgKoQNvFQMOUA4PFgdz
HWAVDyAHDxURAFAfBw8gL3QEgg8fDlAODR8W0wwFvgnxBz4tPkAOMw4MDjMOMA4zLjMOIA5TDlO6
CTAzDjO8CbAuMw4zLhAjjiMQ47oJE2O4CQAPCwcGAAC4CRAvyAuBK2AxCwALMVAGAB8gHQQFD9EA
SlFQDiMODBkFCNEAC9cAP_4Q448KAQ-RACwP6gtdBa8AAeoLA5sM3w8YEQ0ADRENgB0gHUCxAB0f
F7EADwGtAE4ugy4QsQAwHmMeMwJDA24DLq8AAJ4AHiO3AA_xADMPFBTpCFwRABYUDwgABFCgPxAA
OGARMBghgGEREAAdFD1wSCAeFFctNy43MgEABHgBPi4yNpQ5HzeHAWaSkA4LHioeCw6AjgYzLA4L
kQFTKw4MDiuRATNLDkuPAQDxCgSRAQWHAQAhAARsAVkeGxkbCZUBJhkLDwBCIB4bDosBcAsOQD4i
LiuTARuKjwEyKi4qkQEBcQEOkwEPiwFMDyUNkgAEACMeYAoAFJAIAEgPEC0MHA4AKQ2fAAEsAaAh
ICFQFQFiT4BOK05IDU4eLg0BDxUBT1BtPTd9fQ==
:: gfx/3.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA3LTA4IDIxOjI3OjUxIixtb2RpZmllZD0iMjAyNC0w
OS0yNCAyMjozNDowNSIscmV2aXNpb249MTU5OV1dbHo0ALwMAAAMXAAA9Ch7WzBdPXtibXA9cHh1
AEMgEBAEQK4gHp8PDhAOvQ4ADs0OAA4dDxwNDB0MDQwtHj0MPQw9Hi0MEAAR3QIAMT0MDQIAEC0t
AAUMAABBAPMKIA6dDkAeXR5wXkAsZmxhZ3M9MCxwYW5feAgAz3k9MCx6b29tPTd9LIYAGzUtDx_I
ALMNGx6tKx6dOx6NS4wANQsMK4wA-wULDDsOAA5New4QDi2LDiAemw5Aro0AIPACbw8vHw4QDn8P
Px8OAA5-D08HAIEfDw8cDw8PHAgAcR8PHC8fHj8PAIQfHw8cPx8eLyAAFR8gADBPD48lABCfHQAy
rx8eKwAXDwQATS8fHg8VACI-H2wBL-4BuwAcMv4B3zsAHy3GARYjHi0KABs9dAAfMXQAEbR3BgT-
HWj-HGUfHQUAww8dAA7-HGMOIP5jEEsAHzJLAAMaMksAEERLAHCPHA8d-xw2BQAQAgUAEAFUAPUA
RR8dTxwfHb8cPx1vHB8dJAAiPxwZADFPHA8EADEfHB8hAAUyABevFQAJNgATHxkAADYAMV8cPxAA
FD86ADMPHA8EAEIfHd8cEAAaT0IAUS8dLxwvPgBjfxwvHV8c-wANvgA0-x1pGAEPBQD2DyECAB8w
IQIRXBAQBPDwMQAzLjc1NAAQNQsAATcAHzU3ADQBlgQYGpYEwQ5dDi0eHS49Lh0eLQwAAE0D-gkN
vxwNHg0MngwNDgAODQx_DA0OEA4dfB0QBQ_AAD2AHQoevRoerSqDABEKgwATCoMAEBouAM58Kg4Q
Dj16DiAeDYoHBQ_EABcgbxpJAHF9Og4ADn1KhwD3CT0aDioeHS4dGi4aHi0OHToOKh5Nih49mokA
IB4dhwC-Hg0afCoe2h7a-gF-ACIw-gHaPgDDHioOWg4qHhouOi4aDAAAFgAQCm4A6goNng0KHhoN
fg0aHip9bQAfMW0ACg9eAgcPNwC-AUwCExtMAvIDPT8cTQ4ADi0MPgw9Hj1cPR49CgAIBgABFgAx
Oww9KAARO_IHPj08PdQCD4gAPiEtCwcAIR0bBwBhDSsePVw7iwATO4sAAAgAPj08S_IHD4sAICB-
G4wAIo0rjQAjDTuOABM7dQAqPgwGAHAtC1w7Hh0bhQAxHg0rBwB-SzxLHtse2_ACJvQD2x7bHks-
HEseOw0_DTseO107CgAIBgABFgAkOw0GACpLPXUAD_gCHQ83AGIfM24AUQFgAhMdYAIhTS9gAldd
DF0ebQQAoF0MDw0MTR5NDCt3AiEMS8sKQC0MSww4AL49DCsMLQ4gDj0sLekCD4kANoJNDwwebQw9
G4wAYR0rHk0MKmYCEUrMChMtCAAQPRYAAOkCPwssS_sCLiAdHOsCEiyPACANPJAAcQsNTB5tC1wE
APEOXQwLXB5NDAsPDQtMHj0MCyoLPB4tDAtKCyweHRwHACENPBUAX1wrTB7c8AImydwe3B5cLxxM
HmwNXAQA8wNcDQ8NDUweTA0rDTwePA1LDSwGAAISAC9cLXYAJwVMAh8w8QJaD6UAUgDbARedJAgw
XQ8c4gIA4QIAawIJ6gtCDw8MCwIAgh0eHQsPGgwKAgAQC7oIEx0bACAMC8AIBBYMDsYID6EANjI9
Dx8EAyWtK6UAESulAAOXAIIbHh0KDxoMCQIAIAoLpQADGwAxDAobJwMRDbIAHysMBjI0fR8fIQMi
jTypAHINTB5dCw0LJQNBXXwePSABMAwLLKcAIgsKAgARHKcAIgsJAgBTCgweHQwaAAAcACUNLDQA
H9w3AygD2A0fbd4BIiMeLRkAABsABjIADu4ND1ED9ZCfHg4QDk0PHF0tBVEMDw8MTY0FADAGBzYG
CQYAAhgAQl0MCwzqBR5NExEPjQBJIR0LBwAhDRsHABErGgARO48AEUuPABBbBgAQa_AGEHsQDBaL
KQMfNZEAHjB-Hh_sEaFPHg8cLx4vDw4ACwAA_hAwDx4-DwAQPxoAdg8PHD8PHk8LAAAWACBPDw8A
DwsABxUPLgAAWgACVQAwTw8eSRGZDxxfDx4PHs8PuAIPSAMeGA9EA1NNDC0MPQYAWT0MTQwtBgAC
GAAIbgMPMgMpDzcAYh8wNwBOXPCHBPD-AQDwANNMDx3ArA4g3A4g7A5w7AYAcSD8Ag5w-AILAAID
ADFMDjADAA8pAGnRLkw_IEyeIEyucExOTBsAYR5MXkwOcAYAQSBMriAXADVOTF4zAMHwAEwOUEwO
sEwO8AIRAAIaABFAAwARkAYAQSBMDsAVABFwAwAPOACgP7wOQDgAyj9MfkBQASUkvLBAAgkzADG8
YOwvAB-sLAB9MUxusMQCD_YAAENuYExO5QAvTkxsAiQPOAD-6UDsDiCsGAARsHYCBTYACG4FDzIA
kuD_ACC_IF6w-gBwXjBeIAQAgP4DcP4DIP4ADQAgcF4XANHw-xJsDhB8DlB8DhAcAwBAbA5QbAYA
IxCMCQAGGwBPXA7wTC4AG8McLhwOEC4cPlAuHD4XAGEcXlAcXhAZABAeBgAyUBwuFgAHIwAxTvBM
CgBBQBwOsAYAAhkAQaAcDmAJABEwBgARUAYARxAcDtAkABLwFgADOgAUbKIADjcAMmwOgCEAAtYA
DzEAJSYcLtQADTMANRxegCMAEk4OAQ-TAC4BDAAPOgAoB98AA7UBCDQAANwADzQAIfABLhAuQC6w
LkAuEC4QflB_EAgAEJ4IABLQFAAQbkwJQjNMDtCNCCD8Aa4Cb8D8Ag7wdRUAMgDpBUEgTG5MGAAB
5QgFGgAhDjAGABFQBgAR4PUDDxwAfRQwGQAPHwBOL-wBHQBfL8xOHAAILw5gHAAGP9wOUBwABl9M
HnwOQB4AB28OAA58DjAgAAhfEA58DiAgAAg-IA5sIAAKPzAOXCAACj9ADkzEATch-An2AgIXABHs
8wUPFQAuIf4KCAYgUF4HAE-_A-D-AQAKG1BADVYtMy4wMwEAEzdMDVYxNy40MwEAAlcNHjGODQ9O
AJAfNJwAiC8xM08AOx8y7AA7D04A-----------------------------zTwAQgIBBAeDx8wLw8f
GiAfHQ8HADEPHR8HABEgBwAhHyAVAAAhAF8wHg8fIF81Cx4xXwD2BQ4PGw4PHzAuDTAvGwswDA4M
DTAuAwAfEFAAHecgHxtQHw5AHxsbID4bEAMAHwBKAB2QAFwQHA4sEAwOIjnQHBAODxwODR8PEA0O
DT45rxAODQ4NGxBcEFxZAB-xED8eHRAeHx8dEA4MHw4PDw0QDC8ODA8PED8OHBAeGx0EAC8_HVgA
HvUAgC8eLRAuLQA-Hz8PTx8vBAAgAC8FAA_mACOwDx8OHRAeHB0QLgypAIAuDAsNEA4MDgcALh4c
pgAPWAAV9wY_HRAPHw0PGg4NDw8AHx8NHx0NHw8IAP8BDxoPDi8PLx8fGi8PAD8fH78AHzAgHxoI
AgDOKQCtAmIPLxwfGhBPOwgJABQ-BQAPYQAggBxADhAOYA4QxC1iIA0ADRANBgAQAAIATx0gDVBT
AB3xB0AvDzA_IA8OLg8aEC8ODg8aED8ODx8FACAgLyUDXx8ODx9AVgAd8ACwHxtAHg0OIA4LLhAO
Kw4uK78rDgwQDhsODDAsME4AHaRwXn8fHw8PHw8dBAAB2ToACAANGAB-Xx8fD14fH2MAHUEAPh8f
XgIxHgwOeQISHHQCvx0QDhwOCw0QLhsNeQIiYDofGhA6HgMAsBoPDgoeEAotHhAtCAAgDRoWAA9R
AB7wBTAPHlAuMC4PHQwQLg0MHw0uDQwrDDlvKyAMK0AbCgUeYHDfHg8OL9csQx4PHD8IAAAEAE_f
Hn1wTQAdxgBeEA4-HA4QXhAOPQYAH17kAB7WEA8eHx0NMA8OHx0PHwcAMQ8dDAgAERwGACIMDwgA
IR8cpAIvHx_2BR7-C-ADDVAqAAoPGgBKDg8cAA4qDgwQDC4MMCwglwMfwA9QHlAbQDswDxsPDgQA
rzANDxsNDDA7MDuXAB7-CzAsMEwQTA8eAEwODUwOHTwOHQAsDh0gDA4dmAAe8AEQPxxAHkAPDh4N
IA0eDR4ABQAQDUQGT44NLgCYASBBDRANQHIE8AQQDbAfGh8cID8aHxwATxovHAAvBQAPUQAd-xsg
LjAOCw8bCx8fAA4LHxsbDx8OHxsLDQsPHwAOGx0LDAAOLQscEA4bDECUAR8xQB8ezAegPg0PHAAu
LQwuHeE1XxAtHCA8gAQeH-AyAH8OcwkOMgAfMDIA---------zxfEgTw-xEzAAseNmQADzEA-0EP
iQEyVy03LjcyAQAEQACDLjI2MTkwNDcGAA58Sg9PAP-------------------6tQbT03fX0=
:: gfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA1LTAzIDEzOjI2OjA5Iixtb2RpZmllZD0iMjAyNC0w
OS0yNCAyMjozNDowNiJdXQ==
:: map/
:: map/0.map
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA1LTAzIDEzOjI2OjEwIixtb2RpZmllZD0iMjAyNC0w
OS0yNCAyMjozNDowNSIscmV2aXNpb249Nzk2N11dbHo0AKANAAB2QAAA8Ah7e2JtcD11c2VyZGF0
YSgiaTE2Iiw2NAMA_wIiMDAxYjAwMTQwMDMzMDAzNAQAXzUwMDIwHAAIUjEwMDFkRAAjNDYEABcw
DABSNzAwOTcMABM5FABiMTUwMDEzDAAIMAAfYhQAACY0NzgAJjk3PAAvMTQEADQDvACrODEwMDNi
MDAzYwQAX2QwMDI4HAAIFzlEAEA2MDA47ADyCjgwMDkwMDA5MTAwNGYwMDlmMDA0ZTAwOWUIAA8w
AAEAGAAnYmI4AFM4MDA4M0AAADgAEmFIAAQ8AC8xYwQANASMAMA5MDAzYTAwMzIwMDMMAAAQAVA2
MDAzZZEABxwAVmYwMDM3HAAnNThEAMBlMDA4ZjAwNWMwMDkEAfABOTAwNTcwMGE3MDAwZDAwYcQB
H2QwAANnYjEwMGJhOAAARAATNUAAEzYEABY3PAAvMGMEADMFjAAAcQIfOQQAHxc2AAEfMAQAABM1
-AAEBAAmYTUwAGI3NDAwNzMoACJiOQgAD0AACQg8AS8wYwQAMwRQACI4Y9AAYjVhMDA1YgwACAQA
ZjQyMDA0MRAABQQABwAEHzfIAwAmYTIMAAQEAAQwAC40NgQACDAAD1AAAQQ8AC8wYwQAMwRQABc5
AAIQNHAAGzQEAAC4AQDsAxE48wAgMDH4AAAZBQcAAhc3yAMiNGUEAPYDYWEwMGEwMDBhMTAwYTQw
MGEzMAAjYWYUABMxJAASMzAABDwADFAAFzg8AC8wYwQAMwRQACc1OQABAHAAG2MEAB9kAAEPBLQC
AMgDEDhUAtM4MDBiMjAwYTgwMGE5CAAWYjAALmE4HAAAMAAmOWNMAARQACIwYhAEBWwAH2MEADME
UAAvNjEAASQWYUQAIjkyqAABrAASMwABLjgwBAAEMAAADACiYmYwMGI1MDBiNgwALjgwAAETYRAA
JmIxPAAvMGMEADMPAAEBazUzMDA1NAQADwADARthAAEDqAEABAATOQACDOQAJjgwMAAFHABSZDAw
YmUMAA8AAQIWZCQFBDwALzBjBAAzBFAAEzb8AA8EAB4IlAMLBAAvODjkAAMEMAAuODAEAA8AAQIW
ZQwABWwAH2MEAA8PLAkBFzYMACYxNFAALzE0BAAXBPwALjE0BAAmMDcMAA8EACkmNjYMAC8xNGwA
JATcABZjBAAXNgwALjFjJAAPBAARBQABHmMEACYwZgwADwQAKSY2ZQwALzFjbAAkA9wALzBkBAAH
BSQAHzkEAL0PAAH-HAiACSYwNxAAAEQEIjI2SAQmNDYEABc2DAAEBACiYzMwMGI3MDBjMQgACQQA
FzSQBB83BAAYAzQADiAKCoQAACQKJjIz-AAPAAEdBaQJEmFYAwisCRA1tAYH1AkABAAXNgwABAQA
I2NiewVWOTAwYzIYAAAEABdikAMvMWYEABgEoAAWNKAAKmEzhAAiYWYkCg8AASoDiAkiYjKEBgSQ
CQgAAS8wNAQAD6ZjODAwZDEwMGNhFAAABAAXN-gOLzBkBAAXD6AAASphYiQHIjk1JAoPAAEFLzE0
BAAIAyQAIjgwBAAIqAguODAAAQ8EABcPAAE7DJwABAABBHQKLzhiAAEIH2MEAAgIYAAPjAkADAAB
LzY3BAAfBQABHzQEAAMQNrwDFzcQABY2DAAJoAADnAAJAAEWYXALDwABBS8wNQQABwhgAA4EAA4A
ASY3NQQAJjZmDAAPFAAJZzc3MDA3ZHQBDOwHE2IAAQQQABZlDAAPoAAFBAABBAQAHzkAAgAQMqAS
ACAAHzUAAQ8ESAUIUAUiNzAgACY1MAABDwQAJSY3ZdQCDwQAASYyNwwACAQABKAACUQUB6AGJjcw
DAANAAED5AAPAAISA4wTBIATE2LQDyIxZCsAIjFiyAAvNjcEAB8EAAEETAcOBAAPAAEQCEQUFmao
AACkAG83MjAwNzEAASwDjBMEgBMEdA8iMWQrAAQAAQ7kAg8EAwsBDAATNgADL2QwAQAEDwABDwhE
FCY1NqgAAKQAbzdhMDA3OQABKwRkDwRoDy8wYgABAQ8EACcmN2VsACsxNAQADwADECYwZAQAJjU2
oAAXMEgUDwABKgdkDi9iOQABBy81MAQAHw0AARtjBAAPAAEQLzQ5AAEBDwACCwEEAB81AAETBEwE
CGwYIjQ2IAAmNTAAAS83YwQAIAAABgfMCSowNAQAHzEEAAkDNAAvNTEAAQcEBAAPAAIpIjRlTAQI
bBgiNGUgACI1MCQALjA3hAsPBAAFIzVkvBkHuAUEbAAqMDQEAC8xYwQACB80BAAXJjA2-AAPAAEd
JjBkYAQmYTZwBCIxZCsAASQAF2bUFQSQCxIzgAsFkAUDjAUjYmKoBRNmUAEHAAMvMDQEABcvMWME
ABcQMMQDHzkAAiQSOfAADAQAIjFkKwAXMdQSJmIykAsTYYALBJAFBIwDAEAGIjVlSAEEVAEOAAIP
BAA8HzkAAScIYAMIBAAiMWQrAAgAAS84MIgJBwhABio1ZVgBBGwALzA0BAAXDjQIDwQAByIxM-gA
DwACIgOkAx80AAUIBCQFEzSECQgAARA38AAaMkAGKjU3WAEEbAAvMDQEABcvMzgEABcmMWL8AA8A
AR4WZfwELzRlAAUDBCQFEzSECQ8AAgUPvBsBJjBkbAAvMDQEABcmMWTgAA8AAUkmMGSoAwEMABY3
cBwEAAEE2AAElBEvMTQEAAUPJAAUDigADwQAFwM4AA8AAQUnMjUsAAcEACYwNwwAKjE0AAEMBAAq
YTUAASJhY9wDDsgIDgQADyQAEg4oAA8EABcDOAAPAAEKHmMEAAGICB5jSAArNDbgAwMEAAkAARJl
3AMPNAEJBAQABSQADwQADAQoACozOAQAITAyWxkFEAAMBAAPOAABDAABLzBigAAXImEw0AcF4AMe
ZQAEDDQALzBkBAAHBSQAD4AAFC8zOAQAEBMwGAEHAAEqMTQEAA8AASYD0AcqODBsEg-sCQEENAAv
MGQEAAcFJAAPBAAMBCgALzM4BAAbBDgAKjFjBAAPAAElKjgwBAAEbBIjYWHoCRM0JAIWMzQALzBk
BAAHBSQADwQADAQoAC8zOAQAGwVgAB45BAAPAAExBAQAI2Iy6AkTOAQABzQALzBkBAAHBSQADwQA
DAQoAAjcAg8EAAUIIAAFYAAfOQABMw8ABQUEDBMjNWTUDAcAAy4xNFgGDgQADyQADANMAA78AA8E
BAcnMzg4AB85AAE0G2XgCANYGCJhMMwMBAQAJjRlNAAvMWNYBgUPfAYUFmNMAC8zOAQAGwQ4AAn0
AA_EARAJXBYXNEgADwQAACI5NQQAJmJhBAAnMGI0AB80BAAvBEwALzM4BAAbBYQADAABH2MEAAsB
iBEXYwQABEgADwQACCo0NgQABDQALzE0WAEIB6QJLzA0BAAHBEwALzM4BAAbBDgADAABLzBkBAAb
DgAUDwgCAAvcDwQ0AC8xY1gBCBZjKAAvMDQEAAcEJAAvMzj4AxMEBAAFXAAfOQABNB5kwA4EBAAM
3A8PAAoRCFwALzA0BAAHBCQABeAFC_gAD-wFASczOFwADwABQRY5DAAPaBUBBXwAH2RcABMvMDQE
AAcEJAAI6AEM7AAOBAAPAAFABwAWDwQABQ8AAk0PBAASAyACBVwADwABNB8wBAAYBTQAH2RcABQf
NAQABwQkAC8zOAQAGwVcAA8AATQFtAUfNNgIAQ8EACQDXAAvMDQEAAcEJAAvMzgEABsFXAAPAAE1
H2MEAAMmMGYMAA8EAB4eNAQAJjYyDAAPBAAVJjY1DAAMBAAmMDkEACo0NgQADagXA9QTD8wHAS8w
OQQAPy4xYwQAJjZhDAAPBAAVJjZkDAANoAEHcAAjNGWoDRNmtA0TYaAXFjC0EwTMBythZlAtHzkE
ACcuMTWAFQ8EAGEnODioDRM5vA0SYhAAIjljkBYEzAcE3AoPAAQOA1wALzE0BAAIAEwDHjBIAQ8A
AWEvODAEAAMFAAEfMswHAy8xYwQAAwRcAC8xYwQACAcAASc3NxgBDwQAFQMoCy8xNAQAFy43NkAA
Ljg4wBENAAEfYcwHAwgAMA8EAB0ARAAiMmVsIg4IDg8EABAOhAEPyAwbA0AALjg4wBEJAAESN-wA
DwACAS82MfwyBw8AMxUOuAkPzAYcH2QEACMOAAEOBAANAAELzAkEAC8P-DICDwAzFAigCQ8EABkE
QAAvMGQEACMEQAAPxBEGHzfgGgsBfAAP-DEJDwAzFC8zOAQAIwWEAB9kBAAjBEAALzRlxBEDLzRm
4BoLDwABKgcAMi8zOAQAIwWEAB9kBAAjBUAADwQAACM5NfgCD_AaCAgABQ8AAakAxBAXNRAqEzAE
AAQAAQwEAC5hNQA0D-wzAg8ANAkHRAUvMzgEABMMKAUEQAAvMGQEACMMxA4ABAETOfwAJjBivBUq
NWTMFS81ZAA0MBY5RAAvMzj8ABQLJAUEQAAvMGQEACMFQAAPBAAEH2IEAAgFPAAfOQQAJwRoKi8z
OAQAIwWEAB9kBAAjBUAADwQABC9iYQQABwQ8AC8yNgQA5fMPIiksaGlkZGVuPWZhbHNlLHBhbl94
PS0xOTYuNTgzAQARNhcAhXk9LTQxNi4wAQCyMSx0aWxlX2g9MTYKABB3CgCAem9vbT0xfX0=
:: map/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA1LTAzIDEzOjI2OjA5Iixtb2RpZmllZD0iMjAyNC0w
OS0yNCAyMjozNDowNiJdXQ==
:: pal/
:: pal/0.pal
b64$LS1bW3BvZCx3aGl0ZXN0X2NvbG9yPTcsdGVzdF9jdWJlX2NvbG9ycz17WzBdPXsxNSwzMSw0
fSx7MzEsNCwyMH0sezQsMjAsMjF9LHsxMCw5LDI1fSx7OSwyNSwyNH0sezgsMjQsMn0sezI2LDEx
LDI3fSx7MTEsMjcsM30sezI3LDMsMTl9LHsyOCwxNywxOX0sezI4LDEyLDE2fSx7MTIsMTYsMX0s
ezYsMjksMTN9LHsyOSwxMywxOH0sezEzLDE4LDF9LHs3LDIzLDE0fSx7MjMsMTQsMTN9LHsxNCwz
MCwxOH0sezcsNiwyMn0sezYsMjIsNX0sezIyLDUsMjF9LHsxLDEsMX0sezEsMSwxfSx7MSwxLDF9
fSxtb2RpZmllZD0iMjAyNC0wOS0yNCAyMjozNDowNSIscmV2aXNpb249MTk4NyxoaWRkZW49e1sw
XT1mYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxm
YWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxz
ZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxm
YWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxz
ZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxm
YWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxz
ZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZX0saGlkZGVuX3RvZ2ds
ZXM9e1swXT1mYWxzZSxmYWxzZSxmYWxzZSxmYWxzZX0sbG9ja2VkPXtbMF09dHJ1ZSxmYWxzZSxm
YWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxz
ZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxm
YWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxz
ZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxm
YWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxz
ZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxm
YWxzZSxmYWxzZSxmYWxzZSxmYWxzZSxmYWxzZX0sYmdfY29sb3I9MCxva3BhbF92ZXJzaW9uPSIw
LjAuNCIsY3JlYXRlZD0iMjAyNC0wNi0yOCAxODowOTo0MCIsYmxhY2tlc3RfY29sb3I9MF1dbHo0
AOsAAAAVAgAA9QV1c2VyZGF0YSgiaTMyIiw2NCwiMAEA9hdkYWVkNjEwMDc2Y2MzZDAwMjA0MjU0
MDA3MzQ1NmIwMDc0YjBjZigAfTIxNTJhNTABAGZiODljZTkgAAAIAKA1YTAwZWViMjRhQAChZDRj
OTAwZGM2Mj8AUWYyNzMzWADwAjNlYjAwY2M2MTE0MDA5OTcxgAB9OWRjNDg5MAEABCgADAEAQDg0
NDcvAPAONWE4YmRlMDAyNzJhMzIwMDU1OTI3ZjAwZmZkMThwAFZlYWRhNegABGgABOgADwEAVQRg
AQTwAA8BAFZwMTAxMDEiKQ==
:: pal/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA2LTI4IDE4OjA5OjQwIixtb2RpZmllZD0iMjAyNC0w
OS0yNCAyMjozNDowNiJdXQ==
:: sfx/
:: sfx/0.sfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA1LTAzIDEzOjI2OjEwIixtb2RpZmllZD0iMjAyNC0w
OS0yNCAyMjozNDowNSIscmV2aXNpb249NjU0M11dbHo0AA0BAADTFwAA-yxweHUAAygAAAQABA9A
EAIOAAGgASACoA4ADxAADfDKAQIDBAUGBwAP-5AICQoLDwwPDQ8ODw8AD--w-wEA6-8n0gEQBg8g
EAEgASAB8AACEAIMEAEgDyEgATAPQPDDDygP--DGD-gKD-8PgA-3Dw0B8AkBEAYMMAAcIg9AMQCD
D2-gAhACDz0zAE-wxw9CYgAdDzAA------9FH-8BAKz-Q8gPQAACQA8bDx5vNT82D04PUR9UH1Yf
Vw9WHz9vOQ8f--8QAAGigBFiAf4QDz0PP19AXz8PPg89TzwfOx86LzlfOA85HgH_CvBwD0AADxBA
-rAKAP-------------------3xQ-rDw-zk=
:: sfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA1LTAzIDEzOjI2OjA5Iixtb2RpZmllZD0iMjAyNC0w
OS0yNCAyMjozNDowNiJdXQ==
:: character.lua
--[[pod_format="raw",created="2024-05-05 22:21:00",modified="2024-09-24 22:34:05",revision=7473]]
include './types.lua'
include './util.lua'

character=entity:new({
   col_point = { x=0, y=0 },
   select_point = { x=0, y=0},
	i_dir = direction.down,
	spd=0.60,
	anim_spd=1,
	health = 60,
	pain = 10,
	hunger = 10,
	thirst = 50,
	state = "idle",
	start_idle = nil,
	start_move = nil,
})

man=character:new({
	x=90,
   y=86,
   max_width = 21,
   max_height = 34,
	wound_health = 60,
	delirium = 0,
	d_i_f = {sf = 252, nf = 2, s = 0.5, fl = false},
	u_i_f = {sf = 254, nf = 2, s = 0.5, fl = false},
	l_i_f = {sf = 244, nf = 2, s = 0.5, fl = true},
	r_i_f = {sf = 244, nf = 2, s = 0.5, fl = false},
	d_m_f = {sf = 228, nf = 4, s = 4, fl = false},
	u_m_f = {sf = 236, nf = 4, s = 4, fl = false},
	l_m_f = {sf = 212, nf = 4, s = 4, fl = true},
	r_m_f = {sf = 212, nf = 4, s = 4, fl = false},
})

function move_man(c)
	_btn = btn()
	_w, _a, _s, _d = key("w"), key("a"), key("s"), key("d")
	_none = true
	if (_w or _a or _s or _d) _none = false 
	if _btn != button.none or not _none then
		local speed = c.spd
		if key("shift") then 
			speed*=1.5
			c.anim_spd=1.5
		else
			speed*=1
			c.anim_spd=1
		end
		speed*=c.anim_spd
		c.state, c.start_move = "moving", time()
		c.col_point = { x = (c.x+(c.max_width/2)), y = (c.y+(c.max_height/2)) }
--		if _btn == button.down_right or (_s and _d) then
--			c.i_dir = direction.down
--			c.col_point = { x = c.x+c.max_width, y = c.y+c.max_height}
--			c.select_point = { x = (c.x+c.max_width)-8, y = (c.y+c.max_height)-8 }
--			c.y, c.x = c.y + (0.50 * speed), c.x + (1 * speed)
--			if collide(c) == true then
--				c.y, c.x = c.y - (0.50 * speed), c.x - (1 * speed)
--			end
--		elseif _btn == button.up_left or (_w and _a) then
--			c.i_dir = direction.up
--			c.col_point = { x = c.x, y = c.y}
--			c.select_point = { x = c.x+8, y = c.y+8 }
--			c.y, c.x = c.y - (0.50 * speed), c.x - (1 * speed)
--			if collide(c) == true then
--				c.y, c.x = c.y + (0.50 * speed), c.x + (1 * speed)
--			end
--		elseif _btn == button.up_right or (_w and _d) then
--			c.i_dir = direction.up
--			c.col_point = { x = c.x+c.max_width, y = c.y }
--			c.select_point = { x = ((c.x+c.max_width)-8), y = (c.y+8) }
--			c.y, c.x = c.y - (0.50 * speed), c.x + (1 * speed)
--			if collide(c) == true then
--				c.y, c.x = c.y + (0.50 * speed), c.x - (1 * speed)
--			end
--		elseif _btn == button.down_left or (_s and _a) then
--			c.i_dir = direction.down
--			c.col_point = { x = c.x+1, y = c.y+c.max_height}
--			c.select_point = {x = (c.x+1)+8, y = (c.y+c.max_height)-8}
--			c.y, c.x = c.y + (0.50 * speed), c.x - (1 * speed)
--			if collide(c) == true then
--				c.y, c.x = c.y - (0.50 * speed), c.x + (1 * speed)
--			end
		if _btn == button.right or _d then
			c.i_dir = direction.right
			c.col_point = { x = c.x+c.max_width, y = c.y+(c.max_height/2)}
			c.select_point = { x = (c.x+c.max_width)-8, y = c.y+(c.max_height/2)}
			c.x = c.x + (1 * speed)
			if collide(c) == true then
				c.x = c.x - (1 * speed)
			end
		elseif _btn == button.left or _a then
			c.i_dir = direction.left
			c.col_point =  { x = c.x, y = c.y+(c.max_height/2)}
			c.select_point = { x = c.x+8, y = c.y+(c.max_height/2) }
			c.x = c.x - (1 * speed)
			if collide(c) == true then
				c.x = c.x + (1 * speed)
			end
		elseif _btn == button.down or _s then
			c.i_dir = direction.down
			c.col_point = { x = c.x+(c.max_width/2), y = c.y+c.max_height}
			c.select_point = { x = c.x+(c.max_width/2), y = (c.y+c.max_height)-8 }
			c.y = c.y + (1 * speed)
			if collide(c) == true then
				c.y = c.y - (1 * speed)
			end
		elseif _btn == button.up or _w then
			c.i_dir = direction.up
			c.col_point = { x = c.x+(c.max_width/2), y = c.y}
			c.select_point = { x = c.x+(c.max_width/2), y = (c.y+8) }
			c.y = c.y - (1 * speed)
			if collide(c) == true then
				c.y = c.y + (1 * speed)
			end
		end
		
	else
		c.state = "idle"
		c.col_point = { x = (c.x+(c.max_width/2)), y = (c.y+(c.max_height/2)) }
		c.start_idle = time()
	end
end

function animate_character(c)
	ovalfill(c.x+4, c.y+c.max_height-3, c.x+c.max_width-4, c.y+c.max_height+1, 0)
	if c.state == "idle" then
		if c.i_dir == direction.down then
			animate_sprite(
				c,
				c.d_i_f.sf,
				c.d_i_f.nf,
				c.d_i_f.s,
				c.d_i_f.fl
			)
		elseif c.i_dir == direction.up then
			animate_sprite(
				c,
				c.u_i_f.sf,
				c.u_i_f.nf,
				c.u_i_f.s,
				c.u_i_f.fl
			)
		elseif c.i_dir == direction.left then
			animate_sprite(
				c,
				c.l_i_f.sf,
				c.l_i_f.nf,
				c.l_i_f.s,
				c.l_i_f.fl
			)
		elseif c.i_dir == direction.right then
			animate_sprite(
				c,
				c.r_i_f.sf,
				c.r_i_f.nf,
				c.r_i_f.s,
				c.r_i_f.fl
			)
		end
	end
	if c.state == "moving" then
		if c.i_dir == direction.right then
			animate_sprite(
				c,
				c.r_m_f.sf,
				c.r_m_f.nf,
				c.r_m_f.s,
				c.r_m_f.fl
			)
		elseif c.i_dir == direction.left then
			animate_sprite(
				c,
				c.l_m_f.sf,
				c.l_m_f.nf,
				c.l_m_f.s,
				c.l_m_f.fl
			)
		elseif c.i_dir == direction.down then
			animate_sprite(
				c,
				c.d_m_f.sf,
				c.d_m_f.nf,
				c.d_m_f.s,
				c.d_m_f.fl
			)
		elseif c.i_dir == direction.up then
			animate_sprite(
				c,
				c.u_m_f.sf,
				c.u_m_f.nf,
				c.u_m_f.s,
				c.u_m_f.fl
			)
		end	
	end
end

function scan_character_area(c)
	local current_cel = { x = flr(c.select_point.x/_tile_size), y = flr(c.select_point.y/_tile_size) }
	local tr_co = { x = current_cel.x + 1, y = current_cel.y - 1 }
	local tr_spr = mget(tr_co.x, tr_co.y)
	local tr_f = fget(tr_spr)
	local tl_co = { x = current_cel.x - 1, y = current_cel.y - 1 }
	local tl_spr = mget(tl_co.x, tl_co.y)
	local tl_f = fget(tl_spr)
	local t_co = { x = current_cel.x, y = current_cel.y - 1 }
	local t_spr = mget(t_co.x, t_co.y)
	local t_f = fget(t_spr)
	local r_co = { x = current_cel.x + 1, y = current_cel.y }
	local r_spr = mget(r_co.x, r_co.y)
	local r_f = fget(r_spr)
	local l_co = { x = current_cel.x - 1, y = current_cel.y }
	local l_spr = mget(l_co.x, l_co.y)
	local l_f = fget(l_spr)
	local br_co = { x = current_cel.x + 1, y = current_cel.y + 1 }
	local br_spr = mget(br_co.x, br_co.y)
	local br_f = fget(br_spr)
	local bl_co = { x = current_cel.x - 1, y = current_cel.y +1 }
	local bl_spr = mget(bl_co.x, bl_co.y)
	local bl_f = fget(bl_spr)
	local b_co = { x = current_cel.x, y = current_cel.y + 1 }
	local b_spr = mget(b_co.x, b_co.y)
	local b_f = fget(b_spr)
--	local bx_co = { x = current_cel.x, y = current_cel.y + 2 }
--	local bx_spr = mget(bx_co.x, bx_co.y)
--	local bx_f = fget(bx_spr)
--	local bxr_co = { x = current_cel.x+1, y = current_cel.y + 2 }
--	local bxr_spr = mget(bxr_co.x, bxr_co.y)
--	local bxr_f = fget(bxr_spr)
--	local bxl_co = { x = current_cel.x-1, y = current_cel.y + 2 }
--	local bxl_spr = mget(bxl_co.x, bxl_co.y)
--	local bxl_f = fget(bxl_spr)
	local c_co = { x = current_cel.x, y = current_cel.y }
	local c_spr = mget(c_co.x, c_co.y)
	local c_f = fget(c_spr)
	
	if tr_f != 0 then
		add(_flagged_tiles,{ tile_co = tr_co, sprite = tr_spr, flags = tr_f })
	end
	if tl_f != 0 then
		add(_flagged_tiles,{ tile_co = tl_co, sprite = tl_spr, flags = tl_f })
	end
	if t_f != 0 then
		add(_flagged_tiles,{ tile_co = t_co, sprite = t_spr, flags = t_f })
	end
	if r_f != 0 then
		add(_flagged_tiles,{ tile_co = r_co, sprite = r_spr, flags = r_f })
	end
	if l_f != 0 then
		add(_flagged_tiles,{ tile_co = l_co, sprite = l_spr, flags = l_f })
	end
	if br_f != 0 then
		add(_flagged_tiles,{ tile_co = br_co, sprite = br_spr, flags = br_f })
	end
	if bl_f != 0 then
		add(_flagged_tiles,{ tile_co = bl_co, sprite = bl_spr, flags = bl_f })
	end
	if b_f != 0 then
		add(_flagged_tiles,{ tile_co = b_co, sprite = b_spr, flags = b_f })
	end
--	if bx_f != 0 then
--		add(_flagged_tiles,{ tile_co = bx_co, sprite = bx_spr, flags = bx_f })
--	end	
--	if bxr_f != 0 then
--		add(_flagged_tiles,{ tile_co = bxr_co, sprite = bxr_spr, flags = bxr_f })
--	end	
--	if bxl_f != 0 then
--		add(_flagged_tiles,{ tile_co = bxl_co, sprite = bxl_spr, flags = bxl_f })
--	end	
	if c_f != 0 then
		add(_flagged_tiles,{ tile_co = c_co, sprite = c_spr, flags = c_f })
	end
end

function update_character_vitals(c)
	if c.state == "idle" and c.health < 70 then
		last_update_move, current_update = 0, time_since(start_idle, time(), true)
		if current_update != last_update_idle then
			last_update_idle = current_update
			c.health += 0.05
			c.hunger += 0.01
			c.thirst += 0.02
			if c.wound_health < 50 then
				c.wound_health += 0.01
			end
			if c.pain > 50 then
				c.pain -= 0.05
			end
		end
	end
	if c.state == "moving" then
		last_update_idle, current_update = 0, time_since(start_move, time(), true)
		if current_update != last_update_move then
			last_update_move = current_update
			c.health -= 0.65
			c.wound_health -= 0.25
			c.pain += 0.1
			c.hunger += 0.1
			c.thirst += 0.1
		end
	end
	if c.health < 50 and c.wound_health < 50 then
		if _blood_splatter_update == nil or time_since(_blood_splatter_update, time(), true) > 10 then
			_blood_splatter_update = time()
			add(_blood_splatters, { x = c.x, y = (c.y+c.max_height)-4 })
		end 
		if c.pain > 70 and c.hunger > 50 and c.thirst > 50 then
			last_update_idle, current_update = 0, time_since(start_move, time(), true)
			if current_update != last_update_move then
				last_update_move = current_update
				c.delirium += 0.1
			end
		end
	end
end

function draw_blood_splatter()
	if table_length(_blood_splatters) > 0 then
		for i,b in pairs(_blood_splatters) do
			ovalfill(b.x+5, b.y, b.x+13, b.y+3, 18)
		end
	end
end
:: containers.lua
--[[pod_format="raw",created="2024-06-18 20:28:00",modified="2024-09-24 22:34:05",revision=3030]]
include './types.lua'
include './util.lua'

container=entity:new({
	max_capacity = 10,
	small_icon = 0,
	in_range_sprite = 0,
	in_range = false,
	contents = {},
})

function init_containers()
	_containers["1_2"] = container:new({
		max_capacity=10,
		small_icon = 141,
		in_range_sprite = 130,
		in_range_sprite_adjustment = {x=0,y=-16},
		in_range = false,
		contents = {
			container_slot:new(
				{
					quantity = 1, 
					item = cardboard:new({})
				}
			)
		}
	})
	_containers["1_4"] = container:new({
		max_capacity=25,
		small_icon = 141,
		in_range_sprite = 133,
		in_range_sprite_adjustment = {x=-2,y=-16},
		in_range = false,
		contents = {
			container_slot:new(
				{
					quantity = 1, 
					item = letter:new({})
				}
			)
		}
	})
	_containers["20_5"] = container:new({
		max_capacity=25,
		small_icon = 141,
		in_range_sprite = 138,
		in_range_sprite_adjustment = {x=-1,y=-9},
		in_range = false,
		contents = {
			container_slot:new(
				{
					quantity = 1, 
					item = journal:new({})
				}
			)
		}
	})
	_containers["23_5"] = container:new({
		max_capacity=20,
		small_icon = 184,
		in_range_sprite = 208,
		in_range_sprite_adjustment = {x=-1,y=-1},
		in_range = false,
		contents = {
			container_slot:new(
				{
					quantity = 1, 
					item = water_bottle:new({})
				}
			),
			container_slot:new(
				{
					quantity = 2, 
					item = rancid_food:new({})
				}
			)
		}
	})
	_containers["24_5"] = container:new({
		max_capacity=20,
		small_icon = 184,
		in_range_sprite = 176,
		in_range_sprite_adjustment = {x=0,y=7},
		in_range = false,
		contents = {
			container_slot:new(
				{
					quantity = 1, 
					item = lunch_meat:new({})
				}
			),
			container_slot:new(
				{
					quantity = 1, 
					item = canned_sardines:new({})
				}
			)
		}
	})
	_containers["25_5"] = container:new({
		max_capacity=20,
		small_icon = 184,
		in_range_sprite = 176,
		in_range_sprite_adjustment = {x=0,y=7},
		in_range = false,
		contents = {
			container_slot:new(
				{
					quantity = 4, 
					item = glass:new({})
				}
			),
			container_slot:new(
				{
					quantity = 1, 
					item = teapot:new({})
				}
			)
		}
	})
	_containers["26_5"] = container:new({
		max_capacity=20,
		small_icon = 184,
		in_range_sprite = 176,
		in_range_sprite_adjustment = {x=0,y=7},
		in_range = false,
		contents = {
			container_slot:new(
				{
					quantity = 1, 
					item = bleach:new({})
				}
			),
			container_slot:new(
				{
					quantity = 3, 
					item = sponge:new({})
				}
			),
			container_slot:new(
				{
					quantity = 1, 
					item = wash_cloth:new({})
				}
			)
		}
	})
end
:: context_menu.lua
--[[pod_format="raw",created="2024-06-19 22:02:44",modified="2024-09-24 22:34:05",revision=2572]]
context_menu=entity:new({
	x = 0,
	y = 0,
	oo_ui = true,
	open = false,
	options={},
	max_width = 60,
	current_obj = nil,
})

context_option=entity:new({
	name = nil,
	m_is_on = false,
	action = nil
})

context_menu_actions = {
	consume = "Consume",
	discard = "Discard",
	use = "Use",
	equip = "Equip",
}

function draw_context_menu()
	if _cm.open then
		if _m_x > (_cm.x-10)
		and _m_x < (_cm.x+64)
		and _m_y > (_cm.y-10)
		and _m_y < (_cm.y+(table_length(_cm.options)*10)) then
			_cm.open = true
		else
			_cm.open = false
			_cm.options = {}
		end	
		
		local current_offset = 0
		for i, o in pairs(_cm.options) do
			rectfill(_cm.x, _cm.y+current_offset, _cm.x+60, _cm.y+current_offset+12,0)
			rect(_cm.x, _cm.y+current_offset, _cm.x+60, _cm.y+current_offset+12,23)
			print(o.name, _cm.x+2, _cm.y+1+current_offset)
			if _m_x > _cm.x 
			and _m_x < _cm.x+60 
			and _m_y > _cm.y+current_offset 
			and _m_y < _cm.y+current_offset+12 then
				rect(_cm.x+1, _cm.y+current_offset+1, _cm.x+59, _cm.y+current_offset+11,2)
				o.m_is_on = true
			end
			current_offset += 12
		end
	end	
end

function update_context_menu(obj)
	local s_x, s_y = _m_x, _m_y+6
	_cm.open = true
	_cm.options = {}
	_cm.current_obj = obj
	_cm.x, _cm.y = s_x, s_y
	if obj.type == object_type.item then
		if obj.item_type == item_type.consumable then
			add(_cm.options, context_option:new({name = context_menu_actions.consume, action = obj.consume}))
			add(_cm.options, context_option:new({name = context_menu_actions.discard}))
		end
		if obj.item_type == item_type.junk then
			add(_cm.options, context_option:new({name = context_menu_actions.discard}))
		end
	end
end

function execute_context_menu_option(c, a)
	if _cm.open and _m_l_b then
		for i, o in pairs(_cm.options) do
			if o.m_is_on then  
				o.action(_cm.current_obj, c, a)
			end
		end
	end
end
:: inventory.lua
--[[pod_format="raw",created="2024-05-14 20:53:29",modified="2024-09-24 22:34:05",revision=6678]]
include './types.lua'
include './util.lua'
include './items.lua'

inventory=entity:new({
	max_width = 119,
	max_height = 68,
	max_capacity = 10,
	inv_starting_x = 0,
	cont_starting_x = 0,
	c_i_starting_y = 5,
	oo_ui = true,
	open = false,
	total_weight = 0,
	capacity = 10,
	selected_container = 1,
	contents={},
})

function dc_in_range_any(t)
	for i, dc in pairs(t) do
		if dc.in_range then
			return true
		end
	end
	return false
end

function remove_item_from_container(ccc, item)
	for i, cc in pairs(ccc.contents) do
		if cc.item.sprite == item.sprite then
			if cc.quantity <= 1 then
				del(ccc.contents,cc)
			else
				cc.quantity -=1
			end
		end
	end
end

function add_to_inventory(c_i, cc, item)
	local existing_item_index = 0
	local total_weight = 0
	for i, s in pairs(c_i.contents) do
		if s.item.sprite == item.sprite then
			existing_item_index = i
		end
		total_weight += s.item.weight * s.quantity
	end
	if (total_weight + item.weight) > c_i.max_capacity then
		print("Can't carry anymore.", _m_x, _m_y+6, 8)
		return
	end
	if existing_item_index > 0 then
		c_i.contents[existing_item_index].quantity += 1
	else
		slot = container_slot:new({quantity = 1, item = item})
		add(c_i.contents, slot)
	end
	remove_item_from_container(cc, item)
end

function display_inventory_contents(c_i)
	local current_y = flr(c_i.c_i_starting_y+13)
	print("Inventory", c_i.inv_starting_x+11, current_y-11, 23)
	c_i.total_weight = 0
	local current_count = 1
	
	local current_max = _scroll_inv+_max_items
	if table_length(c_i.contents) < current_max then
		current_max = table_length(c_i.contents)
		_scroll_inv = (current_max-_max_items)
	end 

	for i, c in ipairs(c_i.contents) do
		if current_count > current_max then
			break
		elseif current_count > _scroll_inv and current_count < (current_max+1) then
		local m_is_on = false
		c.starting_x = c_i.inv_starting_x
		c.starting_y = current_y
		c.ending_x = c_i.inv_starting_x+114
		c.ending_y = current_y+8
		if (_m_x) > c.starting_x
			and (_m_x) < c.ending_x
			and (_m_y) > c.starting_y
			and (_m_y) < c.ending_y then
			m_is_on = true
			rect(c.starting_x-1, c.starting_y-2, c.ending_x+1, c.ending_y+1, 2)
		end
		spr(c.item.sprite,c_i.inv_starting_x,current_y, 23)
		print(c.item.name,c_i.inv_starting_x+11, current_y, 23)
		print(c.item.weight, c_i.inv_starting_x+80, current_y, 23)
		print(c.quantity, c_i.inv_starting_x+103, current_y, 23)
		current_y+=10
		c_i.total_weight += (c.item.weight*c.quantity)
		if(m_is_on) then
			if _m_r_b then
				update_context_menu(c.item)
			end
		end
		
		end
		current_count += 1
	end
end

function display_container_contents(c_i)
	local current_y = flr(c_i.c_i_starting_y+13)
	print("Container(s)", c_i.cont_starting_x+11, current_y-11, 23)
	local cont_icn_x = c_i.cont_starting_x+2
	local cont_icn_y = current_y+45
	--TODO: Add scroll logic here.
	for i, cc in pairs(_discovered_containers) do
		if cc.in_range == true then
			local cont_icn_b_s_x = cont_icn_x - 1
			local cont_icn_b_s_y = cont_icn_y - 1
			local cont_icn_b_e_x = cont_icn_x + 8
			local cont_icn_b_e_y = cont_icn_y + 8
			if i == c_i.selected_container or c_i.selected_container == 1 then
				c_i.selected_container = i
				rect(cont_icn_b_s_x, cont_icn_b_s_y, cont_icn_b_e_x, cont_icn_b_e_y, 2)
				spr(cc.small_icon, cont_icn_x, cont_icn_y)
				for j, ccc in ipairs(cc.contents) do
					local m_is_on = false
					ccc.starting_x = c_i.cont_starting_x
					ccc.starting_y = current_y
					ccc.ending_x = c_i.cont_starting_x+114
					ccc.ending_y = current_y+8
					if (_m_x) > ccc.starting_x
					and (_m_x) < ccc.ending_x
					and (_m_y) > ccc.starting_y
					and (_m_y) < ccc.ending_y then
						rect(ccc.starting_x-1, ccc.starting_y-2, ccc.ending_x+1, ccc.ending_y+1, 2)
						m_is_on = true
					end
					spr(ccc.item.sprite, c_i.cont_starting_x,current_y)
					print(ccc.item.name, c_i.cont_starting_x+11, current_y, 23)
					print(ccc.item.weight, c_i.cont_starting_x+80, current_y, 23)
					print(ccc.quantity, c_i.cont_starting_x+100, current_y, 23)
					current_y+=10
					if(m_is_on) then
						if _m_l_b then
							add_to_inventory(c_i, cc, ccc.item)
						elseif _m_r_b then
							update_context_menu(ccc.item)
						end
					end
				end
			else
				rect(cont_icn_b_s_x, cont_icn_b_s_y, cont_icn_b_e_x, cont_icn_b_e_y, 21)
				spr(cc.small_icon, cont_icn_x, cont_icn_y)
				if _m_l_b and ((_m_x) > cont_icn_b_s_x
				and (_m_x) < cont_icn_b_e_x
				and (_m_y) > cont_icn_b_s_y
				and (_m_y) < cont_icn_b_e_y) then
					c_i.selected_container = i	
				end
			end
			cont_icn_x+=10
		end
	end
end

function show_inventory(c_i)
	
	if     (_m_x) > _c_x-360
		and (_m_x) < (_c_x-121)
		and (_m_y) > _c_y
		and (_m_y) < (_c_y + 6)
	then
		c_i.oo_ui = false
		c_i.open = true
	else
		if c_i.open == true then
			if     (_m_x) > _c_x-360
				and (_m_x) < (_c_x-121)
				and (_m_y) > _c_y
				and (_m_y) < (c_i.c_i_starting_y+c_i.max_height) then
				c_i.oo_ui = false
			else
				c_i.oo_ui = true
			end
		end
	end
	if c_i.open == true then
		spr(inv_sprites.open,_c_x-360,c_i.c_i_starting_y)
		spr(inv_sprites.open,(_c_x-240)+1,c_i.c_i_starting_y)
	else
		spr(inv_sprites.closed,_c_x-360,c_i.c_i_starting_y)
		spr(inv_sprites.closed,(_c_x-240)+1,c_i.c_i_starting_y)
	end	
	if c_i.oo_ui == false then
		if _m_x < _c_x-240 and _m_y > c_i.c_i_starting_y then
			_scroll_inv+=(_m_w_y * -1)
		elseif _m_x > _c_x-240 and _m_y > c_i.c_i_starting_y then
			_scroll_cont+=(_m_w_y * -1)
		end
		if _scroll_inv < 0 then
			_scroll_inv = 0
		end
		if _scroll_cont < 0 then
			_scroll_cont = 0
		end
	end
	if not ((_m_y) < (c_i.c_i_starting_y+c_i.max_height)) and 
		((_m_l_b == true
		and c_i.oo_ui == true)
		or (_m_r_b == true 
		and c_i.oo_ui == true))
	then
		c_i.open = false
		_scroll_cont = 0
		_scroll_inv = 0
	end
end

function display_inventory_weight(c_i)
	local s_x = c_i.inv_starting_x-1
	local s_y = c_i.c_i_starting_y+1
	local p_c = (c_i.total_weight / c_i.capacity) * 100
	local p_r = (7.3/100)*p_c
	local e_x = s_x + p_r
	local e_y = s_y + p_r
	local colour = 0
	if p_c <= 25 then
		colour = 30
	elseif p_c > 25 and p_c <= 50 then
		colour = 13
	elseif p_c > 50 and p_c <= 75 then
		colour = 15
	else
		colour = 26
	end
	rectfill(s_x, s_y, e_x, e_y, colour)
end

function update_inventory(c_i)
	c_i.inv_starting_x = flr(_c_x-358)
	c_i.cont_starting_x = flr(_c_x-237)
	c_i.c_i_starting_y = flr(_c_y+4)
	show_inventory(c_i)
	if c_i.open then
		display_inventory_contents(c_i)
		display_inventory_weight(c_i)
		if table_length(_discovered_containers) > 0 and dc_in_range_any(_discovered_containers) then
			display_container_contents(c_i)
		else
			c_i.selected_container = 1
		end
	end	
end

inv_sprites={
	closed=(gfx_offset.gfx_3+4),
	open=(gfx_offset.gfx_3+5)
}
:: items.lua
--[[pod_format="raw",created="2024-05-30 22:52:53",modified="2024-09-24 22:34:05",revision=5121]]
item=entity:new({
	type = object_type.item,
	sprite = 0,
	name = "",
	weight = 1.0,
	is_flamable = false,
	item_type = nil,
	description=""
})

item_type = {
	consumable = 1,
	junk = 2,
	useable = 3,
	special = 4,
	unique = 5,
	readable = 6,
}

-----------------
-- CONSUMABLES --
-----------------

consumable=item:new({
	item_type = item_type.consumable,
	is_hot = false,
	thirst = 0,
	hunger = 0,
	exhaustion = 0,
	delirium = 0,
	wound_health = 0,
	health = 0,
	pain = 0,
	can_heat = false,
	hot_offset = 0,
	cold_offset = 0,
	consume = function(self, o)
		local offset = 0
		if is_hot then
			offset = self.hot_offset
		else
			offset = self.cold_offset
		end
		o.thirst -= (self.thirst + offset)
		o.hunger -= (self.hunger + offset)
		o.exhaustion -= (self.exhaustion + offset)
		o.delirium -= (self.delirium + offset)
		o.pain -= self.pain
		o.wound_health += self.wound_health
		o.health += self.health
	end,
	heat = function(self)
		self.is_hot = true
	end
})

water_bottle=consumable:new({
	sprite = (gfx_offset.gfx_3+130),
	name = "Water Bottle",
	weight = 0.8,
	thirst = 20,
})

fizzy_drink_can=consumable:new({
	sprite = (gfx_offset.gfx_3+128),
	name = "Fizzy Drink",
	weight = 0.6,
	thirst = 15,
	hunger = 3,
	delirium = 1,
})

energy_drink=consumable:new({
	sprite = (gfx_offset.gfx_3+129),
	name = "Energy Drink",
	weight = 0.5,
	thirst = 10,
	exhaustion = 10,
	delirium = 5,
})

antiseptic=consumable:new({
	sprite = (gfx_offset.gfx_3+136),
	name = "Antiseptic",
	weight = 0.4,
	wound_health = 20,
})

suture_needle=consumable:new({
	sprite = (gfx_offset.gfx_3+137),
	name = "Suture Needle",
	weight = 0.1,
	wound_health = 25,
})

painkillers=consumable:new({
	sprite = (gfx_offset.gfx_3+138),
	name = "Painkillers",
	weight = 0.05,
	pain = 10,
})

canned_clams=consumable:new({
	sprite = (gfx_offset.gfx_3+131),
	name = "Clams",
	delirium = 2,
	hunger = 9,
	hot_offset = 5,
	cold_offset = -5,
	weight = 0.4,
})

canned_mushrooms=consumable:new({
	sprite = (gfx_offset.gfx_3+132),
	name = "Mushrooms",
	weight = 0.4,
	hunger = 10,
	can_heat = true,
	hot_offset = 5,
	cold_offset = -5,
})

jarred_kimchi=consumable:new({
	sprite = (gfx_offset.gfx_3+133),
	name = "Kimchi",
	weight = 0.35,
	hunger = 8,
	thirst = 4,
	delirium = -2,
})

canned_minced_prawn=consumable:new({
	sprite = (gfx_offset.gfx_3+134),
	name = "Minced Prawn",
	weight = 0.4,
	can_heat = true,
	hunger = 10,
	hot_offset = 10,
	cold_offset = -5,
})

jarred_veg=consumable:new({
	sprite = (gfx_offset.gfx_3+135),
	name = "Vegetables",
	weight = 0.4,
	hunger = 12,
	thirst = 5,
	delirium = -8,
})

canned_sardines=consumable:new({
	sprite = (gfx_offset.gfx_3+139),
	name = "Sardines",
	weight = 0.2,
	hunger = 10,
})

lunch_meat=consumable:new({
	sprite = (gfx_offset.gfx_3+140),
	name = "Lunch Meat",
	weight = 0.35,
	can_heat = true,
	hunger = 18,
	hot_offset = 2,
})

canned_beans=consumable:new({
	sprite = (gfx_offset.gfx_3+141),
	name = "Beans",
	weight = 0.4,
	can_heat = true,
	hunger = 12,
	cold_offset = -4,
})

canned_tofu=consumable:new({
	sprite = (gfx_offset.gfx_3+142),
	name = "Tofu",
	weight = 0.4,
	can_heat = true,
	hot_offset = 5,
	cold_offset = -4,
	hunger = 10,
	delirium = -4,
})

cloth_strips=consumable:new({
	sprite = (gfx_offset.gfx_3+153),
	name = "Tofu",
	weight = 0.4,
	wound_health = 10,
	health = 10,
})
--------------
-- Readable --
--------------
readable=item:new({
	item_type = item_type.readable,
	open_sprite = 0,
	is_flamable = true,
	read = function(self)
		
	end
})

journal=readable:new({
	open_sprite = (gfx_offset.gfx_3+120),
	sprite=(gfx_offset.gfx_3+145),
	name="Journal"
})

letter=readable:new({
	sprite=(gfx_offset.gfx_3+144),
	name="Letter"
})
----------
-- Junk --
----------
junk=item:new({
	item_type = item_type.junk,
})

cardboard=junk:new({
	sprite=(gfx_offset.gfx_3+143),
	name="Cardboard"
})

rancid_food=junk:new({
	sprite=(gfx_offset.gfx_3+151),
	name="Rancid Food"
})

glass=junk:new({
	sprite=(gfx_offset.gfx_3+146),
	name="Glass"
})

teapot=junk:new({
	sprite=(gfx_offset.gfx_3+147),
	name="Teapot"
})

bleach=junk:new({
	sprite=(gfx_offset.gfx_3+148),
	name="Bleach"
})

sponge=junk:new({
	sprite=(gfx_offset.gfx_3+149),
	name="Sponge"
})

-------------
-- useable --
-------------
useable=item:new({
	item_type = item_type.useable,
})

wash_cloth=useable:new({
	sprite=(gfx_offset.gfx_3+152),
	name="Wash Cloth",
	use=function(self,i)
		add(i.contents,	container_slot:new({quantity = 2, item = cloth_strips:new({})}))
		del(i,self)
	end
})



---------------
-- equipable --
---------------
useable=item:new({
	item_type = item_type.useable,
})

binbag=useable:new({
	sprite=(gfx_offset.gfx_3+150),
	name="Binbag",
	equip=function(self,o)
	end
})
:: label.png
b64$iVBORw0KGgoAAAANSUhEUgAAAeAAAAEOCAIAAADe_FMwAABHeElEQVR4Ae29cXBb93XveQhg
ktjjko_NVaRhRAlODdg0a_6QxYzSR01MrcR4_ZSxm8vlS8dttSXYKkzGnhheg_HkkZKoZFlCW6ab
bKJoQ-Ctt5tpyvVNM84LSiuo1Q45z3pzC72hh5EKeGuERJAED05hyKMMkwWidefAP13de3F5L3Dv
74LE_c6dHw8ODy5_v3N_53P_bQOAdLYAJBKJRGoyefCP-_ABygWJRCI1j9LZQhXQABBbX6CMkEgk
UjMoNDh1h9M8Ad0RGJA-h4_N4soMWmntCAxcenbU1qfV8hlbX7j07CiuOg8Loxvo4Io0TmcLHv6T
oZRKdgQGAKCzy1fMZYq5TGeXb9-Pw_CTjwA8AgC0GlwT5pN8PPMDAEj48A27VcTXWvlcvfZz8D0C
uOro3TD9Gyt95wf7vmdtkiR_TT9g_JkLzHYA0EhnACjmMgzTrcDo177_Xbqd9unRT32cUs0-1SSz
aH6wclkn5nX3sPyji-8uS6kkGgjlFqEziURqZV3_8vMPVi7L6fzQ7--Nrt9yANAdgQE0irkMYhoN
EolE2peSxK-J0Yx0-t6R7l0Z7QCgS6kkGp1dPsQ0Gvu8Qt-5waOf_jjdVJv06Kc_fjzzA7SPZyjV
9qb68lf-E_WhESGdAWBXRnv4b64jMIBGMZdBTLcIoy9-9T8Nf4bAYYsYne98JEbbI_k7d6WatHvj
f-n5ByuX6-9_OlsAgNj6Ak9GdwQGDh8bZQY_zEkrrZeeHbX1abV8xtYXTD10A61a05v-5fbGefYE
evr-3-En5U_gp5-9N735Xw4fG0Uap7MFD-950hEYQKOYywBAZ5evmMt0dvlo0pJItqosSmh4hCBl
Y0-Ixf8nS6kkGghlojOJxEceIYgPpYIAXVMdgQE0irkMYhoNEolE2vf6p7-6vX93dZt9-HdXt--p
r36v5kzlv79SKomMRjQXc5nOLh_VjUSyW2VRMhjpEYKULlsZ-dDv-833jnTr0xkAXPw3h3QGgGIu
wzBNNSOROMgjBHd9KEvWaviZC6_7h9WMVtP5dfdwUPj0XfXiv91SKomMRjQXc5nOLh9VkUTio7Io
6ROcUsRHCjprysV-W0hnACjmMgzTVC0SibRfFRQ_-bp7WD-mdffw8DMXlPOS-15LqSQyGtFczGU6
u3xUQhKJtI81-MyFy19_HgAerFxWoxkhriahA4BGOgNAMZdhmCZGk0ik-S1EMGJa7df8iov-Lkup
JBq4J6IziURqKUwPP3NBvuoEOwDojsAAGsVcBjGNBolEIpEcBnQplUSjs8uHmEaDRCKRSHJ5_P9k
R2AAjWIug5gmRpNI-HpeCFISCNA1VUolkdGIZqIzicRNZVGiJDgrSfyafsDwMxecBDTSGQCKuQzD
NDGaRLJbHiFISXAczfe-cU4n5s0Hzsg-tgFAOlvwHzwQW18IDU7xZDSiGQ0qHkmh6T573z_-QTkm
8dPlLz_vj2YG6OFnLszMBUODU_lswcN-o0hnAGB0LuYyxGgSqakGHg0w-nRWywFAl1JJZDSimdHZ
7AUikXgCi-JDslYf_dxPX-2zD_hn3sV-W0hnACjmMgzTVC0SibQvNRR6-v43zmnS_SOf_6n_dx0A
dCmVRKOzy4eYRoNEIpFaREjnV--sA00H6I7AABrFXAYxjQaJRCK1FKN3jXEA0KVUEo3OLh9iGg0S
iUTa9-rI536quTYLoDsCA2gUcxnENBokEom0v-Uv33mPztoUgC6lkmh0dvkQ02iQSCTS-qbzt3KP
AYDmqsloBwDdERhAo5jLIKbRIJFIpP2nK7ELbz5wBgB_-clffrLr7wFAc-31J3-55gNnrsQuOAzo
UiqJRmeXDzGNBolEIu1v-fqTv9RZ1WoDgHS24D94ILa_EBqc4rDFjsCA-GNnlw8ZPd1H5SORSPtT
Q6Hn73-jnE7Amw_cuRK7gLZHCIYGp9LZgof-RkupJDIa0Yx0pvqRSKR9rCuxC0OhMwCgxvSbD5zB
APW3HAA00hkAirkMwzQxmkQi7XtGAwBiWu3XlAOALqWSyGhEM9GZRCK1GqYNysV-f0hnACjmMgzT
VDYSiURyHtClVBKNzi4fYhoNEolEIjkM6I7AABrFXAYxjQaJRCKR5PLw-8lSKomMRjQXc5nOLh9V
gkQitYKGQs-rB1yJXXAS0EhnACjmMgzTxGgSidQKaD77twc0--vqq68CwMtzvyV3uvjvspRKooFQ
JjqTSKRWoPPZvz2gT2e1PPw32hEYQKOYyyCmidEkEmnf05l9TP7HUWYP-PGLtejsDKBLqSQyGtFM
dCaRSK2j5H8c-e7KRfbx42Oj8NBzTQRopDMAFHMZhmliNIlE2pcaCj1-9m8PyD0fH5s0_F0HAF1K
JZHRiGaiM4lEail9d_WiQVi7_G8O6QwAxVyGYZpqRiKRSM4DupRKotHZ5UNMo0EikUgkuTz8f7Ij
MIBGMZdBTBOjSSRSK_jVV199D8DHxyabF9ClVBIZjWgmOpNIpBahMxq-fOg55nzPP-25zldc-HeJ
dAaAYi7DME3FI5FIrUBnU3IA0KVUEo3OLh9iGg0SiUTa93T_5UPPveef-pw9v3zoOZ0vevjvtSMw
gEYxl0FME6NJJFLrSB-Kcrn4b66USqKBUCY6k0gkkqY8-H_yIzCARjGXQUwTo0kk0j7Wy3O-tWcA
XUolkdGIZkbn_Y3myunlFy6aih8_NUkX0UFN95mLb7b7Rtqvmn-mgtmvzAiyD_lsAQBi6wt8ttsR
GJA-h4_N4sqMJlnT2YKpp9n2b3Y1_5Vm2-_lZ0dNPXu9XrTu4-5CGiOZeQOaMVq_b7Tb2tpsXfGn
Da6x9QVTj937N7X5OoBrNj8c6mVqNQvoZts-rXtrraMfjQczQLfhH--BA7H1hdDgFB86yz92dvmK
uUxnl2-rimjr796_fdtUfGx9oSxKBoM9QnDi6Oeaav_KPO_qUippKh7vaPPo658VTMV-6i-svW_k
-S2z-WgWPqHBqXS24OJ-MAaCzi4fACCd0dPu77d1NTXEGHl3fdjRbN2-2c1jVo2vdeTH7nqZXc2q
2fZP6x5a64CJqeAqf-gDmu2gmMsgHZDR7f5_s0yxe0WVRUnnOAzQHPZvCqaYXuOrwdvTbDVS18s4
nZv5LLQ2-2qqHw2GKW5yGwCkswX-wQOx9YXQ4BRPRiOa6_suDpqZC5ZFySMEdwU0hp2f1QuzUJg0
p9ScxQKA6T5z8fMbzXkO0h6Ttf2I-TUzFwwNTqWzBTcAPB2OfOVLF54YP-HScoIbnQFg5_23GKbv
ae_c7gPvm94nH73VJOuBxzp_dePHrp6uX934sc5xMMDV0-Vv-_XHtu7nxu1b7DZ0dvkwewBQSiXf
d-8H1SsA3Exfe_-7f9P4qvMq9qM7b791T3snArGp6vX_37hl6h4e-UBz7d__9X-7P--XP-y9k-RY
8vz8u-9Ydz8a76_PDnW9tJx4Ohxx8R84pVRSPiuKuQwaJCOzmiVNnkzN9Wb6Wru-3-iq8yr262yg
Ui32hIbCF08vn6U8WCh5Pk31Y3395eF-wo7AgHpDxGgjYsVjRkdggBVYrZvpa6ZW-Xrhj1Kx9gqa
h2Qf17aWKSeN6_ih8Ub6sY7_cgDQpVQS90QNb1aYK0yafGLzqRcN1L2i08tnFWi_fm7b35tPb3pp
bWQ9ulwdfunxs1b1o2Z-AQTxvy7_t4dNDMXwIe0q_cRWJJNDvfBHic57RWtby2tby9fPbZdFibJh
VUot70f9-vLwPySbGGz4NHnDe4TqNHNclkxsSyY8Mbr5df3ctr83D_Ct_w1iJQ8bALD7KrhbIqVl
UYLwOACcXj4rnpq0pB81_wugyhwHAM0mhiMNPxS_OITGu_uVxcldStI0kk9sNDoCA3YzWj7h98RA
JVmi_Y1qhxpCeRdMt0Za1raWjx4at7Af9fvLxf_E7AC4D54Nf3r5rCaya8V7hKDBh8-_Wa4amdh1
10txF0n7W6aq3DpX4vq5bWv7Ub_-PPxPyCaGfEPcGA0AN2cfHt167PL-82s3-_fvts-d0IksixIj
dTNcDksmdt310pzwpP0tI7eL3ZBWkyX9qN9fDgC6lErinvg3-NrW8tFD4_1zN6YXJ6984e2huRvo
PL18FgCG-jUh1TU9frZuLrd9ZgL_4YuO98-t27etrReJpHHb29ooCabmman_cvE-A9uNYvhYpaHw
RcUq969tLaMt-zh8ahJtNAAAkV2HXv-o5_1LHRtmLGMc0Gl3vUg2qdYdPr18Vt4XJGf7Ub_-PI4M
GdwTboUdssGLOARwZbGKV30hlOW6-MLF4VOTl1_4ePmFcTTQXxYlg3vwCEElpjeXLE8dKx4z6pjY
jteLZLfWtpaPHhoHgKHwxfT4XZhmaD69fNZgv5Bs7Uf9-nLxP5X_xKhPN2cfVtjylQlvrUKaTjl5
d3321sRuhnqRbNX1c9trW8sMxAp2KwyDamtr0-Tcvn27ZfNsST-q95eH-6n0J0Z9ap_7cZc9fla_
GsHx5RcuDp_aREPxr7Io6RN8b03sZqgXyW6VRWlNUN7208tn17aWGZqHwheH0FCt6Xe7Rs7ltrY2
hmP0q6ndUrKkH-X7y8X-VPoTow5dGj-LVgC4sjipWFHsXtbS5RcuMjrvGqypts9MAMDtry4ZCfYI
wZ4z3erV7onteL1IfHT93HbjL2n398ufjsAAPnJny2bYkn7U7y8P-1PpTwxbVR92jev2V5f8vfk0
eB-8hy8OLV_Uj4eh8MX0uyOEqSxKamp7hCBsareWJRN7D9WLZLmOHhrHLjh6aFw-Mjrii8SNTuKJ
7iMA_VZLpiX9qN9fDgBac2IY6fnf-9Bfw1sw8CFIwmNNXrn5DRhSOcVKflrllPdAdGSXJGCisIos
mXYzuu56kZqW0cax655-bcL7bfx4c-ZhNNrnbgDAUv4TADDh-faVxcn0Zitm0pJ_1OwvgKBjgK41
MTxCsEcAgG7NtS-21--9fz6Eb-i73-17z5nn5f9d21ruOdNd67vvrvZKvv8e6B4_NQkAM3PdAN3i
hiSempyZCwKAYj_aUNY8izibt2RiWzvhSXtFHiF4afyswWB2A49673wFuXwH3__CW79za61lMb-X
U2pJP_r3lwOA1pwYu-b8X-3o3--d7-41s3uasmDXz20zW3B7mUduyxoAPEJ1TspVFiWPEDw-K8md
CHdLJjafepGaU0vbVxWexdiY-GM4tDLRfeROfP4TChzL-WNfvaGgdkvJkn7U7C_AKhkcALT_xNBn
dPPXzN_b3zUmvelFEOvEIJHtmNjc6kVqQkmJVQAIHn8cCwoAN94cvjtkRf0tBZ3Rc3P24Xf4fnP2
YQg935rJtKQf9fvLAUBrTgy2p-OzEgBcfuEiflzbWkaj50z39XPbzOa5YY_gwUqDwXgcJW03qwfR
EX5RwWtLJra19SLtLQ2fmrz8wkUpsYqMxpo__A9fxP__-tHPK_J-9aMvA8Cl6bNaL-v3bZ_ZAICH
4XJrJtOSftTsL4AqMRwAtP7EQBIxLsvVOJcZ4o2-sCzeBUqzUqLZgCLxzKIQ1PyiJRPb2nqR9pB6
znT3QDc212JsDAAAggCXQahetofh8rv_qh6_--L1c9tiJa-5QuGrS4135d6VJf2o318OAFpzYnR2
_cKhFVt-dzE2ZvYyed69uEZU3X-oqqHo3cLOz0ozc0H5atXEtqpexLu9oqHwxSGAK4uT9X1drOj8
K_8XtdndCrKkHzX7C6BKHgcArTMxJrqPqG8AAAhur8K-tH0VAG6mr93h4-FP_3vzn-oLUWGj2v39
DHNGdH5WquNoZvfvyMS2ql6ReAYgA9vQJGu019zMaLb927H2bC0fPTTOjpze9J5ePitPQvD4451d
PnY-xUq_mMtMdB-x9_Yj8Sp09IcxC2OKjvjSm8oLr9C779_TWT1taT-q8NAZQGtODPUlWNq_Kued
4qNciOP0prbNMD0zFzSO3Zm5YFk0x_hIrs79c57YNtWL1IQKh1YWY7uHiZU85cqpftTsL4CgY4DW
nximdGhIMBiDh5_Zqx7buDxCEAAQ1vo2xKtFqkPREd877RTZ7Q2WTGwH62Wrds1eyzJafsfWtpbV
lGH26W-ee_kpyplRWdKP_v3lAKA1J0bjPS9W8rABgltpy3X93Lb8Y8_ZbsdrjG1z_ksvAsBzJz4D
AEvbV22d2E1SL5IjOnpoXP5RStz1cSn-CSmxemn8LCXKiCzpR83_Agg6Bmj9iWE2QQCwBBl4F7y1
7DqI7BGCAFAWJYN2Hfq73936nS-dKeeff-_rDNP2TWw76oVjJhKvXlPyN7m-lia8366FIc346T6A
Pp-x99fS3sqntf2o318OAFpzYqhvwET3EZ2PqJvpawZ-tN3fz-mYRvY-uvXYP-7x3yf-zWOnv-Qi
Q-PS9tVF0B4klkxsO_oViWcUd5f8zelf21qu4w4Ibi8aYiUv-xiJX9X8XbPao-m0pB81_wsgiE4X
f0CzA2CT68xn41pa_zPL91kWpbIoeYSgRwgasev7ldGtx_Y34B--_P5Lz44ubV9d2r6K-pm5oGJV
TGxFMh2vVyRevaPk3xN_45roPqLzr8bfv3fzaUk-6veXhz_gNSdGI4xGOi_t-dnE0c-JjT2k0a3H
YOvOx3BoRR3DEtXgxHa8XiQHdf3cNiXBKlnSj5r9BRB0DNClVBL3xM5Wd7cfGhJm5oJlUZKT_vys
hH50np_V2OFNySMEAQBfbsTmIPnERsNuOuvUKzrie2eWROLKxJK-Of0A4O-NG687e49YyQtuLzqZ
gRIrJl64--JpST-q89DFH9A1Jkb98ghBfBiOkdr4MFLvm4ktnzcsmfzrpXllyd_0frNi7ynmMmIl
r-nU6lx-b17-2R-5tKQf9XnYBgDpbMF-8EBsfSE0OMWT0fL5g-ub6D6iiMQRrZjbALC0fZV9kSEY
6YxSOIu5zGJszNQmy6KE9Ddoh0Mr9e1fXm_d-civQiMT28J67ZvJ1wqKjvg_9ReiweCvf1bQBJOR
0hv5oVrv3xOSEqsAMHxq0qp_VPfXzFwwNDiVzhY8-I_nOTGw8IgttZZAu5b4hnBI47_aTrtldv9m
hYkq5jLyiW03o3XqRdpbavf31-1decV3xXQjP7SHZEk-avYXQBCdbQCQzhb8Bw-E1hdCg1M8GS2f
GAAguL22-qhYyc-MVY_9q8KhlcXYGACURQkAPEJwVzu9aW7-f-79rx4_NqqeN-odYsnEtqRe8t1G
R3zvJC0SV_6f-PvAL0ez-AKgpvtaLj9D4YsAMHxq0qp_VPfXzFwwNDiVzhZc-MdOjYkBPWe6e850
_3vz-t68HfbMXPD8rBQOrYRDK_dnJX0bK2FKZvcTW1_ob2LL4ciSyb9ecqmvMvn3jV9wexHErO7F
XAZt-FfL5seSftTvrzYASGcL-oMHYusLocEpnoyWTwy8AQDgEYIAUBalVrDnN5T81Uma-Co0OLEt
qZf_bkmk-SopsQoAw6cmrepHdX-NzAVDg1PpbMHF-3j6E6OlhDNJoYnuI7XiLZnYVC8SyRJZ0o-6
-eXhf6pSKimfGOyQHiEIAGVRail7GqT5jbvo7O-Nw7Z26uQztpGJbUm9oiM_AIjElbAmP-lbwW9V
P9bqL5SLP6D1J0YLaroPZuaCM3PB6IjP35v3CMHF2Fh0xBcd8S3Gxpht1cS2ql6aV5b85N_j-vkN
7ftfK96qftTnYRsApLMF-8EDsfWF0OAUT0bL5w9yCgA8QhAAyqJEtsI_Pyupq1jHxLaqXi0_Vkkt
KymxCgDDpyat6kd1f83MBUODU_lswcX-ePoTg6QjSyY21YtEap5_1O8vD-9TlVJJ_cRgh-QIQQAo
ixLZmrZixjYysS2pl1zRER8AROJKcJOf-PvPz2RJP_r3l4s-oPUnBsnuiW1HvdRXmfzk3-d_S-pR
v7-aACCdLfgPHoitL4QGp3gyWj5-AGC6DwDAIwQBoCxKZCvs87OSuop1TGyr6kVjldSakhKrADB8
atKqflT318xcMDQ4lc4WXPyPpz8xSDqyZGJTvUik5ulH-f5qA4B0tuA-eCC2vhAanOLJaPnEAICZ
uSAAlEUJADyC9XZ602vroXrOdNu6--kNjSrWN7Etqdd0HwBAJK6EdXTER37y72O-lFgFgOFTk1b1
o7q-ZuaCocGpdLbg4j929CcGye6JbVW91FcZRX7yt4Lfqn7U52EbAKSzBf-BA7H1hdDgFE9GyycG
AEz3AQB4hCAAlEXJcvv6uW1bD_Xvzdu6--OzklUT25J60VgltaakxCoADJ_atKof1f01MxcMDU6l
swUX-_PpTwySjiyZ2FQvEql5_lG-vzz8T1VKJeUTgx3SIwQBoCxKNtkAXlvPZf-_75qxjUxsS_ol
V3TEBwCRuBLc5Cf--vMzWdKP_v3l4g9o-YlBsnti21Ev9VUmP-n3vd_SftTvrzYASGcL-oMHYusL
ocEpnoyWzx8AmO4DAPAIQQAoi5Ll9vVz27Yeyt_bt3X-52cldRXrmNhW1YvGKqk1JSVWAWD41KRV
-ajur5m5YGhwKp0tuPgfT39ikHRkycSmepFIzdOP_v3l4X_qUiopnxjskB4hCABlUbLJBvDaei77
93-XjG1kYltSr_iIDwAicSWsyU-_VvBb1Y_1_gvl4g9o-YlBsntiW1UvzStLfvLvUf-8hvb9rxVv
VT-q87ANANLZgv-ggdj6Qmhwiiej5fMHAKb7AAA8QhAAyqJkuX393Lath-L35m3d--lZSV3FOia2
VfWqb6xGR3yReCY64sOrr2nIW4LiKb6ReDskJVYBYPjUpH0-MTMXDA1OpbMFFx8iG58YJB1ZMrEd
rBd20UT3EfxYy8Awiqf4BuM59KNNK5OHP2VKqST2PLY6g45HCAJAWZRssgG8tp7L-v3fgSMzSqmk
U-VSkzcSV4Jb7jfVNmZ7jOIpXhEvv41G7qdxP6PzzfQ1ALBjBQg6BmjsdjYrsO3VPW9Q6U3vv8J3
c-sOglW2vxcAQKzkbT1XD3Sb2k99E5tRkiXTbkYbqVckntFsoVp_EomnzN5PI3776HwzfQ1gDH-F
xT9ZDCjY5Kzby6JUFiWPEPQIQeO2kV-EeMHtFdxepBva030w3QeN2Pg2tM3ux_x5GRxZ6uTJ5F8v
9d2t1RsECFIzMNpyf7u-36aVyQFAdwQG0GCsQYO0qxgcWcZYMqleJBJPtfv7O7t8Nq3sVzz8D1ZK
JbHnsdUZdDxCEADKomTKhs3tXX8R4-29AACw-a-J9ffmASC96W3QBsgwu_dMt6n9mD2vHI7MKKWS
TtUrOuIDgEhcCetafhKJp8zeT7N_7AL7VscAjd0OAHLWyPdkSmIlv2vMNMfT2bofTBRSkiXTbkbX
qlcknsG7q1AtP4nEU2bvZx33mfWj5auTgC6lktjzjDW4obIoAYBHCJqykRqYQXVMOLQCAJ65MQC4
fm4bAAAyAJDe9AKAvzffoA3bwOyymDe1H7PnhQ0JM8ZSh8l0ql54d2v1BgGC1AyMttXPQS7_P4nd
zljGWEPaVQyOLGMsmVQvEmn-ycP-J0upJPY8tjqDjkcIAkBZlEzZEM-oxKDQ9vcCAMA2AIC-Nw8A
6U2vKXvoP-zapU-eK-cDZJjdc6bb1H7MnlcOR2aUUkmn6iVXdMQHAJG4Ety1-CQST5m9n-r_fQ5o
7HYAkLNG3fOmhAirwhTu2AhQSzT0H37tY39y-OVvJa58wbH9YKKQkiyZdjPaSL0i8Yzm3a3lJ5F4
yuz9bJ777ACgS6kk9jxjDXY7Qs0jBE3ZqCoKe-MKG7b-FZcYf-3cNkNkrXgdewh_DgAf_5PjL38j
cemT98rfj3ZZzJvaj9nzwoaEGWOpw2Q6VS-13a3VG2jMbwAATPft-osYibIq-t1tZLAE7AhO7Yfi
_cQbv5-G-VJ4XwMaux0A5KzR7Pnm1Mf_5PjL30pc_YIDP42JQkqyZNrNaAvrJbi98xt5gDxUW0jb
ENxesZK3ML6Yu6rYMB7Bqf1QPJ-4fSAHAF1KJbHnGWuweTxCEADKomTKhngGAPy9eQBIb3oVNkCG
xft7AQBgG3Tide1fu4vR30hc_uS9_H6M6TnTbWo-Zs-LMiY37KazTr2iIz4AiMSro4Kplp8x2t_b
T29qrO751wCgMv2otfGReJXF8jCxC4q5DHR7_e_H4vnEm72f9d1nu_Xi-5PY7QCgYE19io74oiM_
jxD0CEF-b97fm5fbi7GxxdhYdRYJQY8Q1I-XsdkvvvyNxMvfSFz5wtvs-Rhjdj91iMGRZYwlk3_9
al1ZnassVqpZ0lRg52Rg56Q8rPF4pPN0X3UqY5n8vXnB7e3s8i1tX_W8H4rnFm-2fs5vaL-WKTRX
qcX-J0upJPY8tjqDTlmUEKPNaV8BePkbCQD42J8cf-kbCf57gA2JwZEZpVTSqXrV0QOC2ytW8rAB
ABqrOFttv2qYJfEA033gEYJ_kDCNfpDSm15-b17Y9C5Bhvd_KJ5jvKn7WcxlIrmmY7SL-09it2NG
5Kxpfq3deGjtxkOfO-Q3V77wtiMbYHBkGWPJ3Cv1Etze6T7tdSyaH4vmBbfXwngcb0cPjX-qL0QM
8AjBxcTXhsIX-b3Vnue5H4rnHL-X5eH-k6VUEnseW51BxyMEAaAsSmRr2nI4MqOUSjpVL7miIz4A
iMSV4Fb4xYpe-wR2TgLA_Ur1sJbHK6__EATVhtXvvw7bYiXfDPvnE7_fzlvrHkqJVQAIHn-c4L1V
_Pc5oLHbAUDOGnXPk9TCRCElWTLtZrSRekXiGc27q-ALbq9YycMGAGis4myVC9UwS_IBAODK4uTX
PyvgqPMIwa9-VriyOInDz8j72Xkd2L_l8e-96RviB6B1zqu_h4jmta1ltBmj9e-trv59BehSKok9
z1iDt6EsSgCAbUO22oYNCTPGUofJdKpe6rur_XWFX3B7-b359KbG6p5-DQAq049aGL8EmfOzUvV-
G9Kd9V2DjTodyc-Lef-Wxv-iAw_01HkV91BKrCKaw6EVAJAS48bv7V3vCe9rQGO3s97AttfseZJC
mCikJEum3Yy2sF5iJS_4vbX_G9g5CQDXYVus5C2Mr7Vbdpwm37_F8S14XrWQzigpsdrkLe8AoEup
JPY8Yw1eGo8QBICyKJGtabOMyQ276axTr_iI753rHolXRwVTLT8ACG6vWMnDBgBorOJsta_qYZbE
35009aQxkgEr99MM8a1xXimxemVxUn4Pg8cflxKr0REpEs80P5pRLv4-id1eR5_QGBxZxlgy_ddL
E8E6ftY8033a61g0PxbNC26vVfGYrtFnPo9Jm_6rPngK9BdzGW77oXie8Wtby0Phi5r3Mzriw4D6
Hp4t7_FPmVIqiT2P7cGgUxYlAPAIQbI1bdiQGByZUUolnapXHYwWK8p_kyuwcxIArsO2WMk3Hh_J
V_n84pe-iJvHzkQ-ALz45S-ifyPxzES3xq9Yux_K5xwfDq0sxkBKrAJA8PjjACAlVhGvkXhGCkM4
tFJfR0iJ8f0MaOx2AJCzhvU8SUeYKKQkS6bdjLawXoLbK1bysAEAGqs4W_3DalgD8cXcVTmdUcho
_c4Zo5e2r3ZWfPbth_IdiUdGI5oBYG1rGaHMSN38cgDQpVQSe56xBnvGIwQBoCxKZGvaLGNyw246
69RLruiI751_iMSrY0PHL7i9-t58elNjdc_-BgCV6UcVTDcbv7R9h867zhLG6GIuM9F9xI79ULyD
8UhkxDTa9d1buZ_nXPwBjd0OAArWkHYVww3LGEums-VSX2VNv1jJ6-xQYOdkYOekPKyOeDmd5UNl
uq_6f7TVjO7s8i1tX7V8PxTvYLwc02VRQltKrK5tLSOsDd7bXf32ycOfMqVUEnueNQ9CBzPoEYJk
a9qwITE4MqOUSjpVrzrutOD2ipU8bACAxirOVvuqGlZX-BIot4G7jcTvbDsSz0RHfPMbdwYe07zV
_6F4p_KlxCoABI8-Lr_HcjrXx_JIPCOF_dHSxR-Q2O0AoGANaVcxoLCMsWTulXoJbu90n-Y6Fs2P
RfOC29tIPOrFL39x9JnPjz7zefzIjF1l_X4o3qn4ta3lta1lKbGKpNakc-PLw-8nS6kk9jy2OoOO
RwgCQFmUyNa05XBkRimVdKpe0REfAETiSljX8hdzGbELNHmKCuycBIDrsC1W8ni6OuInuo8sbV9F
RjM0o21WluyH4p2KL4sAAGtCFc2I7HBoxey9reXHjrBpdRLQ2O3YsaztFdsiaQoThZRkybSb0bXq
FYln8O4qVMvPGA0bAJBXr_JsXv5DdcfjXUInormYy0RHfKzH5LZC8zbsh_Idicd7GA6tAMBiDN7x
oF3rfs5vwHSfxpXQuc8c1AYA6WzBf-BAbH0hNDjFk9HY6uqh0SLSvA06mt9QUhIA7KazTr1Y2_wV
sTZjdGYXb-SZz39jaqLV5z-JmKTEKgBcWZxMb3r9vXk7Vo8QDA1OpbMFF--jYberWcM8rbOaVTGX
UcCRJdOReu0JdXb58JnfAHyYp5jL4EN0JtUhf2-epvUupbMFAIitL-BkdEdg4PCxUWag3dbW1lKr
qYdlSZ46Z_vFnkvPjl569i5P8-hxt5qPIqA590-_ZvOns4V0tvDcic9cenbUphVpnM4W2vCP-_CB
2PpCaHCKT7fLP3Z2_Yq5TGeXb_uK2FLjt93fj2fHJAAA5gENlhz2kSWK-RdVSiUdqZdiG9ERXyR_
l6dJ-JhDTcmTL0-7njgX_Z3yD4UvAsCVxUn7ms4jBEODU_lsARDQAIDM5iMcR4ePVWfU4WOjh4_N
trW1dQQGWmdlD_ZBf2VZUqTOwXrJj9DMD_5WvmGFZ28dhx7Hn3S2kM4WLj07_tyJz9i0Io3T2YKL
G5Tl3Y5GMZcBgM4uHxrt-v7OLl-rrHh2TAVLQjGXYU65n2UM-8ucHBhdq177RsVcZp_diMRH-t68
TStTG3Laf-BAbH0hNDjFk9Gs1eVI2usS3F61U6zclXQ574xLjmaWulIq6VS9pvsAACJx5SmiI76m
8rPbxRKu9jTz-snfbH4psQoAl8bP_nvz6U2vHWvPme7Q4FQ6W3DxRxh2u5o1030guL17fQWA09-6
_elv-RwNRm3NSLMq5jJyTMuTyb9e6quMaja-We2Vc5HfWb_-N2-rinIA0KVUEg3GGjT2gTCzlz55
76VP3ouGfi3NisGRZYwl05F6EaPJ38r_9KbXppXJw59iHYEBNBhr9hOjxYoGead1gcvAp8lB5mfO
Yi7DnB2BAbsZvdfrJU9gLQ_JVIf8vXmbViYX-1MxoChI1IJipGBJQPwpiKwAOkudPJnO1is64ouO
aBTRcf-pb96Lj_IsCn-T7p-8TetPb3ptXR0DdEdgQI4nBZL2uqb7NJ5a0kQeS4gahczDMsaS6Wy9
InHtCjrrP-3Ney899XN8GIs1-c25f-I3s9-fm7d1RXn4I6yUSmLPY6urMbRHNb9h_iuMdGpD8yOD
IzNKqWST1KsZeyl_5_Olp36OuSqlkpeeujPV0N8RGCAGkd_gXwpX7fSm19_bt2N1EtDY7Yw_2Pb7
g9FbV0SDkYeGBPnZd11ZxhglWTLtZvSerpdmchROdkASyZSQpHasTC4HewabfN-QGQDa-f3yZ9d4
RJ6RlWWMUVIHQHzqFR3xRUc0CtdU-o7AwKVnR2sd7dKzo2o674lzkd9xf3rTa_vqGKBZSzDWyBm0
pzXRfUT_7BqPtdcsfy2gM0oqksm-XpG4dtWa0I8gVj97Zf-k5_Cf39C_-7Xi-b15W1eUhz-FSqkk
9ga2OoMOT3mEYI8AAN0NrmXxTirrUK3a1xKDIzNKqaSD9aqjN6IjPlzZR7XBvk7xFN9gvPH7Wcxl
IjkTfVoL6JZoRqgaLv6Axm7HjMhZsw-Uc6Zb-nz9s0Ktp773MziyjLFk7ol6YRdNdB-Bj7UMDKN4
im8w3m5hI9ixMnn4U6yUSmLPY6sz6LSgGOwYdhX8VX9UULKUSjZDvbAlInEluOV_U21jtsconuIV
8fLbaOR_GvejfvjKix2BAeMrNo7BFSCIv_LiTyXsdsYdxpp9oLIoyR_DE1iRAUZAdWbUBGfJdLZe
6qus7yeReMrs-TToL6WSplZsHCMrkwOAxr1iq8uhw1Ph0Iolj_K18xtGH3kG5NRTZENBQ-aRxbBk
Ol4vYjSppRjdERgwtWLXGF9RHv6Zwu2yWYHQ6ezyReIZgEy0lxOsoyON-pC6hFtXxHZ-PwDcTF9D
T7u-n9lyHRoSas1M9lHhZ3As5jLsXx2BAbsZXate1POkVpYCprsyWt7sBtagY4AupZJspCBrnOr2
WkOybr63_-sXY2MAEA7BzfQ1-Ii2VXdCTklMplP1wgyoc1jLTyLxlNn7Wcd95gAuF--EYbezccFY
44hupq8hPRUrezT-VettE91Hjh4aP3pofKL7CPuItiVicGQZY8nkX69aCCY0k5pBZu9nffeZNQXz
lFJJzVVNEp3VSUCz7TLWcBhEu6rd389W4-9SaGn76trW8trW8tL2VfYR7XZ-v-yRZ6CzyyfPAPuo
8MvhyPwsmY7UixhNamVGs17ArtShcymVvJm_1u7vN7g6CeiOwIBi_LDjoU4vnx0KX_TGZcwIG1_Y
I-Zo-svIm7-_WUFuT3QfkT-yDMgrrciGYnqpLwRLpoP1IpFaU6wXWJPq9yMjya6rk4DGkcJOpWAQ
Q-Pp5bMcNqNIh9yv8686fqjnTLf80ckAq7rCr3khWDKdqhcqOuKLjiidOn4SiafM3k_DftYL2JV2
9KOHf7LYkGGs0ex5hPUQGobX_VOTY0-lxQjABoxFXxvyfjs9rgf6dn8-W80aRq5FWZSwomVRUgew
uqqNWh8xXczfERiwm9FG6hWJZzQvdC0-icRTZu_nQT-2gtywvB8dAHQplcSeZ6zRpHN9GovmVyJe
Zky8AEvbV6O9Nd9-M32t3d9-M30NyWvQqMXozi7f_VkJjfmN3XfLYLfrWutC2E1n4-WKxO_aJWo-
JmS6b-dflKeO4im_kXjj99O4XwpXbdaerEMt70cHAI3djseTQwoATn-z3qX8J1jkhPfbZl8up7OR
_FqoreXX-9fWFRH-y2jObIUODQksA0bWWhfC8oltql5mJbi98xt5gDxUW0jbENxesZKneIpvMN5u
YS-IDcv70cUf0OwA2OR1d3stMTqPRatFisQzS9tX5SsLvpm_djN9rd3fjzBlhhzH8n9hvHycyt-Z
7u9fjI0txsYwmNl2XAibJrbxekVHfNERjcLV8jNGT-dpr2PR-Fg0L7jvmqwUT-H1xZu9n3XcZ9YL
2JV29KMDgO4IDLDjyaEDAB-_plf_NEhnNAyKYVdeD7kt53ItTXQfOXpo-Oih8YnuI3LbqtSpLwRL
Jv96ReLVPShUyw8AYqU6MjUV2DkZ2DkpD6N4iq873uz9nN-Qfq3OfWa9gF1pRz_2AUA6W-AfPBBb
XwgNTvFktOJ4xVxGMamGwhfNvnn41KSczpdfuBg8-rgakUvbV6MjPp3U7yr8uvzNYiVfzGUWY2Pv
FDUcWgEAZqvhfmhIYKPeoPDaKShp_cQ2VS9TL_ns8glur36PoVgYxVN83fFm76dxSYlVhhqb_hFp
nM4WXHyIrO529dmsEqPzWHT3Wt5MX0N6Klb2aP6Lf9JYxhRwtHxi210vwe2d7tNex6L5sWheMbco
nuLrjpcSq4pnz-Wjhz9lSqkkHgNbnR3ScjqvRLwTLxj9Yru-n63G-2VQX-_soPDMb9TzHgZHyyd2
g-WKjvgAIBJXglvhFyvKfpMrsHMSAM5XJOYxEn8dtsVKdRLb8X6K31v5Z-uREqtrW8uKGGR08Pjj
pu6tws_zHx0ANBsy8rNhz0fiGSmxOnxq8vILF_t7uZzOxrl8M30NbWawAJ1-8RcmCinJkmk3o3Xq
xRSJZxR3V9MvuL1iJQ8bAKCxirPVPq_GAbz3p2_IH4Bd49l_zL6f4vdW-k3tZ21rORxakbM1Es8s
xu7CtMF7W8vPoR8dAHQplcSeZ2dTdHuDYnQei1YLpqOb6WuazNXBca2v4CUoixKbtHLbEnGY2HXX
KxKv3lF9v_D2_nvz6U2N1T3-GgBUph9lwb-4wAPs6uunpb73U-zeyr_p-cjpzO4hOhmmkdFG7q3c
L4X59aMDgMZux-nDztbZ5UOQXVmcZOudXQrBOui8EvEG5pb14xG1DLimDLXmN_xNHYeJbbxedbxK
rOQFt7fWfwM7JwHgOmyLlTuT1dQPmX0-xe_t-Jvaj5RYBYDg8cfV-0JMS4lxjGnmfmwDgHS24D94
ILa_EBqc4slo_fwBgOm_uxiHH-WnWa3hyTCN75-oPqIIW9q_Gh3xReKZm_lr7f7_m_lrSF6DRru-
H78uf-PS9lWMMaJ2f796V7vefgUl7ZjYZuulLg0OWrW-s8snuL3yZqslFkbxFF93-MxcEACOHhpX
MBrv51D4YoNNMXxq0r5_RBqnswUPHyKru11xNjYYp-tgfuMuOgPAYmwM5x4aaGMu5CML38zoPBbN
R38nyX6uFihN_XX_NdF9BEwytwkntvF6ReIZvOsK1fKz5vH35tObGqt7-jUAqEw-SvEU33h8OLQS
HfGtCSAlVuWMZvdzbWu5vo44emicWz_6_AOaHQChLKczY7RC4dBKOLTCDLQ7AgPIDjTUdF6JePXp
DAA309dupq_1_-sRu2igU_df-JPGMsYoqUimI-WKxKv3Us1oTb9Yyev8UGDnZGDnpDyM4im_kfhI
PBMOraxtLUuJVXnkUPji2tYyg4nZh2c-tgFAOlvwHzwQW18IDU5xoIwCmnhIBaMVYgPKIMJOf-Pe
S0-9nKVvovuIImxp_2p0xFeLI0aEX1e-2T6JlTyb2JoA5Vwv40VhXxTcXv0eQ7Ewiqf4uuPl93Mx
Nnb00Dj7iHSuuyMQ98OnJu3rR6RxOlvwcOOL-ADY83i2XekMADfT1wy_HCMvBKt2u79fH7L8j9_I
5BMbDbvpbLBemEn1wFP7BbfX35tPb2qs7vnXAKAy-aii2Sie4uuOR5VFaU2485HR2fi91SQGh350
8acMdjsAKM5miQ4NCYq1liLxTIMP-9QxOLKMsWQ6W69a2VD4xUpe54cCOycDOyflYRRP8Y3Ey_9h
WZTCoRV8zN7bWn4O-dgGAOlswX-wQGx9ITQ4xZPR8vmjH791Razvh9r9-QAw0X1E4V9MfA3-xXQz
fc3g2_RfCR--NDc647Wze2Ibr5fZsdrZ5RPcXv0eQ7Ewiqf4uuPN3k-jkhKrADB8atK_fkQap7MF
NwA8HY585UsXnhg-8dJyglu3A8DO22_xs93T3qnzldBvDX3kgWAdT3-Hh-o7PqR_4atvSL-42U-e
_-7fNE5nAFB-5SMPBLkB_sbtWzixd95_C1P3zqh53-0f-MXPfuJIvdgeDOqe9s4e1309rvuefPSW
902vev3thTceOXHroVc_jIcFAIqn_Lrjzd5P4-rTP-oDAPjL73zPvn5EGj8djni48YWplEpiz2Or
4yE57yF8-NN3fe4_YvoVdXylYbFBbfnErqNe0REfAETiGUV8LX8xlxG7QHB7a-1QYOckAFyHbbGS
x9NRPMXXHW-2fpr18_nHNgBIZwv_gwdi6wuhwSkOlMFuVxxSn9E6VWkd4bVjV0EOUEfqhT2geXFr
_fHru-6i-IAUT-F1x5u6n51dvuk_bRAr4qXEKgAMn5q0rx_RxulswQFAs56Xzx_isBFAs8tn38Q2
Xi-FvSSRWkQM0Fb1o7q-ZuaCCGgX-_PhbtRnY_o5041P85SEbcnZjeHElsORJdPBepFIrSlL_lG-
vxwANBsy7GxoMBRq2k0lpzAtn7GKZDpVL1R0xBcdUTrJT-797bekH-X7ywFA608MNQodx-Hp5bNl
UVI8jmDakoltR70ice0Kkp-8_9hvST-q91cbAKSzBf-BA7H1hdDgFE9GK_aP4PYi9RB-AOARgppf
v35umyedAWD41KTcOd1XNXCHfPYjVvLqKtYxsa2ql85YJZH2saTEKmOCJf2o7q_ZuWBocCqdLbj4
H09-YpyfrdIZABipFeo5081zw2tby7hbfABgfgPmN-R2aJMsmdjW1otEallZ0o-6-eXhf6pSKimf
GOyQmjo-K0333eXxCEH_dMbdKvI4vwHTfXB_VhLcXj6bkc-YRia2JfWKjvgAIBJXwpr85G8Fv1X9
qM9DF39A608MteY37vpYFiVnx2Znl4_lUrG3PTGxraqX5pUlP-lbxG9VP_rzsA0A0tmC-_CB2PpC
aHCKJ6Pl8wcABLcXAMRKfrrvLjpP9ynXmbng9XPbfLbac6YbAM7Pak8FrBDu3G6Jlby6inVMbKvq
pT9WSaT9KimxCgDDpyat6kd1f83MBUODU_lswcX-ePoTQ1OI7Ok_8AjBmblgLVzyF6KKmyyZ2Bzq
RSK1gizpR-3_cgDQbMiwsxnHXFmUyqI0MxdszQshn7GKZDpbr_iILzqiUUTyk38f_y3pR-3_cgDQ
_hPDiM7PSk3FzaXtq3toYttRr0hcu4LkJ-8_9lvSj-r91QYA6WzBf-BAbH0hNDjFk9GK_SO4vQAg
VvLTfXci5zdA-pEpvenls9WeM927joTpPojEMxPdR2zdiVjJq6tYx8S2ql5mxyqJtD8kJVYBYPjU
pFX9qO6vmblgaHAqnS24_B9Pf2I0m8qiHpo5y5KJvb-rRSLtrX7U7y8HAM2GDDsbGnuX0ZE4J2DJ
Z6wimfzrFR3xRUc0Ckd_8reC36p_1OehA4DWnxh7TtN9UKt_zTmxrapXrbFEfvLvRf-8hvb9rxVv
VT-q87ANANLZgv-ggdj6QmhwiiejFfNHcHsBQKzkp-vuypr8I1N608tnq-7evJGwSDwz0X3E1p2I
lby6inVMbKvqVd9YjY74IvEMjrRahrwlKJ7iG4m3Q1JiFQCGT01a1Y-q-pqZC4YGp9LZgosP5oxP
DADwCEF8_O9Nk7xGHj6bsWRiW14vU3QGADbJahkYRvEU32D8nuhH-f7y8EdeKZWUTwx2SNTM3B0u
e4QgbEiKr1fBvbnNZ7cT3UeWtq-KL4Fc7F9o2C35jG1kYltYL3nnqAeV3G_qbcz2GMVTvCJefhuN
3E-jfmv7Ub_-XPwBrT8xFJLzGlUWpfOzSmrbp58MP8cM9aOI2RMT2456qa_yvp9E4imz99Og35J_
1O8vD-9k6U8MRHB1c0KQrXdpgx_gmf7z30Ycv2eWTGzL60WMJrUUo6Wwlf2o318u-pnSnxiMzgpb
rpk5FbJbQ5ZMbGvrRSK1rCzpR-3_8vA-lf7EUEjNaI-gDJ0Ft1ftXIIMAHxv6X_c6D7CYQ_WTGyr
6hUd8QFAJK6EdS0-icRTZu9nHffZkn7U56GLf_L0J8auUiPbVn30x5Eqi7evuudfW9q_Kn-kJdwr
E9uqetVCMKGZ1Awyez-ruM_W9KM_Dx0ANBsy7GzyidHMZb701M_dRZJ8YiuS6Ui9iNGkVma0Jf2o
z0MP-6xpTgxTjC6LEoCXz25vpq_1_-vRUP-3zr_6j3DYDCaqmMvIJ7bdjG68XiTSvpQl-ajZXwBB
dLr4n0p-YpB0ZMnEtqNe0RFfdESjiLX8JBJPmb2fBv2W9KN_fzkA6BoTg2R0YrPUyZPpbL0ice0K
1vKTSDxl9n4a9FvSj-r95eGfrFIqiXvCrSgmxvwGAMDWFbHW1w8NCQAguFvxnsknNhp1TGxr62X8
TmNlp-t2-0WMRFE8xTcSbwejpbCV-ajfXw4AWnNiaPZ8Myh8-NNL21fRUP9X5192CBOFVWTJtJvR
FtZLcHvnN-IAeai2kLYhuL1iJU-xFN9g-J7oR83_Agii0w0AT4cjX-nShSfGT7y0nOBwql-87Cfv
u-_DuJWdt9-aefst7PYe13249rju_8gDwVoPBvBkdH-Hh-o7PmT2X5brxu1b97R3siruvP1WfRPb
qnrNHe088WDn919-SxEfHfFp_u9p78TaPfnoLe_bXvX62wtvPHLi1kOvfBgPyy4DxVN8HfFm76dx
-5-_0R8AwF9_53uW9KNmf310qOul5cTT4YiLJ_l0JwbJ6MRmqZMnk3_9InHtqtXyA4BYyev8UGDn
ZGDnpDyM4im_7niz93N_Q-u1OvfZkn7U52EbAKSzBf-BA7H1hdDgFE9Gs63gIc1qus9cfK0C7DlG
y1NXx8S2ql5mx2pnl09we-V7DMXCKJ7i6443ez_NS0qsAsDwqUmr_lHdXzNzwdDgVDpbcAPA0_HI
V7504YnxEy8tJ7h1OwDsvP0W29Y97Z142nvaOw2uJx7sNPW763lz72-OtbPLt-P2W5g6AHjf-R-8
xc9_4ki92B4M6p72zh7XfT2u_5589Jb3Ta96-e2FNx45ceuhVz4MADdu3wIAiqf4uuPN3k-j_tM-
_gMA_MvvfM_SftTsr4898chLy4mnwxEPByIrVEol5RMDD4l0vpm_BgAG14j5nzb1-mZbO7t88hnb
yMS2pF5yRUd8ABCJZ-T9YiUvuL21fiiwcxIAzlck5qF4im8kvtY9lBKrABA8-rjBe6vwM1nSj7v3
VzpbAIDY_gIfQHcEBuTP4WOjuLaZFPsuGuw9zKn4aPb9zSZ2QEUCnaqXwn-pWaVH4T98bPS5E5-B
iug-LIziKb7ueM17mM4W0tlCbH0htr6QzhaM3Fu1H19iVT9q9hfSOJ0tuPhAWTEx2PwBAPnEaPf3
m1oV4wvFXqjw1-H_ZlvlE1uRTEfqJVckfleqa-kFt3e6T3sdi_bHonnB7aV4ircqXn4PpcTq2tby
2tZyOLQSDq2Yureafkv6Ub_-HAA0GzIKvLb7_zu7fMZXeV7YSxTHkzPa7PubbZWfjh2qjoltVb3q
kFjJ6-w3sHMysHNSHkbxFN9IvKYYmgFASqzW8QDA2tayVf2o319tAJDOFvwHD8TWF0KDUzwZrZ4-
pmQWE-X9SrNJUcU6JrZV9Zrug3eueySurEJ0xKfp7_zyCW6vfvOgWBjFU3zd8ZdfuHhlcVJxD6XE
KjqRs-VpbWs5HFqRo7nBflT318xcMDQ4lc4W3ADwdDjylS9deGL8xEvLCW7dDgA7b7-FtnVPe_d0
H3jf9D756C2D67XSj0z97tzRTlPvb7b1xu1bOLF33n4LUwcA77v-g7-42U8cqdd3r2VOPNj5-der
O2H6-utvafrvae-scd3X47qv1gF-e_GNR07ceuiVDwPAjdu3AIDiKb7u_MP9-_2j-8PMN-6v-1t_
Cf-0j-5gbOZ-j474fB85uba1vF36r3U84dAK3mdL_lGzvz72xCMvLSeeDkdcHIisEBsybAShsdfl
EYLu_df__am8WMnPb0CtFWN6znTX8RPyGatIpiP1isQzml_p5RcreZ0fCuycDOyclIdRPMXXHR8O
raxtLUuJVSmxigFSYnVta5ndz3Bopb7H2n7U56GHP8jYxGBnq5vR8u-i29TnZH4OWol4x6J6d8hg
TC3hoYq5DDtUR2DAbkZbWC-B7RUredgAAI1VnK2mpRpG8RTfWHw4tLIYq6IZANa2lhGvjNQNypJ_
1OwvgCA6XfwBrT8xzCZInin5TFP4eTLakhidgdTgxLajXtERX3REI89qv_D2Tvdpr2PR-Fg0L7jv
Sg7FU3wj8eHQSji0sra1zOhc373V9FvSj-r95QCga0yMOoGlPhJ7oRolYiU-v2ForVtj0fzlFy6y
B7ehuDQNTmz5ZGLJdLZekbh2BRV_sZLX_aHAzsnAzkl5GMVTfCPxckyXRQltKbHKYG3w3tbyW9KP
_v3l4Q-oUiqJe8KtqDFqCli1DM2PADAzF9z1tednq7WsQysRb2BuWbGBpe2rE91H9K_XwYGkqGId
E9umehm504LbK1bysAEAGqs4W81PNYziKb6BeCmxCgDB44-L76GczqZYrOm3pB-1_8vFH9D6E8Ms
sAyutXT00PjRQ_PMtuqMfbELOLeZZ2n7quD2NvhaSya2g-XC5pnu017HovmxaF6RJYqn_Pri17aW
17aWpcQqklqTzs3Qj-r95QCg2ZBhZ9NnqH6CDK616IyFRBsNS-StJ74PABPdRxSzpEHJJ7Yimfzr
FR3xRUc0DlXLX8xlxEpe54cCOycDOycBQKzki7kMxVN8I-FlUSqLkhzTSGez97aW36p_1Oehhz_g
NSdGffxiiYvEa1KYP50B4OH7LwNAz5nuiXOAN0Zwe-Wvl-GJjZeVJdNuRteqVySe0by4tfxVRncB
bABAXr2Ks9X8sNNRPMXXHY-3MBxaAYDFGLzjQbvW-ZzfgOk_jUurf58b70fN-gIIOgboUiqJe2Jn
q4-O9XHZPjqXRUlNYU0oC25vWZTq_An5xEbDbjrr1EtKrAKAFNb_lto-fGrS_DHNpoXiKV4dP79R
tc-PSpp_NaNN_S3px915mM4WACC2vsAH0B2BAflz_NgorpeeHX3uxGeMr4r37Ppcenb08LHR2PpC
OltIZwux9QW00ZA-h4_Z24l8PXxsVP0o-Bhcx5tZuuSPU-XCNBp-5Punldb9tDbSj5r9hTRGMvMG
NNsTOxtiqw5AK94gNxR_BaDVUG4c0HUMjDrQr0idg-XSz6H66QgMtLW1mVrxp42vZt9PK611rxb2
o7q-GKDb8I--4IHY_kJocIpPt8s-dnb5irlMZ5dvug-Sm15-b97gurR9VfEGnRUAoiO__Q2YmQvu
usPzs5LgNrETtp-oiM9gEiLxTHTEZ_r9YiUvPw5TKZV0pF4zc8GyKBl8iUcIThz9nKnfvX37tqn4
trY2PuOKRAKAQ0OCJf2o2V_LsbHQ4FQ6W3DxPxg7QGeXDwDwkPW9in2RpUnxNnX6UH2xC32xC3LP
jTeHb7w5bPB3Ty_fdeROsOOwM9pN513r5RGCuz4suN3fb2rFu2t8Nft_WmltZLWkH3fpL-6UYROD
na1uRjMoq51qP_r8rAQALx6C9rkbRwGGT00CwOUXLh49BP9H8kf4X33981P5f85-YiL87fQ4b0yz
ic2O1hEYsJvRu9arLOoljQG63d_P36KV1v2xWtKPmv0FUO0aF39A608MWyW4vdN9ILi9yX-z2KXx
s4jmyy9cBIAri5O3v7qE-53u03vJh7-pxfjTy2cL1wc7XQ_a3QZjlllZMrGdqhf1M637abWqH-X7
yw0AT4cjX-nShSfGT7y0nOBASTYxdt5_ix3ynvbOox_An-23_97-G7cMrtdKPzL1u--LxW-9zhOP
_T5ykq0AMHxq8i_-870--L2Tcj_uP3z1e-JffOvZN4qP3rr9d973-8atN--qw_--jVtSrDS29NT-
9OXIf-f-fXzn9r9cK-3oxIOdBun88ks-OPFgp6nz3rh9C4u38-ZbmDoAeN-9H-zFz37iSL0_OtT1
qxs-dvV0-erGj3W_jgGunq5-_y8-9r7pffLRW7TSamRdz8MPX3nx9nvuuae9EwCm_6CpdmhVP2r2
18eeeOSl5cTT4YiLA5FNTQxTYgNN-gb2UeEHgCuLk-IHAGbmgjNzQc1-eYRgz5luXIfCF-ENzIOc
XZn45vOH-xD9RjaM3yqLUt3nbXxiO1gv0v6Wvzdvat1Vh4_NAsAPX3kRe8c9-9o-P5UXK-n5Dai1
YozBfmxQlvSjfn85AGg2MdjZ0KhD7IvsVIq36dPkyuJkWZTKooRErqWjh8YBYML77cDOyUYO3iCd
5cdhZ2TJ3BP1IpFMCdGMmH6HVisR765fMRJjlSzpR-3_cgDQ_hPD7ARTv4GdsJE3K_gMAGtby87S
2aqJ7WC9SCRTQjQjppuQ0Zb0o35-efgnXXNi1NfzbNSoDc2PSEm5zs9KADAzp-QzrW0tHz00rknn
35z5xU-OvxcNDnRmxSvmMvKJbTejLawXiWRKP3zlxY7AAGIaNRbNT3i-zT4On5os5jIT3UfESr7x
nxMredgAgN1XwW1ZP2r2F0CVSA4AupRK4p7Y2erudgaLXVeMV6NWE81HD40rGF1rA7ui2UI6KyY2
GnbT2Ui91GOP1IKa3zAXP923e8zhY6PFXOaHr7zIGL0S8Qbm7vQjdsHS9lWrGK0JBIXOz1Z72ZJ_
1O8vBwCtOTHqYzS_wciKnD16aFwB31pa21oOh1YaP6yCzpF4JjpS5zSyamJbWy9LBo_OhsIXh9B4
d72yOEk0bE5tXRENRh4aEoyE-fCVFzsCA4zOTH2xCxuh5_UdaiGj5UJcrG0to42Gtf2o2V8A1Tnh
AKBrTYxIPAOQgW0wupqXIr_mdssMfb8OnRUye97OLp8lE9vCCY8HtE_nl89qIjs9ruEnOa52f7-8
4830tQZfePjYaDGX_eErLyoY-a0nvv8wXJ7oPrK0fRU97E5yo7O8DRvpR53_AoA2AEhnC-6DB2Lr
C3TDSCQSqRkUGpxKZwse_WdKColEIjWP2gAgnS1QIkgkEqnZ9P8D5RN5nQA_aZgAAAAQdEVYdExv
ZGVQTkcAMjAxMTAyMjHjWbbBAAAAAElFTkSuQmCC
:: main.lua
--[[pod_format="raw",created="2024-05-03 13:26:10",modified="2024-09-24 22:34:05",revision=7666]]
include './util.lua'
include './character.lua'
include './moodles.lua'
include './inventory.lua'
include './static_interactable.lua'
include './containers.lua'
include './context_menu.lua'
include './rooms.lua'

_debug_message = ""


function _init()
	poke4(0x5000, get(fetch(pwd().."/pal/0.pal")))
	poke(0x4000,get(fetch"/system/fonts/lil_mono.font"))
	_w_w, _w_h = 480,270
	_m_x, _m_y, _m_b, _m_w_x, _m_w_y, _scroll_inv, _scroll_cont = 0,0,0,0,0,0,0
	_c_x = 0
	_c_y = 0
	_tile_size = 16
	_buffer_time = 0.3
	_max_items = 5
	_mlb_last_pressed = nil
	_mrb_last_pressed = nil
	_mmb_last_pressed = nil
	_mwyb_last_pressed = nil
	_coroutines = {}
	c=man:new({})
	_blood_spatter_update = nil
	_blood_splatters = {}
	_redraw_list = {}
	m={moodles={}}
	_flagged_tiles = {}
	i=inventory:new({contents = {}})
	_cm=context_menu:new({})
	_containers = {}
	_rooms = {}
	_discovered_containers = {}
	_fog={}
	init_containers()
	init_rooms()
end

function _draw()
	_c_x = c.x + (_w_w/2)
	_c_y = (c.y + (_w_h/2)) - 270
	_c_y_b = (c.y + (_w_h/2))
	cls(0)
	camera(c.x - (_w_w/2),c.y - (_w_h/2))
	map()
	draw_fow()
	display_moodles(m,c)
	update_interactables(i, c)
	draw_blood_splatter()
	animate_character(c)
	redraw_tiles(c)
	update_inventory(i)
	draw_context_menu()
	draw_border()
	debug()
	update_coroutines()
end

function update_coroutines()
	for c in all(_coroutines) do
		if costatus(c) then
			coresume(c)
    	else
    		del(_coroutines,c)
    	end
    end
end

function _update()
	update_mouse_input()
	move_man(c)
	scan_character_area(c)
	execute_context_menu_option(c, 25)
	update_character_vitals(c)
end

function update_mouse_input()
	_m_x, _m_y, _m_b, _m_w_x, _m_w_y = mouse()
	_m_x = _m_x + (_c_x - _w_w)
	_m_y = _m_y + _c_y
	if ((_m_b&1>0) and _mlb_last_pressed == nil) 
	or ((_m_b&1>0) and time_since(_mlb_last_pressed,time(),false) > _buffer_time) then
		_mlb_last_pressed = time()
		_m_l_b=true
	else
		_m_l_b=false
	end
	if ((_m_b&2>0) and _mrb_last_pressed == nil) 
	or ((_m_b&2>0) and time_since(_mrb_last_pressed,time(),false) > _buffer_time) then
		_mrb_last_pressed = time()
		_m_r_b=true
	else
		_m_r_b=false
	end
	if ((_m_w_y>0 or _m_w_y<0) and _mwyb_last_pressed == nil) 
	or ((_m_w_y>0 or _m_w_y<0) and time_since(_mwyb_last_pressed,time(),false) > _buffer_time) then
		_mrb_last_pressed = time()
		local _m_w_y = _m_w_y * -1
		_m_w_y_b = true
	else
		_m_w_y_b = false
	end
end

function debug()
--	circfill(c.select_point.x, c.select_point.y,2)
--	rect(c.d_x1, c.d_y1, c.d_x2, c.d_y2, 2)
	print("debug_message: " .. _debug_message
			.. " cpu1: " .. stat(1)
			.. " cpu2: " .. stat(2), _c_x-475, _c_y+258, 31)
end
:: moodles.lua
--[[pod_format="raw",created="2024-05-07 21:40:35",modified="2024-09-24 22:34:05",revision=6502]]
include './types.lua'
include './util.lua'

moodle=entity:new({
	moodle = "none",
	sprite = 0,
	x = 0,
	y = 0,
})

function get_index(moodles, name)
	for i, m in ipairs(moodles) do
		if m.moodle == name then
			return i
		end
	end
	return -1
end

-- moodle entity, name, value, sprite 1, 2, 3, 4, lower check
function generate_moodle(m, n, v, s1, s2, s3, s4, lc)
	index = get_index(m.moodles, n)
	current_moodle = nil
	new_sprite = -1
	if index != -1 then
		current_moodle = m.moodles[index]
	end
	if lc then
		if v >= 20 and v < 30 then
			new_sprite = s1
		elseif v >= 30 and v < 50 then
			new_sprite = s2
		elseif v >= 50 and v < 70 then
			new_sprite = s3
		elseif v >= 70 then
			new_sprite = s4
		end
	else
		if v < 70 and v >= 50 then
			new_sprite = s1
		elseif v < 50 and v >= 30 then
			new_sprite = s2
		elseif v < 30 and v >= 10 then
			new_sprite = s3
		elseif v < 10 then
			new_sprite = s4
		end
	end
	if current_moodle == nil and new_sprite != nil then
		return moodle:new({moodle=n,sprite=new_sprite})
	elseif current_moodle != nil and current_moodle.sprite != new_sprite then
		del(m.moodles,current_moodle)
		return moodle:new({moodle=n,sprite=new_sprite})
	elseif current_moodle != nil and new_sprite == nil then
		del(m.moodles,current_moodle)
		return nil
	elseif current_moodle != nil and current_moodle.sprite == new_sprite then
		del(m.moodles,current_moodle)
		return moodle:new({moodle=n,sprite=new_sprite})
	end
	return nil
end

--moodle object, character
function display_moodles(m,c)
	m.moodles = {}
	h = generate_moodle(
		m, 
		"health", 
		c.health, 
		moodle_sprites.health_1, 
		moodle_sprites.health_2, 
		moodle_sprites.health_3, 
		moodle_sprites.health_4, 
		false)
	if h.sprite > 0 then
		add(m.moodles,h)
	end

	wh = generate_moodle(
		m, 
		"wound_health", 
		c.wound_health, 
		moodle_sprites.wound_health_1, 
		moodle_sprites.wound_health_2, 
		moodle_sprites.wound_health_3, 
		moodle_sprites.wound_health_4,
		false)
	if wh.sprite > 0 then
		add(m.moodles,wh)
	end

	p = generate_moodle(
		m, 
		"pain", 
		c.pain, 
		moodle_sprites.pain_1, 
		moodle_sprites.pain_2, 
		moodle_sprites.pain_3, 
		moodle_sprites.pain_4,
		true)
	if p.sprite > 0 then
		add(m.moodles,p)
	end

	hu = generate_moodle(
		m, 
		"hunger", 
		c.hunger, 
		moodle_sprites.hunger_1, 
		moodle_sprites.hunger_2, 
		moodle_sprites.hunger_3, 
		moodle_sprites.hunger_4,
		true)
	if hu.sprite > 0 then
		add(m.moodles,hu)
	end

	t = generate_moodle(
		m, 
		"thirst", 
		c.thirst, 
		moodle_sprites.thirst_1, 
		moodle_sprites.thirst_2, 
		moodle_sprites.thirst_3, 
		moodle_sprites.thirst_4,
		true)
	if t.sprite > 0 then
		add(m.moodles,t)
	end

	d = generate_moodle(
		m, 
		"delirium",
		c.delirium,
		moodle_sprites.delirium_1, 
		moodle_sprites.delirium_2, 
		moodle_sprites.delirium_3, 
		moodle_sprites.delirium_4,
		true)
	if d.sprite > 0 then
		add(m.moodles,d)
	end
	
	current_y = 4
	for i, moodle in pairs(m.moodles) do
		spr(moodle.sprite, _c_x-20, _c_y + current_y)
		current_y += 20
	end
end

moodle_sprites={
	health_1 = (gfx_offset.gfx_3+40),
	health_2 = (gfx_offset.gfx_3+41),
	health_3 = (gfx_offset.gfx_3+42),
	health_4 = (gfx_offset.gfx_3+43),
	wound_health_1 = (gfx_offset.gfx_3+32),
	wound_health_2 = (gfx_offset.gfx_3+33),
	wound_health_3 = (gfx_offset.gfx_3+34),
	wound_health_4 = (gfx_offset.gfx_3+35),
	pain_1 = (gfx_offset.gfx_3+1),
	pain_2 = (gfx_offset.gfx_3+2),
	pain_3 = (gfx_offset.gfx_3+3),
	pain_4 = (gfx_offset.gfx_3+4),
	delirium_1 = (gfx_offset.gfx_3+8),
	delirium_2 = (gfx_offset.gfx_3+9),
	delirium_3 = (gfx_offset.gfx_3+10),
	delirium_4 = (gfx_offset.gfx_3+11),
	hunger_1 = (gfx_offset.gfx_3+24),
	hunger_2 = (gfx_offset.gfx_3+25),
	hunger_3 = (gfx_offset.gfx_3+26),
	hunger_4 = (gfx_offset.gfx_3+27),
	thirst_1 = (gfx_offset.gfx_3+16),
	thirst_2 = (gfx_offset.gfx_3+17),
	thirst_3 = (gfx_offset.gfx_3+18),
	thirst_4 = (gfx_offset.gfx_3+19),
}
:: rooms.lua
--[[pod_format="raw",created="2024-07-07 21:47:51",modified="2024-09-24 22:34:05",revision=1928]]
include './types.lua'
include './util.lua'

room=entity:new({
	s_x = 0,
	s_y = 0,
	e_x = 0,
	e_y = 0,
	is_discovered = false,
	replacement_sprite = 0,
	health_taken = 0,
	is_unlocked = true,
})

function draw_fow()
	for i, r in pairs(_rooms) do
		if r.is_discovered == false then
			if _c_x > r.s_x and _c_y_b > r.s_y then
				--if _c_x > r.e_x and _c_y_b > r.e_y then --NOT SURE WHAT THIS WAS FOR!
																	--BUT IT WAS BREAKING WHEN MC
																	--WENT TO TOP OF MAP
					rectfill(r.s_x, r.s_y, r.e_x, r.e_y, 0)
				--else
					if _c_x > r.e_x and _c_y_b < r.e_y then
						rectfill(r.s_x, r.s_y, r.e_x, _c_y_b, 0)
					elseif _c_x < r.e_x and _c_y_b > r.e_y then
						rectfill(r.s_x, r.s_y, _c_x, r.e_y, 0)
					end
				--end
			end
		end
	end
end

function unlock_inner_door(ft,rep_tile)
	mset(ft.tile_co.x, ft.tile_co.y, rep_tile)
	mset(ft.tile_co.x, ft.tile_co.y+1, rep_tile)
end

function unlock_normal_door(room, ft)
	draw_info_text("unlock called", 10)
	mset(ft.tile_co.x, ft.tile_co.y, room.replacement_sprite)
	mset(ft.tile_co.x, ft.tile_co.y+1, room.replacement_sprite)
	room.is_discovered=true
end

function unlock_heavy_door(room, ft)
	draw_info_text("heavy called", 5)
	mset(ft.tile_co.x, ft.tile_co.y, room.replacement_sprite)
	mset(ft.tile_co.x, ft.tile_co.y+1, room.replacement_sprite)
	room.is_discovered=true
end

function init_rooms()
	_rooms["19_10"] = room:new({
		s_x = 272,
		s_y = 0,
		e_x = 448+15,
		e_y = 144+15,
		replacement_sprite = 11,
		is_discovered = false,
		call_unlock = unlock_normal_door
	})
	_rooms["37_10"] = room:new({
		s_x = 464,
		s_y = 0,
		e_x = 688+15,
		e_y = 144+15,
		replacement_sprite = 11,
		is_discovered = false,
		call_unlock = unlock_heavy_door
	})
end
:: static_interactable.lua
--[[pod_format="raw",created="2024-05-23 20:57:56",modified="2024-09-24 22:34:05",revision=6077]]
include './types.lua'
include './util.lua'
include './containers.lua'
include './rooms.lua'


function update_interactables(inv, c)
	local is_cont_in_range = false
	for i,ft in pairs(_flagged_tiles) do
		if fget_precalc(ft.flags,1) == true then
			local container_co = tostr(ft.tile_co.x) .. "_" .. tostr(ft.tile_co.y)
			local container_obj = _containers[container_co]
			if container_obj != nil then
				is_cont_in_range = true
				container_obj.in_range = true
				if inv.selected_container == 1 or inv.selected_container == container_co then
					spr(
						container_obj.in_range_sprite, 
						(flr(ft.tile_co.x*_tile_size)) + container_obj.in_range_sprite_adjustment.x,
						(flr(ft.tile_co.y*_tile_size)) + container_obj.in_range_sprite_adjustment.y
					)
				end
				if _discovered_containers[container_co] == nil then
					_discovered_containers[container_co] = container_obj
				else
					_discovered_containers[container_co].in_range = true
				end
			end
		end
		if fget_precalc(ft.flags,2) == true then
			if keyp("e") then
				local room_key = ft.tile_co.x .. "_" .. ft.tile_co.y
				local room = _rooms[room_key]
				if room != nil then
					room.call_unlock(room, ft)
				else
					replacement_tile = mget(ft.tile_co.x, ft.tile_co.y-1)
					unlock_inner_door(ft, replacement_tile) 
				end
			end
		end
		if fget_precalc(ft.flags,3) == true then
			if (coalesce(c.d_y2, 0)-16) < (ft.tile_co.y*16) then
				add(_redraw_list, ft)
			end
		end	
	end
	if not is_cont_in_range then
		for i, dc in pairs(_discovered_containers) do
			dc.in_range = false
		end
	end
	_flagged_tiles = {}
end

function redraw_tiles(c)
	for i, ft in ipairs(_redraw_list) do
		palt(48, true)
		spr(ft.sprite, ft.tile_co.x*16, ft.tile_co.y*16)
		pal()
		poke4(0x5000, get(fetch(pwd().."/pal/0.pal")))
	end
	_redraw_list={}
end
:: types.lua
--[[pod_format="raw",created="2024-05-06 22:22:02",modified="2024-09-24 22:34:05",revision=6394]]
class={
	new=
		function(self,tbl)
			tbl=tbl or {}
			setmetatable(tbl, {
				__index=self
				}
			)
			return tbl
		end,
}

entity=class:new({
	x=0,
	y=0,
})

container_slot=entity:new({
	container_id = 1,
	quantity = 0,
	item = nil,
	starting_x = 0,
	starting_y = 0,
	ending_x = 0,
	ending_y = 0,
})

object_type={
	item=1,
}

button={
	up=4,
	down=8,
	left=1,
	right=2,
	down_right=10,
	up_left=5,
	up_right=6,
	down_left=9,
	none=0
}

direction={
	up = 1,
	down = 2,
	left = 3,
	right = 4
}
:: util.lua
--[[pod_format="raw",created="2024-05-03 22:03:54",modified="2024-09-24 22:34:05",revision=6728]]

--object, start frame,
--num frames, speed, flip
function animate_sprite(o, sf, nf, sp, fl)
	if(not o.a_la) o.a_la = sf
	if(not o.a_ct) o.a_ct = 0
	if(not o.a_st) o.a_st = 0
	if(not o.fl) o.fl = false
	o.a_ct += 1
	if o.a_ct % (60/(sp*o.anim_spd)) == 0 then
	 o.a_st += 1
	 if(o.a_st == nf) o.a_st = 0
	elseif o.a_la != sf then
	o.a_st = 0
	end

	o.a_fr = sf + o.a_st
	spr(o.a_fr, o.x, o.y, fl)
	o.a_la = sf
end

-- object, radius, flag
function collide(o,f)
	f = f or 0
	local p_adj = 0
	local x1 = (c.x+6)/_tile_size
	local y1 = (c.y+10)/_tile_size
	local x2 = ((c.x+c.max_width)-6)/_tile_size
	local y2 = ((c.y+c.max_height))/_tile_size
	local ax1 = ((c.x+6)-p_adj)/_tile_size
	local ax2 = (((c.x+c.max_width)-6)+p_adj)/_tile_size
	local ay1 = ((c.y+10)-p_adj)/_tile_size
	local ay2 = (((c.y+c.max_height))+p_adj)/_tile_size
	c.d_x1 = x1*_tile_size
	c.d_y1 = y1*_tile_size
	c.d_x2 = x2*_tile_size
	c.d_y2 = y2*_tile_size
	c1 = fget2(mget(x1, y1), f)
	c2 = fget2(mget(x1, y2), f)
	c3 = fget2(mget(x2, y2), f)
	c4 = fget2(mget(x2, y1), f)
	c5 = fget2(mget(x1, y2-1), f)
	c6 = fget2(mget(x2, y2-1), f)
	down_right = fget2(mget(ax2, ay2), f)
	down_left = fget2(mget(ax1, ay2), f)
	up_left = fget2(mget(ax1, ay1), f)
	up_right = fget2(mget(ax2, ay1), f)
	if (c1 or c2 or c3 or c4 or c5 or c6) then
		local has_adj = false
		local adj_val = 0.6
		if down_right == false then
			if c.i_dir == direction.down then
				c.x+=adj_val
				has_adj = true
			elseif c.i_dir == direction.right then
				c.y+=adj_val
				has_adj = true
			end
		end
		if down_left == false and has_adj == false then
			if c.i_dir == direction.down then
				c.x-=adj_val
				has_adj = true
			elseif c.i_dir == direction.left then
				c.y+=adj_val
				has_adj = true
			end
		end
		if up_left == false and has_adj == false then
			if c.i_dir == direction.up then
				c.x-=adj_val
				has_adj = true
			elseif c.i_dir == direction.left then
				c.y-=adj_val
				has_adj = true
			end
		end
		if up_right == false and has_adj == false then
			if c.i_dir == direction.up then
				c.x+=adj_val
				has_adj = true
			elseif c.i_dir == direction.right then
				c.y-=adj_val
				has_adj = true
			end
		end
		return true
	end
	return false
end

function coalesce(a, b)
	if a == nil then
		return b
	else
		return a
	end
end

function time_since(from, to, f)
	if f == true then
		return flr(to) - flr(from)
	else
		return to - from 
	end
end

--tile sprite number, flag
function fget2(n, f)
	if f then
		return (fget(n)>>f)&1==1
	else
		return fget(n)
	end
end

-- pre calculated flag, flag
function fget_precalc(pcf, f)
	return (pcf>>f)&1==1	
end

function table_length(t)
	local length = 0
	for i, c in pairs(t) do
		length+=1
	end
	return length
end

function draw_border()
	rect(_c_x-479, _c_y, _c_x-1, _c_y+269, 17)
	rect(_c_x-478, _c_y+1, _c_x-2, _c_y+268, 0)
	rect(_c_x-477, _c_y+2, _c_x-3, _c_y+267, 33)
end

function draw_info_text(t, d)
	local func = cocreate(function()
		local l = #t
		local n_px = l*5 
		local x_offset = (480-n_px)/2
		for i=1,(d*60) do
			local x = (_c_x-480)+x_offset
			rectfill(x-1, _c_y+239, x+n_px+1, _c_y+248, 0)
			print(t, x, _c_y+240, 33)	
			yield()
		end
	end)
	add(_coroutines, func)
end

gfx_offset={
	gfx_0=0,
	gfx_1=256,
	gfx_2=512,
	gfx_3=768
}
:: .info.pod
b64$LS1bW3BvZCxtb2RpZmllZD0iMjAyNC0wOS0yNCAyMjozNDowNiIsaWNvbj11c2VyZGF0YSgi
dTgiLDE2LDE2LCIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDEwMDAwMDAwMDAw
MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAw
MTAwMGQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMGQwMDAwMGQwMDAwMDAwMDAwMDAwMDAw
MDAwMDAwMGQwMTAxMGQwMDBkMDAwMDAwMDAwMDAwMDAwMDAwMGQwMDAwMGQwMTBkMDAwMDAwMDAw
MDAwMDAwMDAwMDAwMDAwMGQwMDBkMDEwMDAwMGQwMDAwMDAwMDAwMDAwMDAwMDAwMDBkMDAwMTAx
MGQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMGQwMTAwMGQwMDAwMDAwMDAwMDAwMDAwMDAw
MDAwMGQwMDAxMGQwMDAwMGQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMGQwMTAxMGQwMDAwMDAwMDAw
MDAwMDAwMDAwMDAwMGQwMDAwMGQwMTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMGQwMDAwMDEw
MDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAxMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAw
MDAwMDAwMDAwMCIpLGNyZWF0ZWQ9IjIwMjQtMDUtMDMgMTM6NDg6NDciLGF1dGhvcj0iQmF1bGVy
cyIsbm90ZXM9IlVuZmluaXNoZWQsIHBsZWFzZSBpZ25vcmUuIixydW50aW1lPTExLHRpdGxlPSJH
dXQgV291bmQgKFdvcmtpbmcgVGl0bGUpIix2ZXJzaW9uPSIwLjAuOSIsd29ya3NwYWNlcz17e2xv
Y2F0aW9uPSJtYWluLmx1YSMxMDMiLHdvcmtzcGFjZV9pbmRleD0xfSx7bG9jYXRpb249ImNoYXJh
Y3Rlci5sdWEjMzA1Iix3b3Jrc3BhY2VfaW5kZXg9MX0se2xvY2F0aW9uPSJzdGF0aWNfaW50ZXJh
Y3RhYmxlLmx1YSMyNiIsd29ya3NwYWNlX2luZGV4PTF9LHtsb2NhdGlvbj0iaW52ZW50b3J5Lmx1
YSMxMTMiLHdvcmtzcGFjZV9pbmRleD0xfSx7bG9jYXRpb249ImNvbnRleHRfbWVudS5sdWEjNjYi
LHdvcmtzcGFjZV9pbmRleD0xfSx7bG9jYXRpb249Im1vb2RsZXMubHVhIzExNyIsd29ya3NwYWNl
X2luZGV4PTF9LHtsb2NhdGlvbj0idHlwZXMubHVhIzI4Iix3b3Jrc3BhY2VfaW5kZXg9MX0se2xv
Y2F0aW9uPSJ1dGlsLmx1YSMzNyIsd29ya3NwYWNlX2luZGV4PTF9LHtsb2NhdGlvbj0iaXRlbXMu
bHVhIzI2NSIsd29ya3NwYWNlX2luZGV4PTF9LHtsb2NhdGlvbj0iY29udGFpbmVycy5sdWEjMTQy
Iix3b3Jrc3BhY2VfaW5kZXg9MX0se2xvY2F0aW9uPSJyb29tcy5sdWEjNjUiLHdvcmtzcGFjZV9p
bmRleD0xfSx7bG9jYXRpb249ImdmeC8xLmdmeCIsd29ya3NwYWNlX2luZGV4PTJ9LHtsb2NhdGlv
bj0iZ2Z4LzIuZ2Z4Iix3b3Jrc3BhY2VfaW5kZXg9Mn0se2xvY2F0aW9uPSJnZngvMC5nZngiLHdv
cmtzcGFjZV9pbmRleD0yfSx7bG9jYXRpb249ImdmeC8zLmdmeCIsd29ya3NwYWNlX2luZGV4PTJ9
LHtsb2NhdGlvbj0ibWFwLzAubWFwIix3b3Jrc3BhY2VfaW5kZXg9M30se2xvY2F0aW9uPSJzZngv
MC5zZngiLHdvcmtzcGFjZV9pbmRleD00fSx7bG9jYXRpb249InBhbC8wLnBhbCIsd29ya3NwYWNl
X2luZGV4PTd9fV1d
:: [eoc]
