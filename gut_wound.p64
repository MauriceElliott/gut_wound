picotron cartridge // www.picotron.net
version 2

:: gfx/
:: gfx/0.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA1LTAzIDEzOjI2OjEwIixtb2RpZmllZD0iMjAyNC0w
OS0xMyAyMzoxNzo1NiIscmV2aXNpb249ODI1Nl1dbHo0AFcrAACX3AAA8R57WzBdPXtibXA9cHh1
AEMgEBAE8PAsZmxhZ3M9MCxwYW5feD0yLjA3MTQyODUGABE2FgB2eT0tMC43MRkAqjMsem9vbT04
fSxOAEJ-MX8hBADyCx8hAS8RHyFvMS8hPzAfIU8xDxAPIA8wfyE-CgAzMQ8wIwCRHzEPEB8gLzEf
KQARDx8AMD8xjwoAIiAvLQAEKwAAEwAXH0AAAzEAISAPFACRLzF-IQ8xLyA-CAA7DxBPRQAbf0AA
ABAAJB8gOgADBwEfMQcBMXD-EBMPEm8QBAARHwQAEV8IAFAPEv8QAAUAYQUPEu8QHwQAkT8QDxKf
EB8SLyYA3w8SfxAfEk8QHxL-ECuZATlVHzBfMZ8EAPMDTzGvMD8xvzAfMf8wAS8xrzBPFQDRLzHP
MA8xLzAPMc8wPyUAABQAv-8wAQ8xvzBPMX8wlAA5wf8QFB8xXxAfMW8QDwQAPP8QEhEAHxoiAAwv
XxCSADvoSQ8g3xAvIN8QDyD-EAsNAB86aQA58RgADxAADg8gDg2PMQ4QHh2MEB4NDg2MTh2MDg0O
DR4NjA0ODQ4tjG0IAAAaAA8IAC0P3QI6cBEQ-yEB3zF7AzG-IQ8IAF8PIZ8xDwwAPAJcAITfMf8h
Ai8xv6ADHzXDADFwDyAPED8xHwIEYyAPEB8xPwoAQA8xHzCJBBECbQQAGwAjMC-BBAAOABEvqgQE
NQABRwQzMA8gLwBALxAfIEAAA5YEAQ4ANS8wj1gAABIACVoAA4cEEyAxAAEnAADHBBIfmwQUIEMA
In8hFgBZHzAPMY9PAAImAEQPMA8xTAADEgAP1QRDHjErBg_EATYRL98AA78AYDEvMB8xjxYAQTAf
MZ8tATAfMR8PAUMhLzEvfQEAugVgHyA-EC8gGgAANQEwryAfOgAFJgACyQQRLyQAAXEBAe4FEo8a
AAAvAQhSAAFhAQBQABFPxgERD3gAACYGAjYABioAEz86AAAqAE9PMX8gFAE5L-8wYwE6sP8gFx8w
zyA-MM8gCAAQDxwBITCPtQIgXzC9AlNPIC8wDxgAWw8gLzA-EAAXTywAE48YACbPIFQAP-8gF7AA
OQJvAQ8EAAc2-zEADQAPIQADFgINAA9CAKgfAWkDPQYEACaPMQwADxAAsxNvBAAP7AQ6LyER4QZZ
fwH-IAD-MQD2ATkR3xQGEb_rBBevBgBCzzEPIBwAF88GABEfNwsC4gYyPyAvcAYhIC9dBQL2BgI1
BREffgFRTzEfEH8XBSLvMYgBFO8OAAMMAA-AAj0EWgARLwYAcq8g-zEMDxDEBROv4Asy3zEPFwAK
8AAQfwkMICBv3ABBIK8xHycAL_8xoAA5Ee9SAAKABwBsAHAPEF8xHyBPswYDqwYRTz4BEj9LBgEq
ACQfIB4AMi8wH14BITA-QAAjDzHZAAEMABFf6AcAFwQCLgAgPxAmABAvlAEAeggxMV8Qngsy-zEy
jAEPPgY7EgDdAQ8EAAkoAA4CAEjwAg4AAgAQ3uMKIs4tDQDPDgAuDR4dgD4NDg1wCgAPA8oAHznK
ADMWAbIADgQAXx8QDz8PBAAGNv8-Ag0ADgQAFx9JAA4EADb-IAINAA8EAP8CD_cBWAytAlsADvAA
DgIAArACU84dHg0uEgAAPw0gPoARAB9wCgALD8oAKw_VEUnP-yEw-zFA-zAg-zEwEQw7IGlPyARh
ED8xLyBPOAYxHyAfHgZ-HzE-IP8xSsYAOsAxYj8hLzFPID8xPyFwAABEBTY-IQ9yAI8wvzE-MP8x
Ot0FTzlfMA-dBRVf2QUAdw0THyMHAQgAHDDVBRFvlwYhHzF4BDQxDzDTBVEPMU8wD9wQIC8wkxE-
-zFEyQA5EICpBACUACNwTxADDxIAaw6JAg-iCisPBAD-qiT-IAgGHzgPAjEiHyBuAhKAYAA-TxBw
EgBrDusCDxoGdoY6AP8gQP8QcIIBHzBxCa3BAf8QAP8wAZ8RDyAPBACRHzAvES8gHxEfEABTHxEf
MA8MADU-EQ8UABMfDAA5LxEfFAAAOAASLxgAEDAYAH6-ER8w3xEPSQcPLwGrsV8RLxBPER8wTxE-
CACSPxEvEB8iDxA-PwFhED8iDxAvEwEAGAAgHyAcAAJLAQEoAACkAAEUABMPFABQDyIPID9jAAEU
AA8vAVo2-xACDQAP8wABLwMfbQEKFR8MAAoEAALZAx8POADiD64HPaAQDh8gjzEfIA4QAxlwDQ4Q
Dh2MHQ0AH4wMADUPzwQ5A8sFBFMDEIAqAVUfPw8QgFMBABQAEE8QAAZDASOALwkAcA8ggG6ADxBJ
DE8ODYANCAArD4kBOQCBAQCLAQJVEwA8AS6PMUkBDwwALg6KAQ8qBUkvIA8bBAoWAA0ADyEAAxIS
5AEPBAADFx8MAA_MBQMfYCoDOxIf1QDxCz8PEAAeDyAeHQ4NTg8-Tg0OHR4NHgwODB4NEwAfDBIA
XA_GAjoxDzDfUwcCXwcCmwcnHyAMAAMYADUPIAEFAAMOAAQ3ABO-JwCWsQ4fMN4d3v0B0QEPBABj
D08JPB8PUwcAD3sHAwyfBwi7BwjTBwTnBwT3BxHfBAAv-zA6Ab4PKAdcDzgA-wpf7yAfEL-4Dzoz
fz8vkgARb4EFEz9sAA8YACcAagUKBAAEJAAEEAAEBAAEMgATzyAAHt8YAQ0EACbfEBQIDAQADjwB
D6wLAA89ATkWgFoAAAQAEYCPIm8ODQ6ADg0IAEs-bYBt4wM5AncCQi8Qfz-LABE-oQEvbz8YADMK
BAAEJAAGEgADBAABMgAxzxAfLCQfDwQACgIkAA-vAQYPRwIOP-8gAAcCOTf-P2nIAEc-DxB-_wIV
bwwAE08YABNfFAARXzcDEU-KABNvCAA1DyBfHAAAUgEHOwMfILMAOxRglwACBAA3jz8-vwAVTwwA
NG8-X9MAIyBfEgARH5QRIn8-sQAST88AAx4AJl8-sQAA-QAPtQA6IhAUEygTTxMoNU8QDwgA4f8Q
GQ8S3xAfEn8QDxI-CAACEigTfxQAEd8SKB8jFhg7j68PMa8h-zElVgA7gVAfMd8hTzGvCCpArzFP
IUkfP-8xQAcMWy8-D9EbYwLvFw8gAOgONAMPGBOlcDAAvyEfEW_1IfIDEQ8xLyEfEX8hDxE-MR8R
LyEPuCwBDgABzSEiES8oAGAhLzEfER-jISQRPy4AZzEPER8xHw4AAFQoEy8MAE8-MQ8hNAG2Eg-V
KA8EAAcPIADsD_kBOnEhXh8xryFPbi8xTyGvZgUfTiIGkB8Q3R48QaAPMe9xBj--MSBaADkxXzGf
xAZznzFfIb8xP8gGH6CfDjsvDxCNBQkPIABqJDAfCgAPHgA5BGAqLxAPHgAbARoADx4AIAUaAA8e
ABwFFgAEBACPbyCfME8grzAAAjkAEQYijzE1BlHPMR8Rv2sxB3UADwQA-yAv-zB7Ez0GFAIPBAAB
DyAAbg3UAg8eABgAMwEfHx4AKA4iAA8eABsOIgAPHgAbDCIAf58wXyCvME8HBjoxnyFfYwdxXyGf
MT8hvwUGH67CBk8PDAqvAc4uJp8Q2C4ABiV7TyEfEQ8hDxYAXT8hHxEfFgAAcwsdLxYAAT4tA3UL
DhwAAV4AAX8LDmYABIsLDTYAA5ULD04AAAKhCwMYAA-iJzlBXyCfMTI0IBAPqSwCNwEXMeEuACAm
ARAAMm8xD2omA_gsEl8KAAGvLUAPIE8xhjICMzkBmhIyIB8wGgACLgARH8gxFC8SAAJOBCIwD_4y
AxYAIx8wgTkjMA8SAABGMwCcMwIOAAFiAAMMAAC0ABZfOAABuAAVT1gAER8sAD8-MB_NLzoCry4G
tS4THwYAI78xNgEHCgARrwoAFR8KAAHMASQgnxYABQwAAeQzISCPDAAAJjQEDAABFgEBNS4CPAAh
LzGCAQPgABE-DgAzPzA-FigPrQM6ERD6BxcvBAABXwEFDgATL_0EAWsoJiEvBAADnTQGBAACrQAJ
EgACxQInIB8UAC8fMUwAlw9pATsnAB9TAQNXASowLxAACbkAF18MAAOjAC8hLxAACg9AAHsPQQFO
A9oBBwQAAbwCB4EAIA8hvAIK-AEDQysItwACTAAHFAAvLzFMAJ0Pwge6DwQA-woOEAgP6QG7IyAA
iQUeMAQAAOkCAEwjDzoAtw-OATkDWQAiEH-fBgIOAA8SABQLMgshMB_TBAIEAB8fGAAEBQQADx4A
KB8fHAAQBhIADlwADyAADQ5YAAYEABcvDAAPBAAfDvMPD4Y8rzYBTxEPAAgEAGhPEa8xTxHNAQYE
AAAYABKfHgAFFAANOgAHEgAIOgAvrzFEAT0PBAB8DvoABwQANhIPEQ0ADgQAkQIODxEfGg4PMMIg
EBIFACEPGn8OIBoN5xnxAxI-IT8aPyEvEU8hPxovIS8RXxAAkA8RfyEfGv8hApMscjgfEA84PxAI
AJMvEA84DxAfOA8QAAQMAAU_CB8yhgEyDxoMOA9MANEPAgM5BlYABXAALyEvMwwZD0AArA9OAUcP
7AstD4QM-x4GBwUPBAD-pC--EA8CUQ9-CxAPOgD-SiOvECYAI68QEgAOnBQPdjh1H0_9CgIgDzDF
IDNPIX_pCVBPIQ8RT3c3BQoAAiQAIH8RDQUR30QAUN8hHzHPGwUQMKYZIZ8hIwUQIGwMEJ9vIxAw
vyAiDxEUAAIMAADsFSSvESYAT78wPzHASTsQEoQ_DwQAEiAgP40WLT8PCAAuHzA9Fw8ECv8lBwQA
D0wXAT--EADzCf8LBy0BAxYXLzAvQQFVD5oJxQ9MAAAHUwEABAAPvAIBP-8QAcQHT2hPEK8xTxAS
AAecBQIcAAcSAA84AIkPLAE5EK9UAA8EACYPjAA7YP8xDR8hz6UTAwYAEG9GAhIaBAAAe1IQXwMB
IiEfcVc0Gg8wHAAgDxoUADM-MS8eACE-MRwAFDAeAAI_ADMvMT8gAAHdHQ1AAAANHRUvIgAB9gIN
RAABKxQFJgAAzUQPSAABBGgAHw8pHjpB-zEBH6cnNQ8wzwYAFx_hABFvEAAAgAgSXxoABZcAAKMA
E08eADsvMD84AAHBAAMWAF9PIT8wLz4AAAI6VAJAAAEeHw9CAAAoDyAkAACCCA5IABMvFgAvTyFI
Hz0wnzFf5h4BcwQxLxB-CgAAXgoGdiABywQHdiAhLzF9BwLkHwGwUwDCAAJsIADkRhFPDgACyFMC
fiATLzgAAOAAIh8wDAACWgAjHzApBQKJBwN_AAE2AQGeUwMoAABmASQgLyAAFjBkABFfkU4CXwIC
GgAkDyCyHxE-KAAPLAE5AFwAIt8xBgAAoAATzwYAASABSSAPEL8KAAHaACIQr_AABwwAAhgAEJ8i
ACUwDwwAAZhUAIpUEjGIIQQMACQvMT4AEn9kAQPqABFvDgARPwgAD7tOO-8D-zEQDzDfMS8wvzFP
MJ8x-zCjvRzWgP8xMP8gAd8-uD8TjwYAHw8FGjokrzCTDRQwpQ0PEgBqDwUQViOvMXIABRgACgQA
DCYABBgAD0wAyA8mCzwCTQYJeAcP3AcAGBp0Bw4gAA9AAKUPNAg7Eg_DBwWMAArrBwULCAWMAA4g
AA9AAKsfL04BOvEA-yEQ-xIB3zAfEg8wvxIPCAAjDxJHKQB7KQUUAAGLKQCREQoUAAHMAAgUAAIN
CQFYCg8oAAoOUAAPeAABApQAQN8w-xJUXh8SVF45EPp2BpHfIh8gDyK-IA8IAACpQiF-IrFCBBAA
MyIPEaBBNhEPIhgAABAAED-GQgkUAChfIBAAXw8ifyAPEAAJZxEPIl8gD3AAAogAn98i-yACLzC-
IO4AOfAG-yEQ8gHeEg6-MQ4SDg0PES4cLgwNCwCBDgweHxIeDA4NAFIeDDsMHgoAGlsIAFMODA47
DiYAMgwuGz0An70OEt7yAi8wsqoAOhERmQEABgdBML8gDwgAANdLEl-zSwMQAAEmFJA-DxEfPw8R
Dz9xQwccAAEaAAF0CAQeAAgcABERJUAUP2gUDzQABQ9sABMKmAACsAAg3zDBAT8xvyAXAUAAoQYh
Mb_SWADcBj_fEA8MADwCXAAv3zHDAEABQFMnEB8EABAPoCwAGQ8KBAAmEC8MAAEEABdfDAAPEABx
AQQNBxAAER9HCBUvAgIBPgwJBABxEh4vIA4PMZAgXg0OHyEOwSQPZAh_EiAgAADUEg5AAAIWADMv
MI8cABGfCAABFwESGgQAIR8alS5SIH8aHyAxAQQKADEfGk8eAAMfAUUgHxpfEAAxLzB-FlYOqRQP
NQhrHyBAAAEA8gECIAAACgAFHgAFQAAQj6RhAJpiIhoPRAAXGh8BAaAuAh8BAicBIQ8xaFYWMCEB
BA4AAB8BEQ8fAV8-MH8xL3JgPTz-EhEDCD_fMQ8MADwGywcBw1APPl87PP8gEcsHP58iDwwAPAaf
Bw-CAEBE8hHfIZ8HL5INBgAUAYEHAI0AH-1OAT4H0AYAowMBn1MPDAA6BiwHDxACRA8rB1gPwgBA
Hw9NBhlQLyAPHL_8EyAgvzBTYw68DhweDR8AMxIeLAoAASsAHywdAAYdGxwAQwwPEAwNAAAfAE8M
KrwazhI8AUUzAclJAeQUANcRBBQSCgQAAKwUBCQAAAgAOv8QJBEAAsVGDzkAAwhhADb-EAMdAA5P
UF8DLzG-EPUIOQS0AQ8EAKEC8VwPHgBZLx8RHAAFUz8RHxDfBABEnxFCDwUAAE03D2AQOy8PMAQA
-1FyEQIfIAIObzwighAPEQ4CHgJtDQDhDR4CHm0sDQIeAg5tLA0ZAA-hATl2-zBOHxDfMAQAIq8w
dgIRj3JRE88EAESPEUIfBQA-TzEf8Vw6Nf8wowEBFh--AB8f-QADDygMOQ9WBhkvPyBIBjUPZAZp
oRABXxGPEA8RXyFsU2AxHxAPIT9iBCAQH8U8UBAPMa8QiBJxPxAfEY8QT5QSUE8QHzFfLi4hMQ8O
AACwAlFPIS8QDygAAKs8EI9GAAC_LwAoaC8hL-JyWSAUHzUPIxEPYwABOFQhIQ_uACF-EOhIQRAP
EZ_mAEAvEF8Rfx8BTC8ADAACzgAjEQ-SAAKBPREfLAAABgARbxQBAgwAAOQAACVxAAoABGwAEx9W
AAAKABIfSgASITQAAkQAEH9gASkhHzIAAUQADwUBPh8RNgh7HyLeADkC1AYIBgAQvzULJREfCAAx
byFPfxwybxA-5GsQEHc-FR8WABCPBAA3IG8-BAAWMAQAD6d2OwC_BEQfIAIeygQBugQACwAaDdQE
AQkABR0AIA8hHgDQbB8wHxAeAh5rHzALABwAYAsgCxAaGxsA-wprGhsOCwILDmsaG78-GhsOCQ4J
DmkaG7n6vwA6MP8wUyZMk08wDxGvIT8wvwQAEa_NKP8DAo8hDxECPzCyPg8gkg1Onf4DoymHQN8Q
HxEEACI-EH0EAZ4DAoIDghHfEP8REt8hIQAPJQAHAgQAAhoAIT8Q1BQBHAAADAAPqwBXDYYAFhCG
AA-AAJFh-xEBDyHfAgVS3yH-EBYkABxvHQYBeAQPHwZAAYAFDwQABhc-DAAOBAAB7xIPPACcLx8x
dA88HxAEAE0mryEMAABtai9PMBAAgyIfIA4AE08IAB8veQU4-wEgBPARwSABoAEgDxKgDiAOBAAb
gRABDqAOIdARAgBJAQ7QHgIAPP4B8IgREzCcABIwjQAfNvMN-TD-IUAnCxAwKG1DHxA-MIhKITAP
DAAL4TgLTQEuMTDWETAAnxHdLwQEAAD7JQUGACYgTxoADyYADgv3DQ97AAuTDi8EALEQAZABBABW
EQABoAEEAAAQAAUcAA8gAAMPHAAPDxgAA2UPEpAOEA4EAFYeAA6gDgQAABAADxgACjwOEL6yAlUt
OS40NgEAFDf4ADYuMTMBAAIFAR80zQKdDt4RDx4AVyYfERAAChwAEj_JEA0YAAJyEkQPEEKfBQBP
TzGfEZgCDQ_UAQEPBAD-SpRvEQ8gAh4CDxEPAABMDBEN5g5UMG0eAh4LAABZDEENLxBtHwAfLMYB
IQh6CC8fIRIABAcQAALJHgsQAA9EALQNfAkPQgEOIx8xVAgDCAARPxE2Mt8gHwgAAAQAHzAEAAkk
-zF7Ax8zcwASzwgIBH8zfyN-M-80GBQIHND-MAovIb8wTyGfMF8hb4IAxCQSLw_HIiAvsC8SIAwA
VQ8hTzEfDAAA2AsGBAADFgAANIIHMAAXXxoABgwAH28KABINbjYMAwEfMRFRAS_fEWgHBQ8eABAW
IYuGDn8BD3wACLQICAQ-ETA-IQ8wIAUAICAgEgBuMDA_MD4wPgIPyAALAnwFCAYAIx8Q4m8DCAAA
eS5CTzFvIR59Im8QEAAiHyEgEQMWEQ8aEQYPkAAMHDKQABFv_BAAThMxHzBvwhUQDQsAE219BBQf
ewQ1HzBtHQAgbyEeABEMCwAA_hBwGx8wEAsgCyAAQAALGmsdADEbGmv6EHEbGr8-Gxpp_hBvGxq5
G-oioQAdBB8FL78hCgAUFBAKAAEmLwMKAAHiRgcOAApWaywfPxwAG08UADEvEB8oACofECoAAz4A
AQQAGQ8yAB_fKgAWBFwAEW8oACEfP8IAAygAAGN4Lw8QNAEdDhgBDywBDQG4UAMMAAG6AAUOAAKI
AAIEAAGUAAkcAB5PFAABEgA5Hz8vFgAEPgAFTgAOcAAPKgABD1wAEhJvLAAiMV8ZFwQ8AC8xTzgB
HsD-MAdPIY8wbyFvMC-gBCERTzg0ME8gH9c7AZIDAY0VAVoTAkEfMh8QP0yHQSAfEF8KAAB4DhF-
CgAVnwYAYS8wDxCfIJ8jABsCBwoAAZA3QjAfEJ_VMRAQg4YACgALqhkPuwAOHg9mBQ8KAAQCugUB
zAAF1AUTD08yAcmGAxAAAN4AHy-6BQwfbwoAAQ8MBj0N7AAEyAUAQowCRowAIgUEFgAPGgAJP-8x
Fm0AHRsPTA4fHxAADgSEDg8IABNA-xAC33oyHDCsZA6uAg-qMpkPBABPId8gCgBDIL8hDwoAIk8h
RhoVHxIAA_NXJREvEgATLxIAAMcHDU1PD3MBrFAhEp8gEv0AwAKuAh8h3h0OAj8RDpwC8ABOHR49
LxAPMD4dHg0PEg3HOhAuCwBxIg0PMC8QDg4Abz0cDgw_DREBHRI-xwQCBAMFtgYTD4YFGT9QBxs-
SgcEHgACLAACBAAsDz9SAA4eAA9EAAEIYgACPAAQr_9AAAoAcD9PEF8-PzA2Bi5vP7ZND24EDwFh
ACI-MIEAAgQAAQwAAxYAGE8OAAmhBiQ-MCwABTwAARYAH58eAAoMRAAKYgAEPAAAsQcC4QARX3xq
QD8wbz8XAT--MBThAB0BaDgwMA8QXIsBygRQEG8wHxCzBgDSAhBv1gIkIB8OAB4wDgAA3kIwHxBv
fAcSMQwAQE8wAg4OABYuQQAQLuECEG-lArU-Lg0fEG0cDS4NHAYAbj4cbhz_E5sFD-QGGwAwZwbY
DADTKgCaDBFfCAAG-AwQT2laICGvqwAlIb8GABfPBAAgHyCcNwQIAD--MBJSAR0GXQ4ABAABai0J
EAAZDxAALx8hEgABHy9EALgvDzH2CyUPD1FqHwK1UAUPJ1EEMCFPEWiLD_9QBB8hOgAIEjAcAA8m
ASAjIB-RBhVP4wYTDxIAF18SACAPEQsPDDEHhB8hHxI-IR8iMQdALyAPEnt_bB8RDyIvILsmCq0S
Ux8gfxFP-zQQTzYcAwQAkV8hHyBfIS8Rv0MhUN8R-yEBRhwvDxADAiIQIHaFAKYvALYRAA9lMQ8w
P5kAIP8QRzIUEAQAEM_dNRAQKGExHxCv9xEyHxCfgAIhEI-3EQE9jACnGwCqBADtECIQXw8SATYM
EU8cAAIMABE-IAAADAAPtQAkDwQA3jEvEg8OSXAPEi8QDxKvNgSQEg8wryFPMC8hyYBBPyEvMJFS
D6AZDg9oAUYXEQQABrgAAtQCHxEcAAFSDxEPEg8gABcSBAAfMTwAEg4QAB8xIAAzAuYaIT8-ZgUB
BgAQPyQQAQoADAQAADUID1QMPi8ADnuNCRMez3UEAgAe-SgMDwQAoCRfEQoABgQAHX_hAXwfEQ8S
DQEMnxkPYwwdBDgADwQAhQHQnBow2gYASgUHEAAABAAQIbQiHw8YAAAQX3qSAS0HgyAPIY8xbyGP
DAAAk1oRb5QoJg8gBAAPEAAND_ECHQOJABMiCAAPBAACHx8eAAomLyIMAA8cADMQHxoADh4ADAQA
HxEdBAoZICAAFCAMACBPIQGaAJMHEN-GPiEwvyIZAhgAIk8hDAAQv6UBHyGeBQgPZQEkCwQAAmpP
Ag4AMH8RT08TMRFPILoIAB8BAwwAAOVKAB4ABGpPE99wAhPP2xchDzGsCBEgcAYA35IA2ggEFAAg
Ea_MnwEJJwYqACCvEXaeD8QAHRIfkw8jPz8IAAKAeQKrDRcfDAB-LxA-Pz8QPyAACAAQACIfMAQA
Hw9IACwPkAAvP-8QAQyYIA9FDhAAGQwTX0MJAPcLE28MAAAFBBGvRCsRj7hMALwsAAoAES_bCREP
kwkxfzEPkwkhbzFNBDEQXzE3SSAQTw0CAZMJADQAAOsJD78ARgr0Ah8fEAAOBCwDD_YTFQDbdQIQ
DQQEAA8zJjoP4gAQAbwAHTF9BCMgHxoACgYAAZgUcR8QLz8PIZ9jCHAvIR8-DyFfTQIB_FAAVgQA
3wkhHxB6EwMMUQJyLDEvIT8cAA-3AHARMQ8NAJ4HICFfOAVAER8hP7UMADAFECGOiwBgdwADPwAM
AABgLwIMABLPgosBwQyRUk8w-yEKDyDfcgYf33YGIABnKQF6Lwe6BgAmAwKRnwkXAHcPEA8SUA8w
EQACFQBPIA8SDzAAAxEvGwBALxBvIRiSG68EAEGfEA8zBgARIQYAEDEGAAApkyEfEDoZAbykANoC
AMkpCGkBD20BITL-MANwHlGvMF8hnyxDEX8SGQAdpSIvMKwRAGsNAgwAEB-hSwUYABgPBAAFFgAA
LgIkDyAOABdfMAAmXzEYAC9vMQoACy8PMFwSHR4fRgAPCgAEAqCaBJoAEx-CAAa4AAI2PgdUGQM8
AAYiABc-QAAOYAAOCgAP7ABLAVR6IiBvNj8DrgERX-QZEy-SAQAKABFP0gERrx4ANb8xDwYAD0gT
CQ-gECEfML4OVQ8EAAIrEi-2DQUEABISlRAAegM3DzABfAkA5gEBBw8A7gFUAQ8RAQ4ZAEEfIC8S
CwJCIQEODRUA8AcNbyANDzAdDD1vIA08TUsdPF0rPRz98DPPXBtcGjwKDBsMCjwKHQ8adxEUBPEC
4BECAF8BDxLgHgIAAC-_ApABCx443wMQBNsD0G8hfzAPEV8xLyFPMB8kWREx9xwBTwUBvZ0A1QcA
j0ECWgYA6wIAJVIBDgAACgARf0sOABQAGZ8GAAF6owAIAAA5CAAfAQUMAACQowFACQEdHQWWER84
uAAVICEBwgUResIFFBCkBgQEAAK6CB8fkgZEHzhiDx4AqwkPQxpCMC8gb0ETgjEfMBEOAS4PJDfg
HW6NbyCNbP0H-AHfPxyQTk4cTosMtQ4P1ACEQ-8gAc8ODSLfEd0gAKdzLw8wBAAFEy8uAA8EAAIA
PAAPKQQJD1oACQ94AAwPHgAND3IBHAZ-Ag_zAh8XPwwADwQAAT7-MJBCBg_OAJgPjgJqAOJIJCEA
2AEPBAClD44CGTAICATyAACfBRMg5w4PCAAIHo9NEA9cAgwRMHh1QzDfEC_aHACCDcUfMA8bHxBv
Gx8QDxsOAB8gDgAIIDAv0hxQMS8QAm4iEKzOLQ8-HmweDC0MBgBuPR5tHv0ScwIPfTELAGwyANIL
ECHQhx8fDgAHHDEOAAF5QyIPEAMiH4DgKRwAfyoAWwkQTx0PAwYAAFEAIgIPug0jEG9_AAO-AgSQ
AAEsPgMFTC0wXyQAADMfBRQAEzEUAD8xTzAUAAAUIRQAFJ93ABIf6B0MAwEhMB8pkABvAC8PIOcA
HQeaAg5YBQ8eAP90BFE4D9sBHAAgoiMgAB8EFzEEAAcQAAAhEgQMAAMEAAcQAB8-PABXBZQGDvkJ
D_sAGR8xiwABIx8wexwPiwACAQQAJhA-DAAPPABNB_cAD_sAEA8QCC0Svxi0ESEcZTEhvzAUAAAh
DxUQJgAATgQJEAAUPxQABhgAFhDDACc-MQMBBDwABu8ACSwAA0QADu8AD6AEMQYEAA_4MwUOXR8N
lAoVIQ4ACxIYSj8hjxEKAAD7HxGfCgAAMJ4TD-YXIV8QKEEBDAAA6EA0HyBFDwAB7xIBvghABS8x
BRYAABqsIDEBlCAhDxD1DwDeCAF-HyJPEXqkB9IhHzIkAQQPlQnCAXMoAUqRXv8QArAeJgkPJwIO
DwQA6QC8HiAxANcmEa_KCQIIAA9IApkEygAPIQcbD90DAw8xdQMBmxYHEAAGPQQPGAADD1kEDQ8e
ADcP7QIcDRpCDzEAoAJAHUJPEAIO-wRCnxECDQoAdb0MHzEMvyEGAPMD3PsS3z8b3gs_G14bbgtu
C-4SCQAfXnMAHDAfEKDjGwYFAPIBIA8-QA4QPxBOID79Ag8x3Y0BkAIvES8SHxESDA0A-xofIbw7
IkwSDxIMOxJsKjsfIn8wHyJLDzB-IA8wKy8xnyAvMS2fIF2ZLWsDHAyqAw8IABcSzwwAEz8UAALA
Qg9EQgMubxBCQg8qARIEmAIOzAIPvREhDxcSCw-5ESkPHgDdMD8Rv4FqXxHPEC8h0gMeDzEA4LIv
EJ8gXxCfIG8Qf1uzETAjGgBdDwC1C0MgPzBfCAARL5IoQQ8gfzAomgA3HwF5cXG-EF8gfxA-izQA
NgAApAgBCAADKSkOagMPBAF69AkVIgTwDk8Q4A5PIA7ADi0OHzANDqAOLQ5RAjANDpAOAAUtBwEP
AAB2KgBGNwwNACA9DmMgEQ0KABE9BgAgLR5NADENLqDvFhAcXABgDQ8iLQ4MJQDRDQtNDh0OcA4N
C20ODQgAIB0uPF7wC3AOHQs9Dh0egB4NOw4dHpAuLQ4dHqBODB4MmwB2HhweoA59DgQA1B0OTQ6w
Dh0OAC0OsD4FAP8RoE4ADh0OkB4CHhA_gB4CDgIgDiKQAi4gAi4CkC4gTjAkAQsdNyQBHyMkAXoy
HQ5gJAEAFAABJgEAZp0hLi0IABCQKgFgHqAOPRweFwERLbQA-yEdDsAOPQ4NDtAOPQ7QLj0OsE49
DpBOAA4tDoBOIE5gDiIOQD5wLgJADjJwPjACPiAgAQwPRAKuRS6QDo1kACEtHgYAIA4AJAAASgIR
TgYAJD6wBgD-Bi4CHrBOAg4CwA4iAC7AAi4QHsBOgEMCqw9nAxYxPQ4tqwAALAIVkAgAAO2nAggA
ECBEAgMIAP8HcD5APnAOIkAOInACLkACLgJgTjBOECkBDA-yBB4PMQD--xcAdQMVDXUDMg1PMBgD
AEUJB3cDAEUKASsrBnsDEQ9sAyEvIchjHDERAEAhDpAOfAxRCwwbDA5HBEAebR6AcQPxGh4tHgoN
DmAODQodDisOHQoNDkAODQo9DgsOPQoNDiAODQpdDl0KDQ4AIgDxCj0ObQoNHg0KLR4LLgtNCg0e
HRotDi0OCw06AEYAHh0qDgAnEC4bAPUJMD4LLgsuHQoeQA4NHiseDU5QDo0eLQ5ABgCxHQ5QHh0u
LQ4AHmDjBQLpBSGgPgYAIQ4SwwP-BaAyAD6wMgAeIrASEA4CLgLwAE4wXQEdHyJdAZkoCj1dAS8N
Ol0BM4AdHpBOAD6wPicGEBItBgCHQd8OIrA_AAIuArAeID5AsgL-FiIOLVUBAGMGMR4NHmsGEU4G
ABI_fwYQEtoJ-wEyoCIeADKQAi4CDhASoE6wswL-I2GgPgBOoD63AgBWASAiDjpVv6ACLgIAPqA_
IB5glgU8HzUxAI0KdwMwbQ6gxQEPBAAB8CIebR6gLi0ukB6NHmAOHQ5tDh0OQA49Dk0OPQ4gDv0B
DgAOTQ5tDk0ePQ4NHi0eDQ49FQNwDo0OPQ4QPgYAczAubR49DkAeAFUtHkAOja0BMT0OPQgAMC0u
LbEBAbMFArEBBMEFMpAOIn4JMEIATgQAMKAiELkFPwEiUAYDHB9w7AAZPy5tLuwAPgbyAACbAi0N
PuoABAYAEE4EAJ_gLhAOIg7wAELrABAP2AGOANYBE07nBCZOkAYAIA4i8AARQgQAjwIuAhAisCKw
1wGqXw4tPg0e6QAAFE7XAQDPAjAQLqDWAQ-qAA0P3wMdHzQxAI0KmgIPEA5BIh4dEA5QDyIODS4c
AEENDD0eBw6wDF0OLQ5QDg0MfQ6vAeENDB0_DzEePQ4wDh0MTTEQQUAeDUwJADFQLj0IAPACYF4L
HgsdHmAOPR4bPnAOjQ6BEAQGAABKDlBNDi0egCwCIw4dLQ4PCAAAoE4APqAeIgAeIpBxCgAEAAAH
AgxrEG4tMC4xNja7Uk0xLjgzvFIfNlYBWyCQLlYBEJBWAUINDg0uTwEiTR5PASFtDhgDMgx9DkwB
Eg1XAVNAHg08DU4BIi0MTwEAY7URDlABUA4LHgsuQAEsGx5UATCNHoBYAS8OkFgBbg-fAgoPMQD2
D70L9QGzAg8IAAMAdQoAwQswHiKAqgIQAKwCLnBOjxVXLTcuNzIBAAR3AYMuMjYxOTA0NwYADmoT
D4YBWxOQBgcSgBEEMysODZABUy0OCw4tkAEzTQ5NjgEATQcEkAEFhgEAIQAEawFZHh0aHQqUASYa
DQ8AAAy6AooBjw0OQD4rLi0KfQcAB2YIHg6SAQ_KAU0PfgmSDxgBCgWdCAAODY8CLgKgIiAiUBQB
Y0_ATi1OowlNDrYDDxQBT1BtPTd9fQ==
:: gfx/1.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA3LTA4IDIxOjI3OjMwIixtb2RpZmllZD0iMjAyNC0w
OS0xMyAyMzoxNzo1NiIscmV2aXNpb249MTEwMF1dbHo0AMQVAACfYAAA8xR7WzBdPXtibXA9cHh1
AEMgEBAE8PAsZmxhZ3M9MCxwYW5feAgAynk9MCx6b29tPTd9LDEAdv86AB8xHzoEABc-DAAABAA-
-zrAUwA58gAPOg8x-zoADzHvOg8x3zoIAA8RABQvDzqKABwFDgEfMTEAFP8H-xsg-yEg-zAB3zEf
MF8xHyFfMf8wAg0ABhMBXwAfMl8AEbkSEgT-NgP-IQAfNgUA8AAPNg8l-zAAHyUPMN8xDzAIAAJg
AAAMAA8ZACJ-DyX-FALwFC0BGTAICASLAABIAIcwHzEfIR8xnwwAL48weQElDzEABBw2MQAYD_gB
DgoCDxEAEi-POnUAHC--OqcAHR7fiQAPxgI_HzbGAh0OMQAP1wAajyAgBPD----zNABNDpkAD0gC
Dw8XAigfH9QECh8A1AQeFsA-AA9TACMPTAI0Fw91AAyJAD--OgSFABz-AMAqsDqgSqBKoDoPHaA6
DgMACw9NBRxf_jD-HbA0ABxAKsA6sI8AXw8dOqAOAwAND5AAIFETjzFvHQQAEjAEAJcfME82HzA-
Ki8OABtvDAAjPx1qAB8zagAYqlBPKv8dAA8q7x0EAC_fHbcAHBEPBgIA3QEf3rUCIQ4fBQ8-ABcW
z4ACHw8_AB0OUgIPAwAIXw86oDoNnwAdXx3Q-zoQNQAcDlgCDwMABl8POjqgDWUCG7ALDAS-No8x
HzaPMdYHMY8wHwQAAkoCDwwACT8PJa_vBwwcOcoAF09UAg8EAAH_Cj8dLxOPHQ8qLx0vI58dLyov
I88dLyP-HSM1AQ9rAA0--zoE_QQHHh_lBA_tBzEeOTwGDzEATQKHAh4OAwAPEAUND5EARQCCAh4O
AwAPEQUlHDnyCXN-MZ8wPza-BAAvnzBhATwvMTFuBhdbDzigOg0DAA9eAB0AdgXfQP8pAd8aHykP
Gr8vDwgADiMPKWQAHzVkAAUPoAYxD8EAFgGBAo5KoEqwOsAq8M0BDz4ADF--OgD6MDcAHyMPOpMB
T7Aq8K09AA0PAwIHDzIARwIdAh8OAwATDkkGD2IAEBcPFwJWDy8vIX8MABQqDAAfvwgAMl-fGv8p
AYEFDi8xMbcGNg89AxtP3zofKQQABQNRAB80UQATXwkE-zqAhAAiz-8SAd8iHxIPIr8jDwgADiMP
EmQALzEz6QAdHxIEAAUEUgAfMgUDHw8yAKsE6gEPBAAdDtACD50AQBcP_gFWDyMvE38MABQSDAAf
vwgAMk-fIv8SpAMhBEACDwQAHQ8-AVIf8jIAHj--HPCXAB4PMgD---------------8U9BVArxcg
HpgOEA64DgAOyA4ADhgPIAgNGA0IDSgeOA04DTgeKA0QABHYAgAxOA0IAgAQKC0ABQwAAEEAvyAO
mA5AHlgecF5AhwA9NSgPGIkAswgcHqgsHpg8HohMjQA1DA0sjQD-BQwNPA4ADkh8DhAOKIwOIB6c
DkCujgAi02gvGA4QDng9DgAOeE2SAPEEDBgMDQwtHjgMGB0MPR4oDAgMHREA0UiNHjidHiitHhgd
AA0CADQtHggLADA9Ht0CAC-_AYcAHXT-FwHfGB8XBACTLxgPIA8YDyAfCACCLxgfFz8YDyAEAA8g
AAMX3wQAEz8YABcPIAAENAAEBAAXPzAAT98Y-xe0ABu0dwYE-xdo-yBlHxcFALwPFwAO-yBjDiD_
Y08P8wAtNC4wNTk1MjM4MDk1MjRaAKItOC43MTkwNDc2BgACaQAZMmgAcDwKBAD-FypaAD8qHv0D
AABMDgD_KvgdEzNhAEYxLjE2AQASN2AAHzRKAx4fMDIALwFnAvELnx4OEA69DgAOzQ4ADh0HXQct
Hh0nPScdHi0MAAA7Av4RDb8gDR4NDJcMDQ4ADg0MdwwNDhAOHXwdDiAOnQ5AHl1xAw98ADGAHQIe
vRIerSJ-ABECfwATAn8AEBIuAM58Ig4QDj1yDiAeDYJjAw_AABMgbx5FAHF9Mg4ADn1CgwD3CT0S
ByIeHScdEicSHi0HHTIHIh5Ngh49koUAIB4dgwC-Hg0SfCIe0h7S-gF7AB1A-xcB0joAwx4iB1IH
Ih4SJzInEgwAABYAEAJqAO8CDZcNAh4SDXcNEh4ifWkAISB3RAwDcI8gDxf-IDYFABACBQAQARUD
9QBFHxdPIB8XvyA-F28gHxckACI-IBkAMU8gDwQAMR8gHyEABTIAF68VAAk2ABMfGQAANgAxXyA-
EAAUPzoAMw8gDwQAQh8X3yAQABpPQgBRLxcvIC8_AGN-IC8XXyDAAw2_ADT-F2nZAw8FAPYP4gQI
RjcuNTMBAAMvAlwtMS4zMYAECuAE0XQSBBD-E2Ag-mIA-v8BAH1OAP5iIP5gQwVIMzIuNs0EA2MA
ODIuMwEAA6ECD_QEZvILnA4QDrwOAA48PyBMDgAOLA08DTwePF08HjwKAAgGAAEWACE-EMYH-gQs
DTsNLA4QDjw9PA4gDpwOQB5c7AQPhAAxMSwPEAgAIRwbBwDDDCsePF07HjwNOw07hwAACADPPD1L
DhAOLIsOIB6b8wQlgnwfEA4QDowtigAQDF4IsiwLPAs9HjxbPR48CgAHBgDhLA1bPR4cHQs9Cz0e
DC0HAD5NO01PCA-4BBRA3xAfFwQA8QBPED8gTxAfFz8QDyA8Dj8KAKlePR8XPQ48Dj0bBgAQXgoA
JD0OBgCPTT5NG90b3ft_AB4v8PAyALMBxgH3BZsOEA67DgAOSy8gSw4ADlsNWx5rBAD_HFsNCQ1L
HksNKQ07HjsNSQ0rDgAOKw1JDRsOEA47DSkNKw4gDjstKw5AHlvQAg_DAC1xSwMeaw07E4UAIRsj
hgARM4YAEyOGAAAIAACGAM8zDhAOKwMtQw4gHpPPAiVyexMOEA6LI4gAIQsziQBhC0Meaw1TBADh
WwMNUx5LAw0JDUMeOwOKACArA4MAMR4bEwcAIQszFQBfUy1DHtPSAiLJ0x7THlMvIEMeYw1TBAAR
U3UAEUNfABEzbAACBgAfQ3EAKS-w8DIAswG8AfERmg4QDroOAA7KDgAOWg8gWh5aDQoNSh5qDVoe
2h46DQoCAJUqHiqNGh4aDQgCALMKDgAOGo0KDhAOKiQAnhoOIA6aDkAeWs0CD4sAKbU6Dxkeag06
HB6qLI8AWSweKo0cjwARDI8AMRwOAI8AEQwMDj4QDir7DQ_PABhweh8ZDhAOiqUFIoo9kwDxBApN
HloMCgxNHmoMXR5afR46DA0CAJUtHiqMHR4aDAgCAJUNHhoNjB0eCi0iAA_uBSY0GR8XBAD3Am8Z
DyBfGR8XXxkPIA8ZDyBPFAAAIAATPxgABAQA9AMvGR8XLxmPIB8ZHxcfGQ8gCA4CABEPGgAgjh3u
BRENAgBvLRzdHN38DQPr9QqXDhAOtw4ADlcIVw4ADkcoRx5XKEceR0g3BAAAEAARZx4AEbcsAH4g
DpcOQB5X9AIPcgAs8AcnDxIeR0gXHR5HSActHlcoBz0eZwgHghAgZ10vAL9tDhAON30OIB4HjeAC
JYF3HxIOEA6HLX4AIRc9fwCVTR5XKE0eR0g9BAD-ADcdKE0eJz0IXR4XvR4HzccCJzASHxcEAKBv
EgheHxdeKE4dBAA1Tkg_BAAAEABSbgheHd4CAB-9iwIgDzIA-3n-EQgIBCAWUBdADyMPEB8jIA4v
EB4QHg0uEBcNJxBeEF4AfwAfD0cB5bAQJjBIIB8gKCAOOAMAfx4oIEgwJiCNASLfPxAwNyBeEFcQ
XhBXAEIAIm8PHA8QHxzPASwATQDyBB8gUAUPFUAFLiAFDgcuEAUnHhAJAAEFAB9OngAg8gFABhAG
YAYQFxAGIAcABxAHBgAQAAIATxcgB1BRAB3-C0AoMDggBygPGBAnCA4QNwYQNwYgJwYwFwZA8wE9
HzYxAF1fEgTw-xEyABzwIDB-F2AOcQ5ADpEOIA4RFQFFEQ4QDgEFDxYPIAUvFg8gDxYFAQ4QDgUd
DyA9DB0FHQBQHQU9BR0VADARfRE1APABXREOMA4CcQIOIA4CHxVRG0oU4AIbHR8YCx0rAh4rLQot
YA--EBsVCBsVKw4gHnEeQA5xDlAOIR4hDmAPEx8REBkPEzC3AHZACA8YW7YAMQgKW7YA0Ao7LQUO
EB5xDQUOMA68AA_4ACov8ARwAWIPtABDECC2ACIfFggAArcAAA4AET8WAAG7AKENDyAFDB0MBQwN
wAB-BQ0FHQUNBcYAYA59Aw8xAG4PrgMuO7EOEAQAMCAOkVUBIX8VVgERnVMBjL0CHt0OAA69egNf
LxMQLDB-AFYRnRECSB5xDAVGA08vExArjgIfDwQBLg4AAQ98AI4OjwIPMQCe8AwVIgTwDk8g4A5L
DsAOKw4fIwsOoA4rDg8yDyMEADALDpAOABQkEAABDwCMHyQPEQ8QDzINAIE7Dg8kHzIPGgsAET0G
ACAtHk4AoA0uoA4LDgsOHzJeADALDw1hAABbAOELDw1LDhsOcA4LDGsOCwgAQBsuAh4KAPYUGww7
DhsegB4LPA4bHpAuKw4bHqBOAh4CDqAOLR4SHqAOfQ4EANAdDk0OsA4dDgAtDrA_BQD-GA8QLgAt
DqAqHgAOHQ6QGgEaEDqAGgEKASAKIZABKiABKgGQKiBKMDM3GQAqAR8jKgF9MhsOYCoBABQAASwB
YQ4LDoAuKwgAEJAwAWAeoA49Eh4dAaAtDsAOLQ4dDsAOhhBw0A49DtAuPSsBQD49DpAqAf8JLQ6A
SiBOYAohCkA6cCoBQAoxcDowATogJgEMD1ACsYEukA6NDpAOPWcAIS0eBgAAHh0QHlwCIQBOBgAx
Dg8QSAEhACpsAv8GGgEasEoBCgHACiEAKsABKhAawEqAUQKuD3sDFlE9Di0OoCUBNS0OkAgAMx0O
EAgAECBPAgMIAP8IcD8QQDpwCiFACiFwASpAASoBYEowShAtAQwPCgUeDzEA-1LxDhQZBPALTxPQ
DkMOwD4jDqAOPxUOEw6gDh8fDyAHCgA5DxYPDAAhHxYLAOAjDiMOsA4DDiMO0B4TDkAAQLAOEx5C
AF8DDhMOEwgAB0MeEw4jQAD-DqAOEw5DDoBOQxFgER5ADjEwQWBBIDGAIUARkBEwxgCQIJAeQAAQ
kBMAvjMegBMuIx4RYBETyQAP8QF5AKYEFA2mBDILTyNHBEcyDyMfqAQgDzKoBBgfrAQRD50EjC8k
DxAPEQ8yEQDwCCQOkA4NHzINDA0cDQ6QDo8aDpAeah6AlgTxGh4qHgkLDmAOCwkbDiwOGwkLDkAO
Cwk7DgwOOwkLDiAOCwlbDlsJCw4AIgDxCjsOawkLHgsJKx4CLgJLCQseGxkrDisOAgs6AEYAHhsp
DgAnEC4bAPUJMD4CLgIuGwkeQA4KHiIeCk5QDooeKw5ABgDwBRsOUB4aLioOAB5gTgAOKg6QHi8Q
CAAhoDgGADEIEQgIAP8EMQA4sDEAGCGwERAIASgB8ABIMF8BHR8iXwGZKAk7XwEvCzlfATMhGh5f
AYA_sDgACB4IsF0B-wQ4sAEYAQAIIbA4AAEoAbAYIDhAuAIeD1kB5CIOKlkBEA4GADAKHpAIABFO
BgAwPxCgBwD-BwgRCLA4ADGgIRgAMZABKAEIEBGgSLC4Av8jsaA_AE6gPgA-ELA4VwH-AiEIAAEY
AaABKAEAOKA4IBhgVgEZ-AERGQTwBm8TgA5jDmAOgw5QBABwHmMeUC5DLgwAoEAegx4gDhMeQx4Q
IEAzHgMeXSDxCAMOgw4DDhA_Yz4QM24zECMOYw4jEBMAuAZAABNALroG-wxwDhEeIw5wAR8YAQAB
EwFwPQAxgB0QDREN0B1iAwwcNa0AH0CsAE4RTrAAEQ6pAGAxADFwMQC4AE_AERA9rgAPD1sBWvEA
DiMOAy5wDiMeEQ5wARMBpwDfcDEAPXANEQ0QHZAdkFsBeASsABFOqgAxDhEOWwEAsgBvADFwPRAR
rgAcCWsFf2sOoA6LDpAEAAHwEB5rHqAuKy6QHoseYA4bDmsOGw5ADjsOSw47DiAO_wHSIuAOaw5L
HjsOCx4rHgsOO8AHcA6LDjsOED4GAPEJMC5rHjsOQA4PGh4rHg0OKx5ADo1OUA6NmgMxPQ49CAAw
LS4tpAMQTpAMcQAeYA8QLgybDBFMBgCwDCEMAAwtDJBBAEwEAK_gIRABLAHwASFQ-AQcH3DvABg-
Lmsu7wA-BvUAAJEEMw0_LZEENy0OkPMAAOsAMEwATAQAn6AsEAwhDPAAQe4AEA-eAY4A3AEQTuEG
MC0OAO8AAYEOgEyQDC0MAAwh8wARQQQAjwEsARAhsCGw3QGqUw4tPg0e7AAlTpDyAADsABRM3QEA
2AIwECyg3AEP7QAa8gAOGQQwTxNwDkMOYD4jDkAHDRVABw0XQAcNFkAHDRFASAQRUAcNQHAeEw5A
ABFQBw0TQO8MDwgABTFQDhM6AAQMADITDmAGAP8ALiMOkDGQLxgBgDENgDEN2gUMHDTFAC-wAsYA
WRFAzQ0AQAAFxgAvPhPAACcOkw0PMQA9CcMDD2oSQiIeG2oSUA8NDgsuUABCCww7Hl4SoFsOKw5Q
DgsMew7VAsALDBs_Ah47DjAOGwyAEgCSKSELTAkAMVAuOwgA8AJgXgIeAhseYA49HhI_cA6NDuUU
BAYAAKASYE0OLR6ADkQjEx2DEg8IAADwAE8QADqgGiEAGiGQCgEqAQQATJBKAErNFCktMJwyBdAt
TTEuODPPLR82VgFbIJAuVgEBqxNCCw4LLk8BIkseTwExaw47TwEiew5NARELVwFTQB4LPAtOASIr
DE8BEE4RAAFQAVAOAh4CLkABLBIeVAEwjR6AWAEvDpBYAW8O3wIPTwB5CUgKoQNvFQMOUA4PFgdz
HWAVDyAHDxURAFAfBw8gL3QEgg8fDlAODR8W0wwFvgnxBz4tPkAOMw4MDjMOMA4zLjMOIA5TDlO6
CTAzDjO8CbAuMw4zLhAjjiMQ47oJE2O4CQAPCwcGAAC4CRAvyAuBK2AxCwALMVAGAB8gHQQFD9EA
SlFQDiMODBkFCNEAC9cAP_4Q448KAQ-RACwP6gtdBa8AAeoLA5sM3w8YEQ0ADRENgB0gHUCxAB0f
F7EADwGtAE4ugy4QsQAwHmMeMwJDA24DLq8AAJ4AHiO3AA_xADMPFBTpCFwRABYUDwgABFCgPxAA
OGARMBghgGEREAAdFD1wSCAeFFctNy43MgEABHgBPi4yNpQ5HzeHAWaSkA4LHioeCw6AjgYzLA4L
kQFTKw4MDiuRATNLDkuPAQDxCgSRAQWHAQAhAARsAVkeGxkbCZUBJhkLDwBCIB4bDosBcAsOQD4i
LiuTARuKjwEyKi4qkQEBcQEOkwEPiwFMDyUNkgAEACMeYAoAFJAIAEgPEC0MHA4AKQ2fAAEsAaAh
ICFQFQFiT4BOK05IDU4eLg0BDxUBT1BtPTd9fQ==
:: gfx/2.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA3LTA4IDIxOjI3OjQ0Iixtb2RpZmllZD0iMjAyNC0w
OS0xMyAyMzoxNzo1NiIscmV2aXNpb249MTA5M11dbHo0AMQVAACfYAAA8xR7WzBdPXtibXA9cHh1
AEMgEBAE8PAsZmxhZ3M9MCxwYW5feAgAynk9MCx6b29tPTd9LDEAdv86AB8xHzoEABc-DAAABAA-
-zrAUwA58gAPOg8x-zoADzHvOg8x3zoIAA8RABQvDzqKABwFDgEfMTEAFP8H-xsg-yEg-zAB3zEf
MF8xHyFfMf8wAg0ABhMBXwAfMl8AEbkSEgT-NgP-IQAfNgUA8AAPNg8l-zAAHyUPMN8xDzAIAAJg
AAAMAA8ZACJ-DyX-FALwFC0BGTAICASLAABIAIcwHzEfIR8xnwwAL48weQElDzEABBw2MQAYD_gB
DgoCDxEAEi-POnUAHC--OqcAHR7fiQAPxgI_HzbGAh0OMQAP1wAajyAgBPD----zNABNDpkAD0gC
Dw8XAigfH9QECh8A1AQeFsA-AA9TACMPTAI0Fw91AAyJAD--OgSFABz-AMAqsDqgSqBKoDoPHaA6
DgMACw9NBRxf_jD-HbA0ABxAKsA6sI8AXw8dOqAOAwAND5AAIFETjzFvHQQAEjAEAJcfME82HzA-
Ki8OABtvDAAjPx1qAB8zagAYqlBPKv8dAA8q7x0EAC_fHbcAHBEPBgIA3QEf3rUCIQ4fBQ8-ABcW
z4ACHw8_AB0OUgIPAwAIXw86oDoNnwAdXx3Q-zoQNQAcDlgCDwMABl8POjqgDWUCG7ALDAS-No8x
HzaPMdYHMY8wHwQAAkoCDwwACT8PJa_vBwwcOcoAF09UAg8EAAH_Cj8dLxOPHQ8qLx0vI58dLyov
I88dLyP-HSM1AQ9rAA0--zoE_QQHHh_lBA_tBzEeOTwGDzEATQKHAh4OAwAPEAUND5EARQCCAh4O
AwAPEQUlHDnyCXN-MZ8wPza-BAAvnzBhATwvMTFuBhdbDzigOg0DAA9eAB0AdgXfQP8pAd8aHykP
Gr8vDwgADiMPKWQAHzVkAAUPoAYxD8EAFgGBAo5KoEqwOsAq8M0BDz4ADF--OgD6MDcAHyMPOpMB
T7Aq8K09AA0PAwIHDzIARwIdAh8OAwATDkkGD2IAEBcPFwJWDy8vIX8MABQqDAAfvwgAMl-fGv8p
AYEFDi8xMbcGNg89AxtP3zofKQQABQNRAB80UQATXwkE-zqAhAAiz-8SAd8iHxIPIr8jDwgADiMP
EmQALzEz6QAdHxIEAAUEUgAfMgUDHw8yAKsE6gEPBAAdDtACD50AQBcP_gFWDyMvE38MABQSDAAf
vwgAMk-fIv8SpAMhBEACDwQAHQ8-AVIf8jIAHj--HPCXAB4PMgD---------------8U9BVArxcg
HpgOEA64DgAOyA4ADhgPIAgNGA0IDSgeOA04DTgeKA0QABHYAgAxOA0IAgAQKC0ABQwAAEEAvyAO
mA5AHlgecF5AhwA9NSgPGIkAswgcHqgsHpg8HohMjQA1DA0sjQD-BQwNPA4ADkh8DhAOKIwOIB6c
DkCujgAi02gvGA4QDng9DgAOeE2SAPEEDBgMDQwtHjgMGB0MPR4oDAgMHREA0UiNHjidHiitHhgd
AA0CADQtHggLADA9Ht0CAC-_AYcAHXT-FwHfGB8XBACTLxgPIA8YDyAfCACCLxgfFz8YDyAEAA8g
AAMX3wQAEz8YABcPIAAENAAEBAAXPzAAT98Y-xe0ABu0dwYE-xdo-yBlHxcFALwPFwAO-yBjDiD_
Y08P8wAtNC4wNTk1MjM4MDk1MjRaAKItOC43MTkwNDc2BgACaQAZMmgAcDwKBAD-FypaAD8qHv0D
AABMDgD_KvgdEzNhAEYxLjE2AQASN2AAHzRKAx4fMDIALwFnAvELnx4OEA69DgAOzQ4ADh0HXQct
Hh0nPScdHi0MAAA7Av4RDb8gDR4NDJcMDQ4ADg0MdwwNDhAOHXwdDiAOnQ5AHl1xAw98ADGAHQIe
vRIerSJ-ABECfwATAn8AEBIuAM58Ig4QDj1yDiAeDYJjAw_AABMgbx5FAHF9Mg4ADn1CgwD3CT0S
ByIeHScdEicSHi0HHTIHIh5Ngh49koUAIB4dgwC-Hg0SfCIe0h7S-gF7AB1A-xcB0joAwx4iB1IH
Ih4SJzInEgwAABYAEAJqAO8CDZcNAh4SDXcNEh4ifWkAISB3RAwDcI8gDxf-IDYFABACBQAQARUD
9QBFHxdPIB8XvyA-F28gHxckACI-IBkAMU8gDwQAMR8gHyEABTIAF68VAAk2ABMfGQAANgAxXyA-
EAAUPzoAMw8gDwQAQh8X3yAQABpPQgBRLxcvIC8_AGN-IC8XXyDAAw2_ADT-F2nZAw8FAPYP4gQI
RjcuNTMBAAMvAlwtMS4zMYAECuAE0XQSBBD-E2Ag-mIA-v8BAH1OAP5iIP5gQwVIMzIuNs0EA2MA
ODIuMwEAA6ECD_QEZvILnA4QDrwOAA48PyBMDgAOLA08DTwePF08HjwKAAgGAAEWACE-EMYH-gQs
DTsNLA4QDjw9PA4gDpwOQB5c7AQPhAAxMSwPEAgAIRwbBwDDDCsePF07HjwNOw07hwAACADPPD1L
DhAOLIsOIB6b8wQlgnwfEA4QDowtigAQDF4IsiwLPAs9HjxbPR48CgAHBgDhLA1bPR4cHQs9Cz0e
DC0HAD5NO01PCA-4BBRA3xAfFwQA8QBPED8gTxAfFz8QDyA8Dj8KAKlePR8XPQ48Dj0bBgAQXgoA
JD0OBgCPTT5NG90b3ft_AB4v8PAyALMBxgH3BZsOEA67DgAOSy8gSw4ADlsNWx5rBAD_HFsNCQ1L
HksNKQ07HjsNSQ0rDgAOKw1JDRsOEA47DSkNKw4gDjstKw5AHlvQAg_DAC1xSwMeaw07E4UAIRsj
hgARM4YAEyOGAAAIAACGAM8zDhAOKwMtQw4gHpPPAiVyexMOEA6LI4gAIQsziQBhC0Meaw1TBADh
WwMNUx5LAw0JDUMeOwOKACArA4MAMR4bEwcAIQszFQBfUy1DHtPSAiLJ0x7THlMvIEMeYw1TBAAR
U3UAEUNfABEzbAACBgAfQ3EAKS-w8DIAswG8AfERmg4QDroOAA7KDgAOWg8gWh5aDQoNSh5qDVoe
2h46DQoCAJUqHiqNGh4aDQgCALMKDgAOGo0KDhAOKiQAnhoOIA6aDkAeWs0CD4sAKbU6Dxkeag06
HB6qLI8AWSweKo0cjwARDI8AMRwOAI8AEQwMDj4QDir7DQ_PABhweh8ZDhAOiqUFIoo9kwDxBApN
HloMCgxNHmoMXR5afR46DA0CAJUtHiqMHR4aDAgCAJUNHhoNjB0eCi0iAA_uBSY0GR8XBAD3Am8Z
DyBfGR8XXxkPIA8ZDyBPFAAAIAATPxgABAQA9AMvGR8XLxmPIB8ZHxcfGQ8gCA4CABEPGgAgjh3u
BRENAgBvLRzdHN38DQPr9QqXDhAOtw4ADlcIVw4ADkcoRx5XKEceR0g3BAAAEAARZx4AEbcsAH4g
DpcOQB5X9AIPcgAs8AcnDxIeR0gXHR5HSActHlcoBz0eZwgHghAgZ10vAL9tDhAON30OIB4HjeAC
JYF3HxIOEA6HLX4AIRc9fwCVTR5XKE0eR0g9BAD-ADcdKE0eJz0IXR4XvR4HzccCJzASHxcEAKBv
EgheHxdeKE4dBAA1Tkg_BAAAEABSbgheHd4CAB-9iwIgDzIA-3n-EQgIBCAWUBdADyMPEB8jIA4v
EB4QHg0uEBcNJxBeEF4AfwAfD0cB5bAQJjBIIB8gKCAOOAMAfx4oIEgwJiCNASLfPxAwNyBeEFcQ
XhBXAEIAIm8PHA8QHxzPASwATQDyBB8gUAUPFUAFLiAFDgcuEAUnHhAJAAEFAB9OngAg8gFABhAG
YAYQFxAGIAcABxAHBgAQAAIATxcgB1BRAB3-C0AoMDggBygPGBAnCA4QNwYQNwYgJwYwFwZA8wE9
HzYxAF1fEgTw-xEyABzwIDB-F2AOcQ5ADpEOIA4RFQFFEQ4QDgEFDxYPIAUvFg8gDxYFAQ4QDgUd
DyA9DB0FHQBQHQU9BR0VADARfRE1APABXREOMA4CcQIOIA4CHxVRG0oU4AIbHR8YCx0rAh4rLQot
YA--EBsVCBsVKw4gHnEeQA5xDlAOIR4hDmAPEx8REBkPEzC3AHZACA8YW7YAMQgKW7YA0Ao7LQUO
EB5xDQUOMA68AA_4ACov8ARwAWIPtABDECC2ACIfFggAArcAAA4AET8WAAG7AKENDyAFDB0MBQwN
wAB-BQ0FHQUNBcYAYA59Aw8xAG4PrgMuO7EOEAQAMCAOkVUBIX8VVgERnVMBjL0CHt0OAA69egNf
LxMQLDB-AFYRnRECSB5xDAVGA08vExArjgIfDwQBLg4AAQ98AI4OjwIPMQCe8AwVIgTwDk8g4A5L
DsAOKw4fIwsOoA4rDg8yDyMEADALDpAOABQkEAABDwCMHyQPEQ8QDzINAIE7Dg8kHzIPGgsAET0G
ACAtHk4AoA0uoA4LDgsOHzJeADALDw1hAABbAOELDw1LDhsOcA4LDGsOCwgAQBsuAh4KAPYUGww7
DhsegB4LPA4bHpAuKw4bHqBOAh4CDqAOLR4SHqAOfQ4EANAdDk0OsA4dDgAtDrA_BQD-GA8QLgAt
DqAqHgAOHQ6QGgEaEDqAGgEKASAKIZABKiABKgGQKiBKMDM3GQAqAR8jKgF9MhsOYCoBABQAASwB
YQ4LDoAuKwgAEJAwAWAeoA49Eh4dAaAtDsAOLQ4dDsAOhhBw0A49DtAuPSsBQD49DpAqAf8JLQ6A
SiBOYAohCkA6cCoBQAoxcDowATogJgEMD1ACsYEukA6NDpAOPWcAIS0eBgAAHh0QHlwCIQBOBgAx
Dg8QSAEhACpsAv8GGgEasEoBCgHACiEAKsABKhAawEqAUQKuD3sDFlE9Di0OoCUBNS0OkAgAMx0O
EAgAECBPAgMIAP8IcD8QQDpwCiFACiFwASpAASoBYEowShAtAQwPCgUeDzEA-1LxDhQZBPALTxPQ
DkMOwD4jDqAOPxUOEw6gDh8fDyAHCgA5DxYPDAAhHxYLAOAjDiMOsA4DDiMO0B4TDkAAQLAOEx5C
AF8DDhMOEwgAB0MeEw4jQAD-DqAOEw5DDoBOQxFgER5ADjEwQWBBIDGAIUARkBEwxgCQIJAeQAAQ
kBMAvjMegBMuIx4RYBETyQAP8QF5AKYEFA2mBDILTyNHBEcyDyMfqAQgDzKoBBgfrAQRD50EjC8k
DxAPEQ8yEQDwCCQOkA4NHzINDA0cDQ6QDo8aDpAeah6AlgTxGh4qHgkLDmAOCwkbDiwOGwkLDkAO
Cwk7DgwOOwkLDiAOCwlbDlsJCw4AIgDxCjsOawkLHgsJKx4CLgJLCQseGxkrDisOAgs6AEYAHhsp
DgAnEC4bAPUJMD4CLgIuGwkeQA4KHiIeCk5QDooeKw5ABgDwBRsOUB4aLioOAB5gTgAOKg6QHi8Q
CAAhoDgGADEIEQgIAP8EMQA4sDEAGCGwERAIASgB8ABIMF8BHR8iXwGZKAk7XwEvCzlfATMhGh5f
AYA_sDgACB4IsF0B-wQ4sAEYAQAIIbA4AAEoAbAYIDhAuAIeD1kB5CIOKlkBEA4GADAKHpAIABFO
BgAwPxCgBwD-BwgRCLA4ADGgIRgAMZABKAEIEBGgSLC4Av8jsaA_AE6gPgA-ELA4VwH-AiEIAAEY
AaABKAEAOKA4IBhgVgEZ-AERGQTwBm8TgA5jDmAOgw5QBABwHmMeUC5DLgwAoEAegx4gDhMeQx4Q
IEAzHgMeXSDxCAMOgw4DDhA_Yz4QM24zECMOYw4jEBMAuAZAABNALroG-wxwDhEeIw5wAR8YAQAB
EwFwPQAxgB0QDREN0B1iAwwcNa0AH0CsAE4RTrAAEQ6pAGAxADFwMQC4AE_AERA9rgAPD1sBWvEA
DiMOAy5wDiMeEQ5wARMBpwDfcDEAPXANEQ0QHZAdkFsBeASsABFOqgAxDhEOWwEAsgBvADFwPRAR
rgAcCWsFf2sOoA6LDpAEAAHwEB5rHqAuKy6QHoseYA4bDmsOGw5ADjsOSw47DiAO_wHSIuAOaw5L
HjsOCx4rHgsOO8AHcA6LDjsOED4GAPEJMC5rHjsOQA4PGh4rHg0OKx5ADo1OUA6NmgMxPQ49CAAw
LS4tpAMQTpAMcQAeYA8QLgybDBFMBgCwDCEMAAwtDJBBAEwEAK_gIRABLAHwASFQ-AQcH3DvABg-
Lmsu7wA-BvUAAJEEMw0_LZEENy0OkPMAAOsAMEwATAQAn6AsEAwhDPAAQe4AEA-eAY4A3AEQTuEG
MC0OAO8AAYEOgEyQDC0MAAwh8wARQQQAjwEsARAhsCGw3QGqUw4tPg0e7AAlTpDyAADsABRM3QEA
2AIwECyg3AEP7QAa8gAOGQQwTxNwDkMOYD4jDkAHDRVABw0XQAcNFkAHDRFASAQRUAcNQHAeEw5A
ABFQBw0TQO8MDwgABTFQDhM6AAQMADITDmAGAP8ALiMOkDGQLxgBgDENgDEN2gUMHDTFAC-wAsYA
WRFAzQ0AQAAFxgAvPhPAACcOkw0PMQA9CcMDD2oSQiIeG2oSUA8NDgsuUABCCww7Hl4SoFsOKw5Q
DgsMew7VAsALDBs_Ah47DjAOGwyAEgCSKSELTAkAMVAuOwgA8AJgXgIeAhseYA49HhI_cA6NDuUU
BAYAAKASYE0OLR6ADkQjEx2DEg8IAADwAE8QADqgGiEAGiGQCgEqAQQATJBKAErNFCktMJwyBdAt
TTEuODPPLR82VgFbIJAuVgEBqxNCCw4LLk8BIkseTwExaw47TwEiew5NARELVwFTQB4LPAtOASIr
DE8BEE4RAAFQAVAOAh4CLkABLBIeVAEwjR6AWAEvDpBYAW8O3wIPTwB5CUgKoQNvFQMOUA4PFgdz
HWAVDyAHDxURAFAfBw8gL3QEgg8fDlAODR8W0wwFvgnxBz4tPkAOMw4MDjMOMA4zLjMOIA5TDlO6
CTAzDjO8CbAuMw4zLhAjjiMQ47oJE2O4CQAPCwcGAAC4CRAvyAuBK2AxCwALMVAGAB8gHQQFD9EA
SlFQDiMODBkFCNEAC9cAP_4Q448KAQ-RACwP6gtdBa8AAeoLA5sM3w8YEQ0ADRENgB0gHUCxAB0f
F7EADwGtAE4ugy4QsQAwHmMeMwJDA24DLq8AAJ4AHiO3AA_xADMPFBTpCFwRABYUDwgABFCgPxAA
OGARMBghgGEREAAdFD1wSCAeFFctNy43MgEABHgBPi4yNpQ5HzeHAWaSkA4LHioeCw6AjgYzLA4L
kQFTKw4MDiuRATNLDkuPAQDxCgSRAQWHAQAhAARsAVkeGxkbCZUBJhkLDwBCIB4bDosBcAsOQD4i
LiuTARuKjwEyKi4qkQEBcQEOkwEPiwFMDyUNkgAEACMeYAoAFJAIAEgPEC0MHA4AKQ2fAAEsAaAh
ICFQFQFiT4BOK05IDU4eLg0BDxUBT1BtPTd9fQ==
:: gfx/3.gfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA3LTA4IDIxOjI3OjUxIixtb2RpZmllZD0iMjAyNC0w
OS0xMyAyMzoxNzo1NiIscmV2aXNpb249MTIxM11dbHo0ALgIAACERgAA9Ch7WzBdPXtibXA9cHh1
AEMgEBAEQK4gHp8PDhAOvQ4ADs0OAA4dDxwNDB0MDQwtHj0MPQw9Hi0MEAAR3QIAMT0MDQIAEC0t
AAUMAABBAPMKIA6dDkAeXR5wXkAsZmxhZ3M9MCxwYW5feAgAz3k9MCx6b29tPTd9LIYAGzUtDx_I
ALMNGx6tKx6dOx6NS4wANQsMK4wA-wULDDsOAA5New4QDi2LDiAemw5Aro0AIPACbw8vHw4QDn8P
Px8OAA5-D08HAIEfDw8cDw8PHAgAcR8PHC8fHj8PAIQfHw8cPx8eLyAAFR8gADBPD48lABCfHQAy
rx8eKwAXDwQATS8fHg8VACI-H2wBL-4BuwAcMv4B3zsAHy3GARYjHi0KABs9dAAfMXQAEbR3BgT-
HWj-HGUfHQUAww8dAA7-HGMOIP5jEEsAHzJLAAMaMksAEERLAHCPHA8d-xw2BQAQAgUAEAFUAPUA
RR8dTxwfHb8cPx1vHB8dJAAiPxwZADFPHA8EADEfHB8hAAUyABevFQAJNgATHxkAADYAMV8cPxAA
FD86ADMPHA8EAEIfHd8cEAAaT0IAUS8dLxwvPgBjfxwvHV8c-wANvgA0-x1pGAEPBQD2DyECAB8w
IQIRXBAQBPDwMQAzLjc1NAAQNQsAATcAHzU3ADQBlgQYGpYEwQ5dDi0eHS49Lh0eLQwAAE0D-gkN
vxwNHg0MngwNDgAODQx_DA0OEA4dfB0QBQ_AAD2AHQoevRoerSqDABEKgwATCoMAEBouAM58Kg4Q
Dj16DiAeDYoHBQ_EABcgbxpJAHF9Og4ADn1KhwD3CT0aDioeHS4dGi4aHi0OHToOKh5Nih49mokA
IB4dhwC-Hg0afCoe2h7a-gF-ACIw-gHaPgDDHioOWg4qHhouOi4aDAAAFgAQCm4A6goNng0KHhoN
fg0aHip9bQAfMW0ACg9eAgcPNwC-AUwCExtMAvIDPT8cTQ4ADi0MPgw9Hj1cPR49CgAIBgABFgAx
Oww9KAARO_IHPj08PdQCD4gAPiEtCwcAIR0bBwBhDSsePVw7iwATO4sAAAgAPj08S_IHD4sAICB-
G4wAIo0rjQAjDTuOABM7dQAqPgwGAHAtC1w7Hh0bhQAxHg0rBwB-SzxLHtse2_ACJvQD2x7bHks-
HEseOw0_DTseO107CgAIBgABFgAkOw0GACpLPXUAD_gCHQ83AGIfM24AUQFgAhMdYAIhTS9gAldd
DF0ebQQAoF0MDw0MTR5NDCt3AiEMS8sKQC0MSww4AL49DCsMLQ4gDj0sLekCD4kANoJNDwwebQw9
G4wAYR0rHk0MKmYCEUrMChMtCAAQPRYAAOkCPwssS_sCLiAdHOsCEiyPACANPJAAcQsNTB5tC1wE
APEOXQwLXB5NDAsPDQtMHj0MCyoLPB4tDAtKCyweHRwHACENPBUAX1wrTB7c8AImydwe3B5cLxxM
HmwNXAQA8wNcDQ8NDUweTA0rDTwePA1LDSwGAAISAC9cLXYAJwVMAh8w8QJaD6UAUgDbARedJAgw
XQ8c4gIA4QIAawIJ6gtCDw8MCwIAgh0eHQsPGgwKAgAQC7oIEx0bACAMC8AIBBYMDsYID6EANjI9
Dx8EAyWtK6UAESulAAOXAIIbHh0KDxoMCQIAIAoLpQADGwAxDAobJwMRDbIAHysMBjI0fR8fIQMi
jTypAHINTB5dCw0LJQNBXXwePSABMAwLLKcAIgsKAgARHKcAIgsJAgBTCgweHQwaAAAcACUNLDQA
H9w3AygD2A0fbd4BIiMeLRkAABsABjIADu4ND1ED9ZCfHg4QDk0PHF0tBVEMDw8MTY0FADAGBzYG
CQYAAhgAQl0MCwzqBR5NExEPjQBJIR0LBwAhDRsHABErGgARO48AEUuPABBbBgAQa_AGEHsQDBaL
KQMfNZEAHjB-Hh_sEaFPHg8cLx4vDw4ACwAA_hAwDx4-DwAQPxoAdg8PHD8PHk8LAAAWACBPDw8A
DwsABxUPLgAAWgACVQAwTw8eSRGZDxxfDx4PHs8PuAIPSAMeGA9EA1NNDC0MPQYAWT0MTQwtBgAC
GAAIbgMPMgMpDzcAYh8wNwD-AB80bgBaHzH2CiUfMqcAJA83AP-------------------57wAQgI
BBAeDx8wLw8fGiAfHQ8HADEPHR8HABEgBwAhHyAVAAAhAFwwHg8fIGQACiYhLTEwXwD2BQ4PGw4P
HzAuDTAvGwswDA4MDTAuAwAfEFAAHecgHxtQHw5AHxsbID4bEAMAHwBKAB2QAFwQHA4sEAwO6STQ
HBAODxwODR8PEA0ODQUlrxAODQ4NGxBcEFxZAB-xED8eHRAeHx8dEA4MHw4PDw0QDC8ODA8PED8O
HBAeGx0EAC8_HVgAHvUAgC8eLRAuLQA-Hz8PTx8vBAAgAC8FAA_mACOwDx8OHRAeHB0QLgypAIAu
DAsNEA4MDgcALh4cpgAPWAAV9wY_HRAPHw0PGg4NDw8AHx8NHx0NHw8IAP8BDxoPDi8PLx8fGi8P
AD8fH78AHzAgHxoIAgCVFQCtAmIPLxwfGhAWJwgJABQ-BQAPYQAggBxADhAOYA4QixliIA0ADRAN
BgAQAAIATx0gDVBTAB3xB0AvDzA_IA8OLg8aEC8ODg8aED8ODx8FACAgLyUDXx8ODx9AVgAd8ACw
HxtAHg0OIA4LLhAOKw71Fr8rDgwQDhsODDAsME4AHaRwXn8fHw8PHw8dBAABoCYACAANGAB-Xx8f
D14fH2MAHUEAPh8fXgIxHgwOeQISHHQCvx0QDhwOCw0QLhsNeQIiYDofGhA6HgMAsBoPDgoeEAot
HhAtCAAgDRoWAA9RAB4v8DAyAP--pg4NCA8yAP--------9PXxIE8P8RMwALHjZkAA8xAP9BD4kB
MlctNy43MgEABEAAgy4yNjE5MDQ3BgAO9DQPTwD-------------------_rUG09N319
:: gfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA1LTAzIDEzOjI2OjA5Iixtb2RpZmllZD0iMjAyNC0w
OS0xMyAyMzoxNzo1NiJdXQ==
:: map/
:: map/0.map
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA1LTAzIDEzOjI2OjEwIixtb2RpZmllZD0iMjAyNC0w
OS0xMyAyMzoxNzo1NiIscmV2aXNpb249NzYyMV1dbHo0AJ4NAAB2QAAA8Ah7e2JtcD11c2VyZGF0
YSgiaTE2Iiw2NAMA_wIiMDAxYjAwMTQwMDMzMDAzNAQAXzUwMDIwHAAIUjEwMDFkRAAjNDYEABcw
DABSNzAwOTcMABM5FABiMTUwMDEzDAAIMAAfYhQAACY0NzgAJjk3PAAvMTQEADQDvACrODEwMDNi
MDAzYwQAX2QwMDI4HAAIFzlEAEA2MDA47ADyCjgwMDkwMDA5MTAwNGYwMDlmMDA0ZTAwOWUIAA8w
AAEAGAAnYmI4AFM4MDA4M0AAADgAEmFIAAQ8AC8xYwQANASMAMA5MDAzYTAwMzIwMDMMAAAQAVA2
MDAzZZEABxwAVmYwMDM3HAAnNThEAMBlMDA4ZjAwNWMwMDkEAfABOTAwNTcwMGE3MDAwZDAwYcQB
H2QwAANnYjEwMGJhOAAARAATNUAAEzYEABY3PAAvMGMEADMFjAAAcQIfOQQAHxc2AAEfMAQAABM1
-AAEBAAmYTUwAGI3NDAwNzMoACJiOQgAD0AACQg8AS8wYwQAMwRQACI4Y9AAYjVhMDA1YgwACAQA
ZjQyMDA0MRAABQQABwAEHzfIAwAmYTIMAAQEAAQwAC40NgQACDAAD1AAAQQ8AC8wYwQAMwRQABc5
AAIQNHAAGzQEAAC4AQDsAxE48wAgMDH4AAAZBQcAAhc3yAMiNGUEAPYDYWEwMGEwMDBhMTAwYTQw
MGEzMAAjYWYUABMxJAASMzAABDwADFAAFzg8AC8wYwQAMwRQACc1OQABAHAAG2MEAB9kAAEPBLQC
AMgDEDhUAtM4MDBiMjAwYTgwMGE5CAAWYjAALmE4HAAAMAAmOWNMAARQACIwYhAEBWwAH2MEADME
UAAvNjEAASQWYUQAIjkyqAABrAASMwABEDgPAJJmMDBiNTAwYjYQAAV0AwscACJiZhQADAABE2EQ
ACZiMTwALzBjBAAzDwABAWs1MzAwNTQEAA8AAwEbYQABA6gBAAQAEzkAAgXkAFJkMDBiZQwADQAB
BxwADwABAhZkJAUEPAAvMGMEADMEUAATNvwADwQAHgiUAwsEAAQAAQwEAAgAAg4EAA8AAQAWZQwA
BWwAH2MEAA8PLAkBFzYMACYxNFAALzE0BAAXBPwALjE0BAAmMDcMAA8EACkmNjYMAC8xNGwAJATc
ABZjBAAXNgwALjFjJAAPBAARBQABHmMEACYwZgwADwQAKSY2ZQwALzFjbAAkA9wALzBkBAAHBSQA
HzkEAL0PAAH-HAiACSYwNxAAAEQEIjI2SAQmNDYEABc2DAAEBACiYzMwMGI3MDBjMQgACQQAFzSQ
BB83BAAYAzQADiAKCoQAACQKJjIz-AAPAAEdBaQJEmFYAwisCRA1tAUH1AkABAAXNgwABAQAI2Ni
ewVWOTAwYzIYAAAEABdikAMvMWYEABgEoAAWNKAAKmEzhAAiYWYkCg8AASoDiAkiYjKEBgSQCQgA
AS8wNAQAD6ZjODAwZDEwMGNhFAAABAAXN-gOLzBkBAAXD6AAASphYiQHIjk1JAoPAAEFLzE0BAAI
AyQAIjgwBAAIqAkuODAAAQ8EABcPAAE7DJwABAABBHQKLzhiAAEIH2MEAAgPjAkMDAABLzY3BAAf
BQABHzQEAAMQNrwDFzcQABY2DAAJoAADnAAJAAEWYXALDwABBS8wNQQABwhgAA4EAA4AASY3NQQA
JjZmDAAPFAAJZzc3MDA3ZHQBDOwHE2IAAQQQABZlDAAPoAAFBAABBAQAHzkAAgAQMqASACAAHzUA
AQ8ESAUIUAUiNzAgACY1MAABDwQAJSY3ZdQCDwQAASYyNwwACAQABKAACUQUB6AGJjcwDAANAAED
5AAPAAISA4wTBIATE2LQDyIxZCsAIjFiyAAvNjcEAB8EAAEETAcOBAAPAAEQCEQUFmaoAACkAG83
MjAwNzEAASwDjBMEgBMEdA8iMWQrAAQAAQ7kAg8EAwsBDAATNgADL2QwAQAEDwABDwhEFCY1NqgA
AKQAbzdhMDA3OQABKwRkDwRoDy8wYgABAQ8EACcmN2VsACsxNAQADwADECYwZAQAJjU2oAAXMEgU
DwABKgdkDi9iOQABBy82NwQAHw0AARtjBAAPAAEQLzQ5AAEBDwACCwEEAB81BAALBWAAA0wECGwY
IjQ2IAAmNTAAAS83NQQAIAAABgfMCSowNAQAHzEEAAkDNAAvNTEAAQcEBAAPAAIpIjRlTAQIbBgi
NGUgACI1MCQALjA3hAsPBAAFIzVkvBkHuAUEbAAqMDQEAC8xYwQACB80BAAXJjA2-AAPAAEdJjBk
YAQmYTZwBCIxZCsAASQAF2bUFQSQCxIzgAsFkAUDjAUjYmKoBRNmUAEHAAMvMDQEABcvMWMEABcQ
MMQDHzkAAiQSOfAADAQAIjFkKwAXMdQSJmIykAsTYYALBJAFBIwDAEAGIjVlSAEEVAEOAAIPBAA8
HzkAAScIYAMIBAAiMWQrAAgAAS84MIgJBwhABio1ZVgBBGwALzA0BAAXDjQIDwQAByIxM-gADwAC
IgOkAx80AAUIBCQFEzSECQgAARA38AAaMkAGKjU3WAEEbAAvMDQEABcvMzgEABcmMWL8AA8AAR4W
ZfwELzRlAAUDBCQFEzSECQ8AAgUPvBsBJjBkbAAvMDQEABcmMWTgAA8AAUkmMGSoAwEMABY3cBwE
AAEE2AAElBEvMTQEAAUPJAAUDigADwQAFwM4AA8AAQUnMjUsAAcEACYwNwwAKjE0AAEMBAAqYTUA
ASJhY9wDDsgIDgQADyQAEg4oAA8EABcDOAAPAAEKHmMEAAGICB5jSAArNDbgAwMEAAkAARJl3AMP
NAEJBAQABSQADwQADAQoACozOAQAITAyWxkFEAAMBAAPOAABDAABLzBigAAXImEw0AcF4AMeZQAE
DDQALzBkBAAHBSQAD4AAFC8zOAQAEBMwGAEHAAEqMTQEAA8AASYD0AcqODBsEg-sCQEENAAvMGQE
AAcFJAAPBAAMBCgALzM4BAAbBDgAKjFjBAAPAAElKjgwBAAEbBIjYWHoCRM0JAIWMzQALzBkBAAH
BSQADwQADAQoAC8zOAQAGwVgAB45BAAPAAExBAQAI2Iy6AkTOAQABzQALzBkBAAHBSQADwQADAQo
AAjcAg8EAAUIIAAFYAAfOQABMw8ABQUEDBMjNWTUDAcAAy4xNFgGDgQADyQADANMAA78AA8EBAcn
Mzg4AB85AAE0G2XgCANYGCJhMMwMBAQAJjRlNAAvMWNYBgUPfAYUFmNMAC8zOAQAGwQ4AAn0AA_E
ARAJXBYXNEgADwQAACI5NQQAJmJhBAAnMGI0AB80BAAvBEwALzM4BAAbBYQADAABH2MEAAsBiBEX
YwQABEgADwQACCo0NgQABDQALzE0WAEIB6QJLzA0BAAHBEwALzM4BAAbBDgADAABLzBkBAAbDgAU
DwgCAAvcDwQ0AC8xY1gBCBZjKAAvMDQEAAcEJAAvMzj4AxMEBAAFXAAfOQABNB5kwA4EBAAM3A8P
AAoRCFwALzA0BAAHBCQABeAFC_gAD-wFASczOFwADwABQRY5DAAPaBUBBXwAH2RcABMvMDQEAAcE
JAAI6AEM7AAOBAAPAAFABwAWDwQABQ8AAk0PBAASAyACBVwADwABNB8wBAAYBTQAH2RcABQfNAQA
BwQkAC8zOAQAGwVcAA8AATQFtAUfNNgIAQ8EACQDXAAvMDQEAAcEJAAvMzgEABsFXAAPAAE1H2ME
AAMmMGYMAA8EAB4eNAQAJjYyDAAPBAAVJjY1DAAMBAAmMDkEACo0NgQADagXA9QTD8wHAS8wOQQA
Py4xYwQAJjZhDAAPBAAVJjZkDAANoAEHcAAjNGWoDRNmtA0TYaAXFjC0EwTMBythZlAtHzkEACcu
MTWAFQ8EAGEnODioDRM5vA0SYhAAIjljkBYEzAcE3AoPAAQOA1wALzE0BAAIAEwDHjBIAQ8AAWEv
ODAEAAMFAAEfMswHAy8xYwQAAwRcAC8xYwQACAcAASc3NxgBDwQAFQMoCy8xNAQAFy43NkAALjg4
wBENAAEfYcwHAwgAMA8EAB0ARAAiMmVsIg4IDg8EABAOhAEPyAwbA0AALjg4wBEJAAESN-wADwAC
AS82MfwyBw8AMxUOuAkPzAYcH2QEACMOAAEOBAANAAELzAkEAC8P-DICDwAzFAigCQ8EABkEQAAv
MGQEACMEQAAPxBEGHzfgGgsBfAAP-DEJDwAzFC8zOAQAIwWEAB9kBAAjBEAALzRlxBEDLzRm4BoL
DwABKgcAMi8zOAQAIwWEAB9kBAAjBUAADwQAACM5NfgCD_AaCAgABQ8AAakAxBAXNRAqEzAEAAQA
AQwEAC5hNQA0D-wzAg8ANAkHRAUvMzgEABMMKAUEQAAvMGQEACMMxA4ABAETOfwAJjBivBUqNWTM
FS81ZAA0MBY5RAAvMzj8ABQLJAUEQAAvMGQEACMFQAAPBAAEH2IEAAgFPAAfOQQAJwRoKi8zOAQA
IwWEAB9kBAAjBUAADwQABC9iYQQABwQ8AC8yNgQA5fMPIiksaGlkZGVuPWZhbHNlLHBhbl94PS0y
MzEuMDgzAQARNhcAlHk9LTE3Mi41MAEAsjEsdGlsZV9oPTE2CgAQdwoAgHpvb209MX19
:: map/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA1LTAzIDEzOjI2OjA5Iixtb2RpZmllZD0iMjAyNC0w
OS0xMyAyMzoxNzo1NiJdXQ==
:: pal/
:: pal/0.pal
b64$LS1bW3BvZCxyZXZpc2lvbj0xNjg3LGJnX2NvbG9yPTAsb2twYWxfdmVyc2lvbj0iMC4wLjQi
LGhpZGRlbl90b2dnbGVzPXtbMF09ZmFsc2UsZmFsc2UsZmFsc2UsZmFsc2V9LGhpZGRlbj17WzBd
PWZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZh
bHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNl
LGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZh
bHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNl
LGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZh
bHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNl
LGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlfSxjcmVhdGVkPSIyMDI0
LTA2LTI4IDE4OjA5OjQwIixsb2NrZWQ9e1swXT10cnVlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNl
LGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZh
bHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNl
LGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZh
bHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNl
LGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZh
bHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNlLGZhbHNl
LGZhbHNlLGZhbHNlfSxtb2RpZmllZD0iMjAyNC0wOS0xMyAyMzoxNzo1NiIsYmxhY2tlc3RfY29s
b3I9MCx0ZXN0X2N1YmVfY29sb3JzPXtbMF09ezE1LDMxLDR9LHszMSw0LDIwfSx7NCwyMCwyMX0s
ezEwLDksMjV9LHs5LDI1LDI0fSx7OCwyNCwyfSx7MjYsMTEsMjd9LHsxMSwyNywzfSx7MjcsMywx
OX0sezI4LDE3LDE5fSx7MjgsMTIsMTZ9LHsxMiwxNiwxfSx7NiwyOSwxM30sezI5LDEzLDE4fSx7
MTMsMTgsMX0sezcsMjMsMTR9LHsyMywxNCwxM30sezE0LDMwLDE4fSx7Nyw2LDIyfSx7NiwyMiw1
fSx7MjIsNSwyMX0sezEsMSwxfSx7MSwxLDF9LHsxLDEsMX19LHdoaXRlc3RfY29sb3I9N11dbHo0
AOsAAAAVAgAA9QV1c2VyZGF0YSgiaTMyIiw2NCwiMAEA9hdkYWVkNjEwMDc2Y2MzZDAwMjA0MjU0
MDA3MzQ1NmIwMDc0YjBjZigAfTIxNTJhNTABAGZiODljZTkgAAAIAKA1YTAwZWViMjRhQAChZDRj
OTAwZGM2Mj8AUWYyNzMzWADwAjNlYjAwY2M2MTE0MDA5OTcxgAB9OWRjNDg5MAEABCgADAEAQDg0
NDcvAPAONWE4YmRlMDAyNzJhMzIwMDU1OTI3ZjAwZmZkMThwAFZlYWRhNegABGgABOgADwEAVQRg
AQTwAA8BAFZwMTAxMDEiKQ==
:: pal/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA2LTI4IDE4OjA5OjQwIixtb2RpZmllZD0iMjAyNC0w
OS0xMyAyMzoxNzo1NiJdXQ==
:: sfx/
:: sfx/0.sfx
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA1LTAzIDEzOjI2OjEwIixtb2RpZmllZD0iMjAyNC0w
OS0xMyAyMzoxNzo1NiIscmV2aXNpb249NjI0NF1dbHo0AA0BAADTFwAA-yxweHUAAygAAAQABA9A
EAIOAAGgASACoA4ADxAADfDKAQIDBAUGBwAP-5AICQoLDwwPDQ8ODw8AD--w-wEA6-8n0gEQBg8g
EAEgASAB8AACEAIMEAEgDyEgATAPQPDDDygP--DGD-gKD-8PgA-3Dw0B8AkBEAYMMAAcIg9AMQCD
D2-gAhACDz0zAE-wxw9CYgAdDzAA------9FH-8BAKz-Q8gPQAACQA8bDx5vNT82D04PUR9UH1Yf
Vw9WHz9vOQ8f--8QAAGigBFiAf4QDz0PP19AXz8PPg89TzwfOx86LzlfOA85HgH_CvBwD0AADxBA
-rAKAP-------------------3xQ-rDw-zk=
:: sfx/.info.pod
b64$LS1bW3BvZCxjcmVhdGVkPSIyMDI0LTA1LTAzIDEzOjI2OjA5Iixtb2RpZmllZD0iMjAyNC0w
OS0xMyAyMzoxNzo1NiJdXQ==
:: character.lua
--[[pod_format="raw",created="2024-05-05 22:21:00",modified="2024-09-13 23:17:56",revision=7132]]
include './types.lua'
include './util.lua'

character=entity:new({
   col_point = { x=0, y=0 },
   select_point = { x=0, y=0},
	i_dir = direction.down,
	spd=0.60,
	anim_spd=1,
	health = 60,
	pain = 10,
	hunger = 10,
	thirst = 50,
	state = "idle",
	start_idle = nil,
	start_move = nil,
})

man=character:new({
	x=90,
   y=86,
   max_width = 21,
   max_height = 34,
	wound_health = 60,
	delirium = 0,
	d_i_f = {sf = 252, nf = 2, s = 0.5, fl = false},
	u_i_f = {sf = 254, nf = 2, s = 0.5, fl = false},
	l_i_f = {sf = 244, nf = 2, s = 0.5, fl = true},
	r_i_f = {sf = 244, nf = 2, s = 0.5, fl = false},
	d_m_f = {sf = 228, nf = 4, s = 4, fl = false},
	u_m_f = {sf = 236, nf = 4, s = 4, fl = false},
	l_m_f = {sf = 212, nf = 4, s = 4, fl = true},
	r_m_f = {sf = 212, nf = 4, s = 4, fl = false},
})

function move_man(c)
	_btn = btn()
	_w, _a, _s, _d = key("w"), key("a"), key("s"), key("d")
	_none = true
	if (_w or _a or _s or _d) _none = false 
	if _btn != button.none or not _none then
		local speed = c.spd
		if key("shift") then 
			speed*=1.5
			c.anim_spd=1.5
		else
			speed*=1
			c.anim_spd=1
		end
		speed*=c.anim_spd
		c.state, c.start_move = "moving", time()
		c.col_point = { x = (c.x+(c.max_width/2)), y = (c.y+(c.max_height/2)) }
		if _btn == button.down_right or (_s and _d) then
			c.i_dir = direction.down
			c.col_point = { x = c.x+c.max_width, y = c.y+c.max_height}
			c.select_point = { x = (c.x+c.max_width)-8, y = (c.y+c.max_height)-8 }
			c.y, c.x = c.y + (0.50 * speed), c.x + (1 * speed)
			if collide(c) == true then
				c.y, c.x = c.y - (0.50 * speed), c.x - (1 * speed)
			end
		elseif _btn == button.up_left or (_w and _a) then
			c.i_dir = direction.up
			c.col_point = { x = c.x, y = c.y}
			c.select_point = { x = c.x+8, y = c.y+8 }
			c.y, c.x = c.y - (0.50 * speed), c.x - (1 * speed)
			if collide(c) == true then
				c.y, c.x = c.y + (0.50 * speed), c.x + (1 * speed)
			end
		elseif _btn == button.up_right or (_w and _d) then
			c.i_dir = direction.up
			c.col_point = { x = c.x+c.max_width, y = c.y }
			c.select_point = { x = ((c.x+c.max_width)-8), y = (c.y+8) }
			c.y, c.x = c.y - (0.50 * speed), c.x + (1 * speed)
			if collide(c) == true then
				c.y, c.x = c.y + (0.50 * speed), c.x - (1 * speed)
			end
		elseif _btn == button.down_left or (_s and _a) then
			c.i_dir = direction.down
			c.col_point = { x = c.x+1, y = c.y+c.max_height}
			c.select_point = {x = (c.x+1)+8, y = (c.y+c.max_height)-8}
			c.y, c.x = c.y + (0.50 * speed), c.x - (1 * speed)
			if collide(c) == true then
				c.y, c.x = c.y - (0.50 * speed), c.x + (1 * speed)
			end
		elseif _btn == button.right or _d then
			c.i_dir = direction.right
			c.col_point = { x = c.x+c.max_width, y = c.y+(c.max_height/2)}
			c.select_point = { x = (c.x+c.max_width)-8, y = c.y+(c.max_height/2)}
			c.x = c.x + (1 * speed)
			if collide(c) == true then
				c.x = c.x - (1 * speed)
			end
		elseif _btn == button.left or _a then
			c.i_dir = direction.left
			c.col_point =  { x = c.x, y = c.y+(c.max_height/2)}
			c.select_point = { x = c.x+8, y = c.y+(c.max_height/2) }
			c.x = c.x - (1 * speed)
			if collide(c) == true then
				c.x = c.x + (1 * speed)
			end
		elseif _btn == button.down or _s then
			c.i_dir = direction.down
			c.col_point = { x = c.x+(c.max_width/2), y = c.y+c.max_height}
			c.select_point = { x = c.x+(c.max_width/2), y = (c.y+c.max_height)-8 }
			c.y = c.y + (1 * speed)
			if collide(c) == true then
				c.y = c.y - (1 * speed)
			end
		elseif _btn == button.up or _w then
			c.i_dir = direction.up
			c.col_point = { x = c.x+(c.max_width/2), y = c.y}
			c.select_point = { x = c.x+(c.max_width/2), y = (c.y+8) }
			c.y = c.y - (1 * speed)
			if collide(c) == true then
				c.y = c.y + (1 * speed)
			end
		end
		
	else
		c.state = "idle"
		c.col_point = { x = (c.x+(c.max_width/2)), y = (c.y+(c.max_height/2)) }
		c.start_idle = time()
	end
end

function animate_character(c)
	ovalfill(c.x+4, c.y+c.max_height-3, c.x+c.max_width-4, c.y+c.max_height+1, 0)
	if c.state == "idle" then
		if c.i_dir == direction.down then
			animate_sprite(
				c,
				c.d_i_f.sf,
				c.d_i_f.nf,
				c.d_i_f.s,
				c.d_i_f.fl
			)
		elseif c.i_dir == direction.up then
			animate_sprite(
				c,
				c.u_i_f.sf,
				c.u_i_f.nf,
				c.u_i_f.s,
				c.u_i_f.fl
			)
		elseif c.i_dir == direction.left then
			animate_sprite(
				c,
				c.l_i_f.sf,
				c.l_i_f.nf,
				c.l_i_f.s,
				c.l_i_f.fl
			)
		elseif c.i_dir == direction.right then
			animate_sprite(
				c,
				c.r_i_f.sf,
				c.r_i_f.nf,
				c.r_i_f.s,
				c.r_i_f.fl
			)
		end
	end
	if c.state == "moving" then
		if c.i_dir == direction.right then
			animate_sprite(
				c,
				c.r_m_f.sf,
				c.r_m_f.nf,
				c.r_m_f.s,
				c.r_m_f.fl
			)
		elseif c.i_dir == direction.left then
			animate_sprite(
				c,
				c.l_m_f.sf,
				c.l_m_f.nf,
				c.l_m_f.s,
				c.l_m_f.fl
			)
		elseif c.i_dir == direction.down then
			animate_sprite(
				c,
				c.d_m_f.sf,
				c.d_m_f.nf,
				c.d_m_f.s,
				c.d_m_f.fl
			)
		elseif c.i_dir == direction.up then
			animate_sprite(
				c,
				c.u_m_f.sf,
				c.u_m_f.nf,
				c.u_m_f.s,
				c.u_m_f.fl
			)
		end	
	end
end

function scan_character_area(c)
	local current_cel = { x = flr(c.select_point.x/_tile_size), y = flr(c.select_point.y/_tile_size) }
	local tr_co = { x = current_cel.x + 1, y = current_cel.y - 1 }
	local tr_spr = mget(tr_co.x, tr_co.y)
	local tr_f = fget(tr_spr)
	local tl_co = { x = current_cel.x - 1, y = current_cel.y - 1 }
	local tl_spr = mget(tl_co.x, tl_co.y)
	local tl_f = fget(tl_spr)
	local t_co = { x = current_cel.x, y = current_cel.y - 1 }
	local t_spr = mget(t_co.x, t_co.y)
	local t_f = fget(t_spr)
	local r_co = { x = current_cel.x + 1, y = current_cel.y }
	local r_spr = mget(r_co.x, r_co.y)
	local r_f = fget(r_spr)
	local l_co = { x = current_cel.x - 1, y = current_cel.y }
	local l_spr = mget(l_co.x, l_co.y)
	local l_f = fget(l_spr)
	local br_co = { x = current_cel.x + 1, y = current_cel.y + 1 }
	local br_spr = mget(br_co.x, br_co.y)
	local br_f = fget(br_spr)
	local bl_co = { x = current_cel.x - 1, y = current_cel.y +1 }
	local bl_spr = mget(bl_co.x, bl_co.y)
	local bl_f = fget(bl_spr)
	local b_co = { x = current_cel.x, y = current_cel.y + 1 }
	local b_spr = mget(b_co.x, b_co.y)
	local b_f = fget(b_spr)
--	local bx_co = { x = current_cel.x, y = current_cel.y + 2 }
--	local bx_spr = mget(bx_co.x, bx_co.y)
--	local bx_f = fget(bx_spr)
--	local bxr_co = { x = current_cel.x+1, y = current_cel.y + 2 }
--	local bxr_spr = mget(bxr_co.x, bxr_co.y)
--	local bxr_f = fget(bxr_spr)
--	local bxl_co = { x = current_cel.x-1, y = current_cel.y + 2 }
--	local bxl_spr = mget(bxl_co.x, bxl_co.y)
--	local bxl_f = fget(bxl_spr)
	local c_co = { x = current_cel.x, y = current_cel.y }
	local c_spr = mget(c_co.x, c_co.y)
	local c_f = fget(c_spr)
	
	if tr_f != 0 then
		add(_flagged_tiles,{ tile_co = tr_co, sprite = tr_spr, flags = tr_f })
	end
	if tl_f != 0 then
		add(_flagged_tiles,{ tile_co = tl_co, sprite = tl_spr, flags = tl_f })
	end
	if t_f != 0 then
		add(_flagged_tiles,{ tile_co = t_co, sprite = t_spr, flags = t_f })
	end
	if r_f != 0 then
		add(_flagged_tiles,{ tile_co = r_co, sprite = r_spr, flags = r_f })
	end
	if l_f != 0 then
		add(_flagged_tiles,{ tile_co = l_co, sprite = l_spr, flags = l_f })
	end
	if br_f != 0 then
		add(_flagged_tiles,{ tile_co = br_co, sprite = br_spr, flags = br_f })
	end
	if bl_f != 0 then
		add(_flagged_tiles,{ tile_co = bl_co, sprite = bl_spr, flags = bl_f })
	end
	if b_f != 0 then
		add(_flagged_tiles,{ tile_co = b_co, sprite = b_spr, flags = b_f })
	end
--	if bx_f != 0 then
--		add(_flagged_tiles,{ tile_co = bx_co, sprite = bx_spr, flags = bx_f })
--	end	
--	if bxr_f != 0 then
--		add(_flagged_tiles,{ tile_co = bxr_co, sprite = bxr_spr, flags = bxr_f })
--	end	
--	if bxl_f != 0 then
--		add(_flagged_tiles,{ tile_co = bxl_co, sprite = bxl_spr, flags = bxl_f })
--	end	
	if c_f != 0 then
		add(_flagged_tiles,{ tile_co = c_co, sprite = c_spr, flags = c_f })
	end
end

function update_character_vitals(c)
	if c.state == "idle" and c.health < 70 then
		last_update_move, current_update = 0, time_since(start_idle, time(), true)
		if current_update != last_update_idle then
			last_update_idle = current_update
			c.health += 0.05
			c.hunger += 0.01
			c.thirst += 0.02
			if c.wound_health < 50 then
				c.wound_health += 0.01
			end
			if c.pain > 50 then
				c.pain -= 0.05
			end
		end
	end
	if c.state == "moving" then
		last_update_idle, current_update = 0, time_since(start_move, time(), true)
		if current_update != last_update_move then
			last_update_move = current_update
			c.health -= 0.65
			c.wound_health -= 0.25
			c.pain += 0.1
			c.hunger += 0.1
			c.thirst += 0.1
		end
	end
	if c.health < 50 and c.wound_health < 50 then
		if _blood_splatter_update == nil or time_since(_blood_splatter_update, time(), true) > 3 then
			_blood_splatter_update = time()
			add(_blood_splatters, { x = c.x, y = (c.y+c.max_height)-4 })
		end 
		if c.pain > 70 and c.hunger > 50 and c.thirst > 50 then
			last_update_idle, current_update = 0, time_since(start_move, time(), true)
			if current_update != last_update_move then
				last_update_move = current_update
				c.delirium += 0.1
			end
		end
	end
end

function draw_blood_splatter()
	if table_length(_blood_splatters) > 0 then
		for i,b in pairs(_blood_splatters) do
			ovalfill(b.x+5, b.y, b.x+13, b.y+3, 18)
		end
	end
end
:: containers.lua
--[[pod_format="raw",created="2024-06-18 20:28:00",modified="2024-09-13 23:17:56",revision=2628]]
include './types.lua'
include './util.lua'

container=entity:new({
	max_capacity = 10,
	small_icon = 0,
	in_range_sprite = 0,
	in_range = false,
	contents = {},
})

function init_containers()
	_containers["1_2"] = container:new({
		max_capacity=10,
		small_icon = 138,
		in_range_sprite = 130,
		in_range_sprite_adjustment = {x=0,y=-16},
		in_range = false,
		contents = {
			container_slot:new(
				{
					quantity = 1, 
					item = water_bottle:new({})
				}
			)
		}
	})
	_containers["1_4"] = container:new({
		max_capacity=25,
		small_icon = 141,
		in_range_sprite = 133,
		in_range_sprite_adjustment = {x=-2,y=-16},
		in_range = false,
		contents = {
			container_slot:new(
				{
					quantity = 1, 
					item = water_bottle:new({})
				}
			)
		}
	})
	_containers["24_5"] = container:new({
		max_capacity=20,
		small_icon = 184,
		in_range_sprite = 176,
		in_range_sprite_adjustment = {x=0,y=7},
		in_range = false,
		contents = {
			container_slot:new(
				{
					quantity = 1, 
					item = water_bottle:new({})
				}
			)
		}
	})
end
:: context_menu.lua
--[[pod_format="raw",created="2024-06-19 22:02:44",modified="2024-09-13 23:17:56",revision=2244]]
context_menu=entity:new({
	x = 0,
	y = 0,
	oo_ui = true,
	open = false,
	options={},
	max_width = 60,
	current_obj = nil,
})

context_option=entity:new({
	name = nil,
	m_is_on = false,
	action = nil
})

context_menu_actions = {
	consume = "Consume",
	discard = "Discard",
	use = "Use",
	equip = "Equip",
}

function draw_context_menu()
	if _cm.open then
		if _m_x > (_cm.x-10)
		and _m_x < (_cm.x+64)
		and _m_y > (_cm.y-10)
		and _m_y < (_cm.y+(table_length(_cm.options)*10)) then
			_cm.open = true
		else
			_cm.open = false
			_cm.options = {}
		end	
		
		local current_offset = 0
		for i, o in pairs(_cm.options) do
			rectfill(_cm.x, _cm.y+current_offset, _cm.x+60, _cm.y+current_offset+12,0)
			rect(_cm.x, _cm.y+current_offset, _cm.x+60, _cm.y+current_offset+12,23)
			print(o.name, _cm.x+2, _cm.y+1+current_offset)
			if _m_x > _cm.x 
			and _m_x < _cm.x+60 
			and _m_y > _cm.y+current_offset 
			and _m_y < _cm.y+current_offset+12 then
				rect(_cm.x+1, _cm.y+current_offset+1, _cm.x+59, _cm.y+current_offset+11,2)
				o.m_is_on = true
			end
			current_offset += 12
		end
	end	
end

function update_context_menu(obj)
	local s_x, s_y = _m_x, _m_y+6
	_cm.open = true
	_cm.options = {}
	_cm.current_obj = obj
	_cm.x, _cm.y = s_x, s_y
	if obj.type == object_type.item then
		if obj.item_type == item_type.consumable then
			add(_cm.options, context_option:new({name = context_menu_actions.consume, action = obj.consume}))
			add(_cm.options, context_option:new({name = context_menu_actions.discard}))
		end
	end
end

function execute_context_menu_option(c, a)
	if _cm.open and _m_l_b then
		for i, o in pairs(_cm.options) do
			if o.m_is_on then  
				o.action(_cm.current_obj, c, a)
			end
		end
	end
end
:: inventory.lua
--[[pod_format="raw",created="2024-05-14 20:53:29",modified="2024-09-13 23:17:56",revision=6262]]
include './types.lua'
include './util.lua'
include './items.lua'

inventory=entity:new({
	max_width = 119,
	max_height = 68,
	max_capacity = 10,
	inv_starting_x = 0,
	cont_starting_x = 0,
	c_i_starting_y = 5,
	oo_ui = true,
	open = false,
	total_weight = 0,
	capacity = 10,
	selected_container = 1,
	contents={},
})

function dc_in_range_any(t)
	for i, dc in pairs(t) do
		if dc.in_range then
			return true
		end
	end
	return false
end

function remove_item_from_container(ccc, item)
	for i, cc in pairs(ccc.contents) do
		if cc.item.sprite == item.sprite then
			if cc.quantity <= 1 then
				del(ccc.contents,cc)
			else
				cc.quantity -=1
			end
		end
	end
end

function add_to_inventory(c_i, cc, item)
	local existing_item_index = 0
	local total_weight = 0
	for i, s in pairs(c_i.contents) do
		if s.item.sprite == item.sprite then
			existing_item_index = i
		end
		total_weight += s.item.weight * s.quantity
	end
	if (total_weight + item.weight) > c_i.max_capacity then
		print("Can't carry anymore.", _m_x, _m_y+6, 8)
		return
	end
	if existing_item_index > 0 then
		c_i.contents[existing_item_index].quantity += 1
	else
		slot = container_slot:new({quantity = 1, item = item})
		add(c_i.contents, slot)
	end
	remove_item_from_container(cc, item)
end

function display_inventory_contents(c_i)
	local current_y = flr(c_i.c_i_starting_y+13)
	print("Inventory", c_i.inv_starting_x+11, current_y-11, 23)
	c_i.total_weight = 0
	for i, c in ipairs(c_i.contents) do
		local m_is_on = false
		c.starting_x = c_i.inv_starting_x
		c.starting_y = current_y
		c.ending_x = c_i.inv_starting_x+114
		c.ending_y = current_y+8
		if (_m_x) > c.starting_x
			and (_m_x) < c.ending_x
			and (_m_y) > c.starting_y
			and (_m_y) < c.ending_y then
			m_is_on = true
			rect(c.starting_x-1, c.starting_y-2, c.ending_x+1, c.ending_y+1, 2)
		end
		spr(c.item.sprite,c_i.inv_starting_x,current_y, 23)
		print(c.item.name,c_i.inv_starting_x+11, current_y, 23)
		print(c.item.weight, c_i.inv_starting_x+80, current_y, 23)
		print(c.quantity, c_i.inv_starting_x+103, current_y, 23)
		current_y+=10
		c_i.total_weight += (c.item.weight*c.quantity)
		if(m_is_on) then
			if _m_r_b then
				update_context_menu(c.item)
			end
		end
	end
end

function display_container_contents(c_i)
	local current_y = flr(c_i.c_i_starting_y+13)
	print("Container(s)", c_i.cont_starting_x+11, current_y-11, 23)
	local cont_icn_x = c_i.cont_starting_x+2
	local cont_icn_y = current_y+45
	for i, cc in pairs(_discovered_containers) do
		if cc.in_range == true then
			local cont_icn_b_s_x = cont_icn_x - 1
			local cont_icn_b_s_y = cont_icn_y - 1
			local cont_icn_b_e_x = cont_icn_x + 8
			local cont_icn_b_e_y = cont_icn_y + 8
			if i == c_i.selected_container or c_i.selected_container == 1 then
				c_i.selected_container = i
				rect(cont_icn_b_s_x, cont_icn_b_s_y, cont_icn_b_e_x, cont_icn_b_e_y, 2)
				spr(cc.small_icon, cont_icn_x, cont_icn_y)
				for j, ccc in ipairs(cc.contents) do
					local m_is_on = false
					ccc.starting_x = c_i.cont_starting_x
					ccc.starting_y = current_y
					ccc.ending_x = c_i.cont_starting_x+114
					ccc.ending_y = current_y+8
					if (_m_x) > ccc.starting_x
					and (_m_x) < ccc.ending_x
					and (_m_y) > ccc.starting_y
					and (_m_y) < ccc.ending_y then
						rect(ccc.starting_x-1, ccc.starting_y-2, ccc.ending_x+1, ccc.ending_y+1, 2)
						m_is_on = true
					end
					spr(ccc.item.sprite, c_i.cont_starting_x,current_y)
					print(ccc.item.name, c_i.cont_starting_x+11, current_y, 23)
					print(ccc.item.weight, c_i.cont_starting_x+80, current_y, 23)
					print(ccc.quantity, c_i.cont_starting_x+100, current_y, 23)
					current_y+=10
					if(m_is_on) then
						if _m_l_b then
							add_to_inventory(c_i, cc, ccc.item)
						elseif _m_r_b then
							update_context_menu(ccc.item)
						end
					end
				end
			else
				rect(cont_icn_b_s_x, cont_icn_b_s_y, cont_icn_b_e_x, cont_icn_b_e_y, 21)
				spr(cc.small_icon, cont_icn_x, cont_icn_y)
				if _m_l_b and ((_m_x) > cont_icn_b_s_x
				and (_m_x) < cont_icn_b_e_x
				and (_m_y) > cont_icn_b_s_y
				and (_m_y) < cont_icn_b_e_y) then
					c_i.selected_container = i	
				end
			end
			cont_icn_x+=10
		end
	end
end

function show_inventory(c_i)
	if      (_m_x) > _c_x-360
		and (_m_x) < (_c_x-121)
		and (_m_y) > _c_y
		and (_m_y) < (_c_y + 6)
	then
		c_i.oo_ui = false
		c_i.open = true
	else
		c_i.oo_ui = true
	end
	if c_i.open == true then
		spr(inv_sprites.open,_c_x-360,c_i.c_i_starting_y)
		spr(inv_sprites.open,(_c_x-240)+1,c_i.c_i_starting_y)
	else
		spr(inv_sprites.closed,_c_x-360,c_i.c_i_starting_y)
		spr(inv_sprites.closed,(_c_x-240)+1,c_i.c_i_starting_y)
	end	
	if not ((_m_y) < (c_i.c_i_starting_y+c_i.max_height)) and 
		((_m_l_b == true
		and c_i.oo_ui == true)
		or (_m_r_b == true 
		and c_i.oo_ui == true))
	then
		c_i.open = false
	end
end

function display_inventory_weight(c_i)
	local s_x = c_i.inv_starting_x-1
	local s_y = c_i.c_i_starting_y+1
	local p_c = (c_i.total_weight / c_i.capacity) * 100
	local p_r = (7.3/100)*p_c
	local e_x = s_x + p_r
	local e_y = s_y + p_r
	local colour = 0
	if p_c <= 25 then
		colour = 28
	elseif p_c > 25 and p_c <= 50 then
		colour = 26
	elseif p_c > 50 and p_c <= 75 then
		colour = 9
	else
		colour = 8
	end
	rectfill(s_x, s_y, e_x, e_y, colour)
end

function update_inventory(c_i)
	c_i.inv_starting_x = flr(_c_x-358)
	c_i.cont_starting_x = flr(_c_x-237)
	c_i.c_i_starting_y = flr(_c_y+4)
	show_inventory(c_i)
	if c_i.open then
		display_inventory_contents(c_i)
		display_inventory_weight(c_i)
		if table_length(_discovered_containers) > 0 and dc_in_range_any(_discovered_containers) then
			display_container_contents(c_i)
		else
			c_i.selected_container = 1
		end
	end	
end

inv_sprites={
	closed=(gfx_offset.gfx_3+4),
	open=(gfx_offset.gfx_3+5)
}
:: items.lua
--[[pod_format="raw",created="2024-05-30 22:52:53",modified="2024-09-13 23:17:56",revision=4718]]
item=entity:new({
	type = object_type.item,
	sprite = 0,
	name = "",
	amount = 100,
	weight = 1.0,
	item_type = nil
})

item_type = {
	consumable = 1,
	junk = 2,
	useable = 3,
	special = 4,
	unique = 5,
	readable = 6,
}

-----------------
-- CONSUMABLES --
-----------------

consumable=item:new({
	item_type = item_type.consumable,
	is_hot = false,
	thirst = 0,
	hunger = 0,
	exhaustion = 0,
	delirium = 0,
	wound_health = 0,
	health = 0,
	pain = 0,
	can_heat = false,
	hot_offset = 0,
	cold_offset = 0,
	consume = function(self, o)
		local offset = 0
		if is_hot then
			offset = self.hot_offset
		else
			offset = self.cold_offset
		end
		o.thirst -= (self.thirst + offset)
		o.hunger -= (self.hunger + offset)
		o.exhaustion -= (self.exhaustion + offset)
		o.delirium -= (self.delirium + offset)
		o.pain -= self.pain
		o.wound_health += self.wound_health
		o.health += self.health
	end,
	heat = function(self)
		self.is_hot = true
	end
})

water_bottle=consumable:new({
	sprite = (gfx_offset.gfx_3+130),
	name = "Water Bottle",
	weight = 0.8,
	thirst = 20,
})

fizzy_drink_can=consumable:new({
	sprite = (gfx_offset.gfx_3+128),
	name = "Fizzy Drink",
	weight = 0.6,
	thirst = 15,
	hunger = 3,
	delirium = 1,
})

energy_drink=consumable:new({
	sprite = (gfx_offset.gfx_3+129),
	name = "Energy Drink",
	weight = 0.5,
	thirst = 10,
	exhaustion = 10,
	delirium = 5,
})

antiseptic=consumable:new({
	sprite = (gfx_offset.gfx_3+136),
	name = "Antiseptic",
	weight = 0.4,
	wound_health = 20,
})

suture_needle=consumable:new({
	sprite = (gfx_offset.gfx_3+137),
	name = "Suture Needle"
	weight = 0.1,
	wound_health = 25,
})

painkillers=consumable:new({
	sprite = (gfx_offset.gfx_3+138),
	name = "Painkillers",
	weight = 0.05,
	pain = 10,
})

canned_clams=consumable:new({
	sprite = (gfx_offset.gfx_3+138),
	name = "Clams",
	delirium = 2,
	hunger = 9,
	hot_offset = 5,
	cold_offset = -5,
	weight = 0.4,
})

canned_mushrooms=consumable:new({
	sprite = (gfx_offset.gfx_3+138),
	name = "Mushrooms",
	weight = 0.4,
	hunger = 10,
	can_heat = true,
	hot_offset = 5,
	cold_offset = -5,
})

jarred_kimchi=consumable:new({
	sprite = (gfx_offset.gfx_3+138),
	name = "Kimchi",
	weight = 0.35,
	hunger = 8,
	thirst = 4,
	delirium = -2,
})

canned_minced_prawn=consumable:new({
	sprite = (gfx_offset.gfx_3+138),
	name = "Minced Prawn",
	weight = 0.4,
	can_heat = true,
	hunger = 10,
	hot_offset = 10,
	cold_offset = -5,
})

jarred_veg=consumable:new({
	sprite = (gfx_offset.gfx_3+138),
	name = "Vegetables",
	weight = 0.4,
	hunger = 12,
	thirst = 5,
	delirium = -8,
})

canned_sardines=consumable:new({
	sprite = (gfx_offset.gfx_3+138),
	name = "Sardines",
	weight = 0.2,
	hunger = 10,
})

lunch_meat=consumable:new({
	sprite = (gfx_offset.gfx_3+138),
	name = "Lunch Meat",
	weight = 0.35,
	can_heat = true,
	hunger = 18,
	hot_offset = 2,
})

canned_beans=consumable:new({
	sprite = (gfx_offset.gfx_3+138),
	name = "Beans",
	weight = 0.4,
	can_heat = true,
	hunger = 12,
	cold_offset = -4,
})

canned_tofu=consumable:new({
	sprite = (gfx_offset.gfx_3+138),
	name = "Tofu",
	weight = 0.4,
	can_heat = true,
	hot_offset = 5,
	cold_offset = -4,
	hunger = 10,
	delirium = -4,
})

--------------
-- Readable --
--------------
readable=item:new({
	item_type = item_type.readable,
	open_sprite = 0,
	read = function(self)
		
	end
})

note=readable:new({
	open_sprite = (gfx_offset.gfx_3+120),
})
----------
-- Tool --
----------

:: label.png
b64$iVBORw0KGgoAAAANSUhEUgAAAeAAAAEOCAIAAADe_FMwAAAnk0lEQVR4Ae2df2wb55nnH7PC
WmHtC3yB1H9iTuC2DByZUM4Xx6kSZlFm2zcBDSNFjSa3lXIoLjCT2gQr7hSHtslu0J-Y3GAcYbxO
OE2Rrs32koUXCbQWstO9aAHzrEUiny8Gy7XNGr4OXeQPCWnuGh_jtGh8vT7069GQooa-ac73A_HV
O8Nn3ved78z7mX83EOgK2r-_W4TQadQ7fo2ouxk16DRDiKBrvPzYNoTQOR49eglRdz9qAEEDAMBA
cfXq1foFGzZsgKABAKAHaj5--nzNX8f_4n0i_v3cLj4MIK-uoN7x60ePXkIOHeLRo5fUO36NqLsc
NWjCzufPn69vZydDiKybjtb_FTF0KltE3ZOoQaN2lodTU1Oyf_zYsWo7Q9B4uRE1AD1gampqcXFR
Hu7atYtGj0DQAADQA65evXr_-HnnmV27dq17FQQNAAA9YHFxcV1ZBxATAAD0JxA0AAD0KUOIAAAA
usnYX7y-k2jXrl3rVgYQFgAAdNPO3LldXZR-EDQAAPSLnT0yhMgAAKDLdj4zeoS0XasOIWgAAOgT
1pKykwBiAgCA-mQIEQAAQBf4-dwuhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAB1hAyLwCS9cvIoQwADzxKfaabM_2S8QNOwMABzdp-sFgoadAYCj_3S-
BPBEAQCgPxlCBL7i6c_MIgQwYHznX5YGdb8E8HQBAKA-gaABAKBPGUIEoI2I21cG4C6sC8Pei-fv
39-Q4KZpIs9e5QlBA7_T_dZ-vqHXn-jeXzd6yXe-_12PlU899RTy7G2eEDQA9Xj3tn93yy--541b
Xwc7up07Su6cPNy3sun48JV9K5sWFxeRZ3OMjo5yZ2lpyVebBYIGXdVx-cN_qG9FzftWNvEhm5gP
2c7Hh68gzxbt7EMCMAiAndeq986_lU3SwtLF7ZKyD-N02nlpaYmITp48efLkSb-JGoIGsHMbbOJy
sR3dztZGnq3beXR09OTJkx-Tf-Ax-Qd_czQEDWDn9tiEiJTcuePDV-atbGI1Ly4uLi4u7lvZdHz4
ipI7hzxbsfOfnHvrT8695TdHQ9AAdm6DTdjC7Gj2svxpcXERdm7dzrsuvLvrwrt_czQEDdqPa3-W
P_zD_iZo3cLIsybSznwoHe2TrTQEm-iczCPbnIeJVy4hEwAgaNBHXgagP-l9_hu-1X_wSG-tuvAu
ES3efstvt9-9_-Q36LXX-XD7AbwBPlQz7Nx2du3axW11x3kIPLK0tDQ6Orq0tHT--ff-Pv2N326-
e-H2W6Sd77---qWlJT-kMIRXAbQLRVHOr1Die399Q9-F_ZXbFYVs227u8uPDV1ydmofI07ujR0dH
T548_Vv9B0TkKztD0MBN5pFtiVcuNWdnuSEH42PTkFMWFxdlW92Rh8izFUcTka-sTEQBKAm0Zfv5
-KZ2eQB5NnEV25nV7Dc7E9EQ5OI3rpYubwhthZ093ppt214qjw9fQZ5tzLOmo30IBA3cZB7Zlnjl
EmzSkFOU3DnYuaOO9udmDMBHADbpk9tEnsDFECLwG1_cfefv99KG0FZss4Zu1rbttX596qmnoK1_
yxOCBgNL5pFtiVcuwSZenGKaJuzcb3kODAFE4EO_OPvO1dJl2KRPbhx5grUYQgS_3RJXS5c3hLY2
unmEED7P0LKsNo6GPNub54B9QgJwlj954l9_V7-gm-d8DDbptFKRJ0KozwZEMPC8cPGq7Kf-29-v
PvUz7h-8PyeIaENo61oXTu74uvNQ-7MvIkxnkrIvI12XN_-9PPJse57OJJ-4VKtOc_0XCBp0T9AX
3joaLBTl4c78S0QU_cSfEdHPN15wXZib_Gr1aCfu24FI9-z3n7drKOTZep633-1YhwR94a2jvU1m
CC_HnzkT_cp-XLrM-R0f3v78Zx-wspf87JQ2qhl5diLPASOACHzLz01N2pl58p-f2HLkRS_byof7
qnN3jTybYHdg4_7AxoFPaQie8jNff_0VIvovDz9CRC_f_1_NbjAiOnHfDj_opGuzIE8vBAtFikT8
sEMhaEBff_2Vf3-73fLwu1suE9FT722FVrqjZuQJ1iKACHzIzvxLO-Mv-fTo09U--cW3BHeiC0ei
C0e8b7wB23u9vSPk6WR3YOPbr5_SbbBQ9M9WHYKtfMs-Pn-ksc-c8uCTX-3zx77jVLM19w9Nb0Ii
OnHfjhtdJX21Ep-nGSwUKRJJxGNExK2vCMBT0PRjn7mF7WzN-UPTdnZuyP5x3ACs3M95vv36KSLK
zM27Wv8wBEMB1jQRbQhtbePm5M6J_3b0v0duCNn5Lc9goTgRGiGiRDzmbPP5vH82ZgBuAp3ervyH
hSHPRlkoLXMnMzcvW18xBIOArm1g7py4b0c-LAN59nOewUKRiCZCI3yYiMdkC0GDAedM5CtEtDP-
Up2a3MRXB8ksA_NlX_W5UFqeCI1k5uYT8ZhspbUhaOBHTXdOzd03ywB7ebDztCxLCMEuTsRjzjaf
z0PQwI_a7pqa62z71uXiKykPdp4LpWV2dGZuPhGPceurRwlBg_ua7je5AH-mGSwUucN2JiL2st-s
TEQBvMGAiMpj4fJYGDmAPkEIQUQLpWUiyszNu1r-MIRXAWpGCKDf3slgoUhEE6ERIkrEY842n89D
0ABGBqDHjl4oLbOjM3PziXiMW1fl7sDG-w1Bg8Hg6f8wXL-gO-91BSmBPoHtTETs5Wo7DzwBvAS_
YsvSrfX-EBHoHxZKy0SUmZt3tRA0AAD0mInQCBEl4jFXC0EDn6KPPIcQQJ_wUFrmTmZuXraMpmma
pkHQAADQGyZCI9xJxGOyJSLLsnySAAQNVnH44jsIAfQJC6VlIsrMzbta-zCElwA4uXTzswgB9AkT
oREiev-cGe3cGSLi1jrnowQCeAkAAP3JQmnZsiw-JzCEl8BXvDf6K4QAbhTeP3eGiKLp5Nuvn7rz
oXtlK3_CoMFAsWXp1vVKLiIl0A9YlkVEm7fvZCM7W-8QwHsAAOg3crpBRNF00uc5QNBgFfrIcwgB
9Alvv36KiO586F7nn7MgWChC0AAA0D1Yu5u372Q7_zmKIbwNwMnhi_-QzYgB9BghBBGVx8LVP935
0L3BQpFCAoIGvuPSzc8iBNBbanq5oQIIGoBmyOlG9UnbtidnNITjIptSFUWpPh9NJ32Yxu7ARh-e
NQTtL94b-VVv7WzbNkvHtm0_WdNBwPn1cgZl2zbphj8d7UMCiMBXbFm6tf5fp_08OaOxZRRFmZzR
_FBRlGxKxdNxkk2pbGROSVEUNvXkjGbbdk43-BnLPYefGb_GH_53CDsBONFHnksvf62jdmbLZFMq
6UY0nUTm3tNjL-swvS1HXqSDB4ho38ommprik6o6_B91CBp0zy-Ok9IyRBRNJ0k3sinVVeNbsilV
UZRoOpnTjfrpDbyjOYr3Ll-6nm_k7CSAzQCcHL74ThfsLC2DwL2wVnq2bed0ww8fKnnmnsPPjF-D
D49_CG8-cHLp5me7YOdqrUTTSdKNbEqFtauttJaFJ2e0bEol3XAWD1IIMoe9hw7x_X0rm2hqivuq
qkLQYKB4b-RXXZur2s7BQpE7tm1zR1EUPl8eC_PpuKgZF5_UcQ2ko6s-Ufe9-I3f-bnuEyk7CWAb
_IotS7fW-_uCboho--79_-fvVxRFqoeIoumkoijZlL924Lpusm1bURROrGaYg4czgWxKzelG4def
5MN7Dj8zfg0IGvgOfeS5ztm5PBYuj4X5jGVZtm1L6Qy2cVr5nu3fv9_2bcuy_FBm6IfEqj9X_1Y2
TV0DggagnXaWZ1x2lsYRQiiKkk2p-gyKfSSEcCXmcrQzMZ-Y_b2vPs4nVQcQNPAdhy__02k7S_k4
D6sLfI4rEFdcA_-onG5IO-uZIewE4OTSzc922jWMZVnVZcFCMZpOkm5kU_rkjOar5LMptaKkQtGZ
WHVQrsQGLwrbtl1P-_gHid0f-zEEDUA37MybkDuKotQ0TnC1pwabOnddM6h1472hcd4pf7fe3fEA
PejH7QNB_4v-8dOH16n4hNZp47B0FEURQhCRZVmuX-m839i-f3_d85ZlcWgN5Xyjw3aOppOnf-Z3
-tywEDToFHU8y6KpVjMRDZ5lvFDnrmVK1Xaub-Ybmpxu8Acpmk4S0fTnvwRBA9AN4-CWk2RTqp1S
kdhaTM5ozeXcdrIplT8Stm3XX1UrXpbjR6_dDBaKRESRiA_ffgAbAPSc-fv3K4qiKEqHOn01fkP1
ffKAsik1pxuKokTTyWg6qShKtivf1GChWLGzXxmCHYATfeS59PLXujypZVlEJIToRKdDwzY9fkP3
2w9q5g9GNJ2UJ6PpJOlGTjeIyLbtyRmt-iA53bBt2-W9WfdCVnN5LOw8ec-hZz744avcP3v2LAQN
QDcQQkQikUgkMj4_fvbs2TZ2iKgTwzY9vsd6Vr9pmn2l5lWOrnzSK6au-3CdhxXn6gaLmzXN0713
_dKWrduq7bzlyIt08AAR7VvZRFNTfFJVVQga_IvDF9_hm3tgZ8uynAprb6dDwzY3vscyzqSHb8Ja
al7T1GuQ0w2_EXZxsFBk_QohymNh1nQ0neTpZqenV0ncIe7v_UbKEDRYk0s3P9v9SXkD_8HO4_Pj
ROSlTNO0Hr4GrMV2XV6RuG7kdIM1TURsaiGEaZp2SlUURdrZNY4Q4uUXn_cz9xx_5oMfvsp9_cGD
oAHoLEKIDmm0o3ZubnyPZSyvXtm5YtWm9O28PFgolldrOptSJ2c00zR5EC5mO_89dCibUuUUlXEK
xUcff5JH27eyiaamuK_qKgQNQDfsbFlWJBLpkEbHx8enru1q5tixY_0dvxN2tixLLnh3YKPsv-nR
h9zJ6Ybzpuoo1Xu9086y3lm5rr6rCRaKzmdtmmZONxRFEUKUx8Kz09PSztLvPGmwUKRCkYh25l-6
XUT3iZQhaLAm_shz6eWvdXlSNlFH7Xw6tMc549TUlKqq3bfz_Pg4EXkp0zRtXc-atr364Rny5OTM
9cvXrZfFLF95yfV63ZDKbtTOL7-4vOyzgnm62elp_ZNUc7BQVBSFl8RaN01TUZSNw58MExHRPYef
_eCHr3Kx-OBB0AB0FiFEJ_zMLj4d2vPtpTec0-1laI_maaqqtj5_E5d4LBNCmKZZM65qC7NeiYgN
y315WL-eVVxdn02p1Tavj3T9lq3bWOiz09Oz09POGqeXXZc77RxNJ_nIi3x_38ommpriPj8_CBr4
iMMX36Gbe2Bny7IikUjb7axp2unQnlOfC7zxE3rgy58jojd_8k8PfPlz9JN-YkcfO3as9Yk6ZGfL
smRE_Xxe9qPpZLRWjKvUqRsN1F8rZpPmdMM12uSMxhL3YmdWc0WsrNpCkYgeffxJd6nDy_WxcKVn
WXzI4-AgH-7p-f6RMgQN1uTSzc92f1I2UdvtPD4_TkSnPhe487YAfflzd94WICL68ueko2eJumxn
XpKXMk1bX4V1YK81VxxNJ0k3crph27Y0chNqdpu3EXK6weMEHRL3IRA06AuEEG23M3fuvC0QfPBb
D4_O-vJoig8fvnD_6SdOEtHsj2ZbH7_JSzyWCSFM02xFcy363U6pLk3XNLI8dKm5OWzbluOwnctj
4aMfJP6GfgxBA9AbO1uWFYlE2m7nOtx5W6BdE3XIzpZl9fa5VLysGy5NSy_3xcguFEWxbTt6zc6m
aSqK8u6OB_hBP24NCNpf-OQTlT3WV7CJ2m7n8fFxHn-hhe_89u0kEb39y4-uvC3w2reTCy98hwXd
ZTvzkryUaVq-PKmKgnUjm1InZ7ScbnTCyy71BwvF8liYD6Pp5Omf-Z0-NywEDfoCIUTb7cydPT8t
VeZYcLSOTovjN3GJxzIhhGmafaRp3cjpxnVld-ibbZum-BJMf-5L-twXAagB9IOdLcvybrezZ8_O
j4977Lx-7kzNSfl86_N3zs6cSf9g2zZ3sim1Q1MoiiK-B5MzGts5WCgGC0V-bo0h2MGH7A5sJKI3
P-qwT9bj3c7caUiIp0N77jp3gog2b9-pVPPp0J67SidaH7-RDst93TJN0-rnhcmmVEVRFEVhY5Ju
ZFPq5EzHV_hbL0PQgIKFYnks3CeLEUK03c6app0O7YmWPp0L7bmrdOK7E7fyXKlzZ_R5TdOOHTvW
NTtzx2OZEMI0zf5SMxERRdNJ0o2cbhCRbdvrmjqnG7ZtK4riPLnuhWxn1yt6z_FnPvjhq9znlDRN
e-zlRyBoADpoZ8uyIpGIF201budfENHp0J7Uj2Zn-tPe1I9mT4f2EFEu9At29NTUlKqqjY7fBTtb
ltVval7laOaaqes-X_dhxbm6weJmTfN0712_tGXrtmo7bznyIh08QET7VjbR1BSfVFV14LcGBO1r
goViJBLJzM0n4jFu3-zow_4vg03kXXON2plhR7OdGeloTdN4t3scv5WOx2_Apmm9fTfWUvOapl6D
nG7w82UXBwtFlq8QojwWZk1H00mebnZ6epXEHeL_nm_k7CQASYFEPCZb3jzdRwjRCTvfVTqxjj5C
v4iWPn06tEfTtC7Y_ezZs97rhRC9eiWyqZY8mE2pOd3gP5Y4KzinG6ZplsfC7N9goSiEsG2bp5N2
do6jKIozh3sOPzN_DT-szSHoyedk5uYT8ZhsJ0Ijb79_6s6H7u2ynS3LikQiXrTl3c5EdDq0hx19
fPjKvpVNRHRX6cTx4Su3jT7qcnQutGdqakpV1Y7amWf0aGfLsnplZ0VRoulk-YI6IzgvDxaKZSLW
NBGRbmRT6uSMZpomD8LFbOe9hw6xrHmKyjiF4qOPP8mj7VvZRFNT3FfVlr4iEDS4AUjEY842n89P
hEaoUCyPhbu2BjaRd83V15_L06E9RLSvdII73P-l0su3jT56l_OkU52ds-P4_Pi63xjuaJrmXNju
wEbZf-OjDyufFt1w1tRRqvd6p51lvbNyXX1XEywUnR9j0zRzuqEoihCiPBaenZ6WdpZ_50mDhSIV
ikS0M--S7yK6T6QMQYNVZObmE-EYt0S0UFqeCI10eQ1CiNbtzPojolzoF9HSp7lDRNHSpz-wtoxO
21l_RbyUscvqeNa27VU-6IY8OTlz3e-r1stilq_85Hq9bkhlN2rnl198XvZZwTzd7PS0-EmqOVgo
KorCS2Ktm6apKMrG4U_GiYjonsPPfPDDV_XDgqDB4MNe5vYPm5HtHCwUy2O8KbphZ8uyIpGIF23V
L1BVVdM0IsqF9rCaWdN3lbwupn-sbFnWWoustjDrlYjYsNyXh-XrXcXV9dmUWm3z_kjXb9m6jYU_
Oz09Oz3trHF62XW5087RdJKOvMjn961soqkp7qtqZdkQNBhYMnPziXhMthOhkYXSMju6a7CJvGuu
fgHvW6em7yqdOD58ZV-pBE93fPjKvpVNd107dOJl-BY7Hr8BvH5JPp_X-Wg6Ga0V4yp16kYD9deK
2aQ53XCNNjmjscS92JnVXBErq7ZQJKJHH3-SXerwcnksLN8GPuRxeJAP--R_-0gZggbXScRjzjaf
z7OdLcuKyj3TeYQQbbFzTU0T0b6VTceHr8g_d06H9sgFsK87bWfueCwTQpim2Vye7LXmiqPpJOlG
Tjds25ZGbkLNbvM2Qk43eJygQ_I_BIIGlJmbT8Rj3BLRQmmZHd1NO1uWFYlEvGirISES0ebtO3mW
r1ybbrOU8rkT3Pngj4fs9P6xs2VZLWquadiwdkp1abqmkeWhS83NYdu2HIftXB4LH-0g8Tf0Ywga
_BH2MrdEJO0cLBS74wU2kXfNNSrE_pwO7eGOpmnHjh1rdPxGOx6-AZpW24ndpOJl3XBpWnq5LUZ2
oSiKbdvRa3Y2TVNRlHd3PEAP_nFvBqAnn5OZm3e1C6VlIhJCdHMZQoie2NlFp_189uxZ7-VdfgRr
EU0no_mkoijZlEpEOd1gL-Nfe_fiKYgoWCiWx8Js57bPcgMxBEP5nEQ85mzz_fxEaIR-Ko_Fu2Zn
y7IikYgXbTUkROcs7587w53N23dWr_Gu0glVVRsdv4mOdztbltU-70k0nSTdyOlGpd9hLMuyHXae
-vyX-Lk9AzAUyMzNy5aIFkrL3bQz70YhBMuRrVqn04QQJaxg15m7SifYzk2P72XZzvV7KZOZ9A_2
bXMnm3LH2C4URZHfg8kZje0cLBSDheJal1Q-00FiCHoCiXhMtkQ0ERrp8gKEEJZlRSKRhszYqJ35
fPUZ3uGtTNTokryUcSZ98oZkU6qiKIqisDFJN7IpdXJG68LUrObyWNifexOC9juZuflEPCbbidDI
Qmm5y45mE7XdztU6rrZ26xM1sSQvZZrWDf01rGYiIoqmk6QbOd0gItu21zV1Tjds21YUxXly3QtZ
zdLOdQJ5-OVHIGgwmCTiMWebz_e7bGdGCNF2O1fruCYtjt-ckryUCSFM0_wrNa9yNHPN1PUfrvOQ
hcsXSk3zdO9dvrRl67ZqO2d_8-E7fLk9IWhAmbn5RDzGLREtlJa77GghhGVZkUikvXbOzM1v3r7z
5--4qvNObdsm2_bDHQ9_ITM3n2hZ0x2ys2VZPXwr1lLzmqZeg5xu8I2wi4OFIstXCFEeC7Omo_kk
Tzc7PV2t8mxK3f3gF97-4_dg7-BN4YMH_FdN0yBoMPiwl7kloi7bmYh4A7fLzpm5eZqbrxh5eIUe
foiI7n3tdeeMpx5_iP5-wUpiZTjDxXPziXis03YeHx8nIi9lvbVPNqUqitKuyysS142cbrCmiYhN
LYQwTdNOqYqiOO0s1awoinMo48J5SlY_Ca2sEIIGNwaZuflEPCbbidDIQmm5_44WQrTNzvLWhlek
l089-NBa-cTK8PUoiBqdsYlFeixjefXKzhWrNqVv5_XBQrG8WtPZlDo5o5mmyYNwMdt576FDOd1w
qpmvChaK1jm-SBmCBtdJxGPONp-P98TOlmVFIpEW7Tw_Pk4OQUsLc3-Hg18goh0PfuHe116tPi9p
YuoO2dmyLLmq3YGNsv-mRx9yh10mqaNU7-VOO8t6Z_W6_q4mWCg6n7VpmjndUBRFCFEeC89OT0s7
S7-LSZ3XEtHe4ZvCBw9wX9M0CBoMPpm5_UQ8xi0RLZSWu_xoNlHrdj579izfCA-rMq9krfOJeKzT
dh4fHyciL2V17CO9adv2qh90Q56cnLl__br1spjlKy_5Xq8bUtmN2vnlF5_-rtdDh_TaZqen5U9S
zaxjXpJUc3ksnLn82B1kEZFx4TwlK7PzUiFoMOCwl7n9w2bssp0ZIUTrduZOgog7X-1_ZdvX58g3
p1uZsYlLPJYJIUzTrLnmaguzXqW2uC8P69e7iqvrsym12ub1ka7fsnUbC312enp2etpZ4-KyEz5T
HgvndIMsq3z5Im31i5QhaHCdzNx8Ih6T7URoZKG03GVHCyEsy4pEIq3b2dlJxGPcae_w1Z0O2dmy
LBlRPp_X-Wg6Ga0V4yp16kYD9deK2aQ53XCNNjmjscS92JnVrCgKjxYsFKlQJKJHH3-SXerwcnks
XOlZllPNvKrT0xcrTh__KXzwAPc1zdOnAoIGNzCJeMzZ5vP5LtuZiNhE-WDPLoxPRF7KWrQPy7G5
4mg6SbqR0w3btqWRm1Cz27yNwB8JqfhvPc6uJuPCeUpWBlcUBYIGg09mbj4Rj3FLRAul5e47WgjR
IY121M7Nje_xTAhhmmYrmmvR73ZKdWm6ppHloUvNTcNjRtPJYKHI965fjFhk_UTKEDRYBXuZWyLq
iZ0ty4pEIh3SaOfs3MT43u1sWVZvX4yKl3XDpWnp5XYZ2QXPFSwUy2PhnG6QZWWv-BVtIiLaO3xT
_OABLtO02p8NCBoMDpm5_UQ8JtuJ0MhCabnLjmYT_cHO4_PjROSlrH-sU1GwbmRT6uSMltONDnnZ
qf6cbvCbUVnAtysFxoXzlKxMzZUQNBhkEvGYs83n8122MyOE6JBGO2rn5sb3WCaEME2zjzStG_zN
DtlZwuZ1znLmL39Nul_kDEGDVWTm5hPxGLdEtFBa7rKjhRCWZUUiEY92u9HxaGfLsvpq2bZtsx_z
KXVyRuucmm3bdo4fLBSJSFXVmpe8_dGHA7w3A9ATYC9zS0RdtjMRsYm8aGt8fNxjmex4r2yu06Fh
_8rO2ZSa0w1FUaLpZDSdVBQlm6qty7bDdi6Phf25N4egJ5_TmZtPxGOynQiNLJSWu_9oIYR3fzXk
u47auaPjCyFM0_y5mhVFYTXLk9F0knQjpxtEZNv25IxWf5Ccbti2rSiK8_S6F7KapZ01rXaxc2EQ
NBg0EvGYs83n8z2xs2VZkUik7XYmoo7auXPjcyb9puYaWrxm6vrP13WmPBbmC6Wmebr3Ll-asnVb
tZ0zv-n4Hb7cnhA0oMzcfCIe45aIFkrLXXY0m8ijv5pwYufs3LnxNU3r7VuxlprXNPUa5HSDn690
8aoLdSOnG9F0kqebnZ52e5wom1J3P-iF9--4Odg7fFP44AH_tecRQdCgG7CXuSWiLtuZEUJ499fA
25k7QgjTNHvySmRTqqIobbn8usF1I6cb1ZrOplQ7pSqK4rSzVLOiKM6VGBfOU7IyYCsrhKDBjUFm
bj4Rj8l2IjSyUFrusqOFEJZlRSKRttuZiDpq586Nz5n00M7Xxdq4vp2XBwtF_ZSJyLKsbEqdnNHk
IFzMdt576FBON5xq5nGChaJ1zi9ShqDBdRLxmLPN5-NdtjNvWu-_asKJnbNz58bXNM0Z0e7ARtl-
86MPucMuk9RRqvd6p51lvbNyXX27KI_FV006FrZTak435CCz09PSzmxztrBUs-PyvcM3hQ8e4L4r
IggaDCaZuflEPMYtES2UlrvvaCGEd38NvJ25I4QwTbOOZ23bXvWDbsiTkzPX5bVuvSxm_cpLrtfr
hlR2Q3Zm-17X66FDcm3Sy9fVfM3FvCSp5vJYOHP5sTvIIiLjwnlKVmbnpULQYMBhL3P7h83YEztb
lhWJRNpuZyLqqJ07Nz5nslZi1RZmvUptcV8e1q93FVfXZ1Nqtc3rI13-6ONPsmSdRnb6Wqq5PBYm
IrKsykmi8lg4pxtkWeXLF2mrX6QMQYPrZObmE-GYbCdCIwul5S47mk3k0V9NOLFzdu7c_Jq2yoP5
fF72o_lktFaMq9SpGw3UXyuOppNElNMN12iTMxpL3IudWc2KovBoZaJgoRgsFNnUqygU_X9FzQ6k
mnlVp6cvVpw_fFP44AHuuyKCoMEAkojHnG0_n__ynRkhhHd-DbyduSOEME2zuTxZjs0VR9NJ0o2c
bti2LY3chJqdtm10-fyR4HGCheK3HmdXk3HhPCUrgyuKAkGDwSczN5_Ix7glooXScpcdLYSwLCsS
ibTdzkTUUTt3bnzOpBXHtQKb0U6pLk3XNLI8rFZzc-CY0XQyWCjyvesXIxZZPpEyBA1WwV7mloi6
bGciYhPl83lN09hNdTpE5KVMdizL8ljZXKdD4zvt3CsqXtYNl6all9tlZBc8V7BQLI_Fc7pBlpW9
8le0iYho7-BN4YMHuIyzgqDBIJOZm0-EY7KdCI0slJa772ipJC_dhuobGrmJTkfHN02z529IRcG6
kU2pkzNaTjc65GUnOd3gT3dlAd_unDcunKdkZWr_SAw2G2CogeeFi1dl-8JbR4lod2AjEeXzeSKK
RCLOYj5JROWxcHeWl02pvnocy8vLHitHRkaIaHJG65OVV6Qpld3dWeT56u-H7Xc-Jg_f_FSrTqve
Lz1kCP4Cmbn5RDzGLREtlJYnQiNdm71-BATq01EvS4QQRFQeC9c8X015oDMP4LUD7GVuiaibdgYA
QNBgTTJz8652obSMWACAoEHvScRjrnYiNIJYQF8RLBQhaOAXNE3TNE0eZubmZUtEC6VlRARgZwga
9BLLsriTiMdkS0QToRGEA-pEzX62MxEN4SXwOZm5_UQ8JtuJ0MhCaRmOBj1XM3fKY2HXGQga_AXL
sohIO3dGthQSsDPoB6Sa-QwEDdzK3rx9JxwN_srOwULRnzkE8Cr4ls3bd27evjOaTjpbInr-3Jk_
XO2T--wGHpkPCRaKvrUzBA3o7ddPOdvN23cSkWVZ-WbnX33-Fjjan2ouj4UhaAAqRNNJIsrpRr8t
DI72lZ1ZzWxn3zoagvbpqy_586F7nX9E9Pbrp-p28XC0f3BK2fXSQtDAp7CjN2-f2be7Ao72lZ2D
haJv7UxEQ3gVfIgQwrUNXI4OFooUqtT0Fbd_810iev6zD_AhDjZOKZfHwr51NATtO2pKuYmabvL8
Zx948ptvENGvvn8LOxr46kX1raM34D0YeF64eBUhAO9ceOto1_a6-e7HBiyN9t5RAK8jAKAn0ux-
O-ccCHrweeJTGxACABA0gKPBDc-TnxkdsIluXIYQgd8cPTIygjSA3z4GTTM5o-XwjgJ4RQAAoD_B
oAEAAIIGAAAAQQMAAAQNAAAAggYAAAgaAAAABA0AAACCBgAACBoAAAAEDQAAEDQAAAAIGgAAAAQN
AAAQNAAAAAgaAAAgaAAAABA0AABA0AAAACBoAAAAEDQAAEDQAAAAIGgAABh8hhCB31AUBSEAvIo3
xE0F8JYAAEB-sgER_I3gC8cRAqhP4t-83y7MkvnNxwcvivbeFATtO6Z-_rcIAYAbggAiAAAACBoA
AAAEDQAAEDQAAAAIGgAAIGgAAAAQNAAAAAgaAAAgaAAAABA0AABA0AAAACBoAAAAEDQAAEDQAAAA
IGgAAICgAQAAdJQNiAAAPzP907-t6Pi33-0YQm6aACIAAAAIGgAAQAMMyd5Hb74b2H2L6_eaJ32I
9xw_evNdIlqr2DWO87D6Qu-FvTpsMVLvQ9UpbuOSAOhfQYP6dmjI42t97dY6rL7Qe-FaHnf92sbD
Nn7wvIxZp7ihcUBPePozowihJUHXdIF83Z2HdTyylo9cG7vm4M7xqw-rFze3LZ1DVQ-r6jhrWhG6
a5zqqdcqln70MnvNQOpMtO61nUi1iYnq3H5DTweAG0nQLtXW1JPz0LUxXGKtaRlX6zSOc8zqKWoW
r7XOmitcaz-XmaiJy6t-bU4ZHhcgx6--2XMeupZU-e2peW31jdT5KDaRquvL3VyqrQQOQL8LuuYb
37n5nIO77LCWLLwMtZY1OkH9iZpexrqGqvmtqvkRrXlYX4vrDtXEl6yh_2061a49dwD6QtDe33ip
VO9bq_ZhTTs43VFzrjreae6z4fHytuipoTEb0uK6om-61zamWj1RJ1IF4IYXtEt8zkOXH_tYkk_6
xqkv9LUm8jhX9eXNfVeqr62eV97duhPJa2WN0zuucWoeVkdaPZ1rloYOXRN5LF7r19ZT9fL46qRa
f0kA3PCCrn65XfuqerdUb7Oae6zmOHUGb2iuFvdk-WvXXVhz17aSc0PRtTJRQ4dNp9ros2vojgAY
KEG3Qje3R4fmwg5HqgD06T5CBAAA0J-8P9u4AY7hbkBGAAAAEHRFWHRMb2RlUE5HADIwMTEwMjIx
41m2wQAAAABJRU5ErkJggg==
:: main.lua
--[[pod_format="raw",created="2024-05-03 13:26:10",modified="2024-09-13 23:17:56",revision=7302]]
include './util.lua'
include './character.lua'
include './moodles.lua'
include './inventory.lua'
include './static_interactable.lua'
include './containers.lua'
include './context_menu.lua'
include './rooms.lua'

_debug_message = ""


function _init()
	poke4(0x5000, get(fetch(pwd().."/pal/0.pal")))
	poke(0x4000,get(fetch"/system/fonts/lil_mono.font"))
	_w_w, _w_h = 480,270
	_m_x, _m_y, _m_b, _m_w_x, _m_w_y = 0,0,0,0,0
	_c_x = 0
	_c_y = 0
	_tile_size = 16
	_buffer_time = 0.1
	_mlb_last_pressed = nil
	_mrb_last_pressed = nil
	_mmb_last_pressed = nil
	_coroutines = {}
	c=man:new({})
	_blood_spatter_update = nil
	_blood_splatters = {}
	_redraw_list = {}
	m={moodles={}}
	_flagged_tiles = {}
	i=inventory:new({contents = {}})
	_cm=context_menu:new({})
	_containers = {}
	_rooms = {}
	_discovered_containers = {}
	_fog={}
	init_containers()
	init_rooms()
end

function _draw()
	_c_x = c.x + (_w_w/2)
	_c_y = (c.y + (_w_h/2)) - 270
	_c_y_b = (c.y + (_w_h/2))
	cls(0)
	camera(c.x - (_w_w/2),c.y - (_w_h/2))
	map()
	draw_fow()
	display_moodles(m,c)
	update_interactables(i, c)
	draw_blood_splatter()
	animate_character(c)
	redraw_tiles(c)
	update_inventory(i)
	draw_context_menu()
	draw_border()
	debug()
	update_coroutines()
end

function update_coroutines()
	for c in all(_coroutines) do
		if costatus(c) then
			coresume(c)
    	else
    		del(_coroutines,c)
    	end
    end
end

function _update()
	update_mouse_input()
	move_man(c)
	scan_character_area(c)
	execute_context_menu_option(c, 25)
	update_character_vitals(c)
end

function update_mouse_input()
	_m_x, _m_y, _m_b, _m_w_x, _m_w_y = mouse()
	_m_x = _m_x + (_c_x - _w_w)
	_m_y = _m_y + _c_y
	if ((_m_b&1>0) and _mlb_last_pressed == nil) 
	or ((_m_b&1>0) and time_since(_mlb_last_pressed,time(),false) > _buffer_time) then
		_mlb_last_pressed = time()
		_m_l_b=true
	else
		_m_l_b=false
	end
	if ((_m_b&2>0) and _mrb_last_pressed == nil) 
	or ((_m_b&2>0) and time_since(_mrb_last_pressed,time(),false) > _buffer_time) then
		_mrb_last_pressed = time()
		_m_r_b=true
	else
		_m_r_b=false
	end
end

function debug()
--	circfill(c.select_point.x, c.select_point.y,2)
--	rect(c.d_x1, c.d_y1, c.d_x2, c.d_y2, 2)
	print("debug_message: " .. _debug_message
			.. " cpu1: " .. stat(1)
			.. " cpu2: " .. stat(2), _c_x-475, _c_y+258, 31)
end
:: moodles.lua
--[[pod_format="raw",created="2024-05-07 21:40:35",modified="2024-09-13 23:17:56",revision=6184]]
include './types.lua'
include './util.lua'

moodle=entity:new({
	moodle = "none",
	sprite = 0,
	x = 0,
	y = 0,
})

function get_index(moodles, name)
	for i, m in ipairs(moodles) do
		if m.moodle == name then
			return i
		end
	end
	return -1
end

-- moodle entity, name, value, sprite 1, 2, 3, 4, lower check
function generate_moodle(m, n, v, s1, s2, s3, s4, lc)
	index = get_index(m.moodles, n)
	current_moodle = nil
	new_sprite = -1
	if index != -1 then
		current_moodle = m.moodles[index]
	end
	if lc then
		if v >= 20 and v < 30 then
			new_sprite = s1
		elseif v >= 30 and v < 50 then
			new_sprite = s2
		elseif v >= 50 and v < 70 then
			new_sprite = s3
		elseif v >= 70 then
			new_sprite = s4
		end
	else
		if v < 70 and v >= 50 then
			new_sprite = s1
		elseif v < 50 and v >= 30 then
			new_sprite = s2
		elseif v < 30 and v >= 10 then
			new_sprite = s3
		elseif v < 10 then
			new_sprite = s4
		end
	end
	if current_moodle == nil and new_sprite != nil then
		return moodle:new({moodle=n,sprite=new_sprite})
	elseif current_moodle != nil and current_moodle.sprite != new_sprite then
		del(m.moodles,current_moodle)
		return moodle:new({moodle=n,sprite=new_sprite})
	elseif current_moodle != nil and new_sprite == nil then
		del(m.moodles,current_moodle)
		return nil
	elseif current_moodle != nil and current_moodle.sprite == new_sprite then
		del(m.moodles,current_moodle)
		return moodle:new({moodle=n,sprite=new_sprite})
	end
	return nil
end

--moodle object, character
function display_moodles(m,c)
	m.moodles = {}
	h = generate_moodle(
		m, 
		"health", 
		c.health, 
		moodle_sprites.health_1, 
		moodle_sprites.health_2, 
		moodle_sprites.health_3, 
		moodle_sprites.health_4, 
		false)
	if h.sprite > 0 then
		add(m.moodles,h)
	end

	wh = generate_moodle(
		m, 
		"wound_health", 
		c.wound_health, 
		moodle_sprites.wound_health_1, 
		moodle_sprites.wound_health_2, 
		moodle_sprites.wound_health_3, 
		moodle_sprites.wound_health_4,
		false)
	if wh.sprite > 0 then
		add(m.moodles,wh)
	end

	p = generate_moodle(
		m, 
		"pain", 
		c.pain, 
		moodle_sprites.pain_1, 
		moodle_sprites.pain_2, 
		moodle_sprites.pain_3, 
		moodle_sprites.pain_4,
		true)
	if p.sprite > 0 then
		add(m.moodles,p)
	end

	hu = generate_moodle(
		m, 
		"hunger", 
		c.hunger, 
		moodle_sprites.hunger_1, 
		moodle_sprites.hunger_2, 
		moodle_sprites.hunger_3, 
		moodle_sprites.hunger_4,
		true)
	if hu.sprite > 0 then
		add(m.moodles,hu)
	end

	t = generate_moodle(
		m, 
		"thirst", 
		c.thirst, 
		moodle_sprites.thirst_1, 
		moodle_sprites.thirst_2, 
		moodle_sprites.thirst_3, 
		moodle_sprites.thirst_4,
		true)
	if t.sprite > 0 then
		add(m.moodles,t)
	end

	d = generate_moodle(
		m, 
		"delirium",
		c.delirium,
		moodle_sprites.delirium_1, 
		moodle_sprites.delirium_2, 
		moodle_sprites.delirium_3, 
		moodle_sprites.delirium_4,
		true)
	if d.sprite > 0 then
		add(m.moodles,d)
	end
	
	current_y = 4
	for i, moodle in pairs(m.moodles) do
		spr(moodle.sprite, _c_x-20, _c_y + current_y)
		current_y += 20
	end
end

moodle_sprites={
	health_1 = (gfx_offset.gfx_3+40),
	health_2 = (gfx_offset.gfx_3+41),
	health_3 = (gfx_offset.gfx_3+42),
	health_4 = (gfx_offset.gfx_3+43),
	wound_health_1 = (gfx_offset.gfx_3+32),
	wound_health_2 = (gfx_offset.gfx_3+33),
	wound_health_3 = (gfx_offset.gfx_3+34),
	wound_health_4 = (gfx_offset.gfx_3+35),
	pain_1 = (gfx_offset.gfx_3+1),
	pain_2 = (gfx_offset.gfx_3+2),
	pain_3 = (gfx_offset.gfx_3+3),
	pain_4 = (gfx_offset.gfx_3+4),
	delirium_1 = (gfx_offset.gfx_3+8),
	delirium_2 = (gfx_offset.gfx_3+9),
	delirium_3 = (gfx_offset.gfx_3+10),
	delirium_4 = (gfx_offset.gfx_3+11),
	hunger_1 = (gfx_offset.gfx_3+24),
	hunger_2 = (gfx_offset.gfx_3+25),
	hunger_3 = (gfx_offset.gfx_3+26),
	hunger_4 = (gfx_offset.gfx_3+27),
	thirst_1 = (gfx_offset.gfx_3+16),
	thirst_2 = (gfx_offset.gfx_3+17),
	thirst_3 = (gfx_offset.gfx_3+18),
	thirst_4 = (gfx_offset.gfx_3+19),
}
:: rooms.lua
--[[pod_format="raw",created="2024-07-07 21:47:51",modified="2024-09-13 23:17:56",revision=1573]]
include './types.lua'
include './util.lua'

room=entity:new({
	s_x = 0,
	s_y = 0,
	e_x = 0,
	e_y = 0,
	is_discovered = false,
	replacement_sprite = 0,
	health_taken = 0,
	is_unlocked = true,
})

function draw_fow()
	for i, r in pairs(_rooms) do
		if r.is_discovered == false then
			_debug_message = "cy, sy: " .. _c_y_b .. " " .. r.e_y 
			if _c_x > r.s_x and _c_y_b > r.s_y then
				--if _c_x > r.e_x and _c_y_b > r.e_y then --NOT SURE WHAT THIS WAS FOR!
																	--BUT IT WAS BREAKING WHEN MC
																	--WENT TO TOP OF MAP
					rectfill(r.s_x, r.s_y, r.e_x, r.e_y, 0)
				--else
					if _c_x > r.e_x and _c_y_b < r.e_y then
						rectfill(r.s_x, r.s_y, r.e_x, _c_y_b, 0)
					elseif _c_x < r.e_x and _c_y_b > r.e_y then
						rectfill(r.s_x, r.s_y, _c_x, r.e_y, 0)
					end
				--end
			end
		end
	end
end

function unlock_inner_door(ft,rep_tile)
	mset(ft.tile_co.x, ft.tile_co.y, rep_tile)
	mset(ft.tile_co.x, ft.tile_co.y+1, rep_tile)
end

function unlock_normal_door(room, ft)
	draw_info_text("unlock called", 10)
	mset(ft.tile_co.x, ft.tile_co.y, room.replacement_sprite)
	mset(ft.tile_co.x, ft.tile_co.y+1, room.replacement_sprite)
	room.is_discovered=true
end

function unlock_heavy_door(room, ft)
	draw_info_text("heavy called", 5)
	mset(ft.tile_co.x, ft.tile_co.y, room.replacement_sprite)
	mset(ft.tile_co.x, ft.tile_co.y+1, room.replacement_sprite)
	room.is_discovered=true
end

function init_rooms()
	_rooms["19_10"] = room:new({
		s_x = 272,
		s_y = 0,
		e_x = 448+15,
		e_y = 144+15,
		replacement_sprite = 11,
		is_discovered = false,
		call_unlock = unlock_normal_door
	})
	_rooms["37_10"] = room:new({
		s_x = 464,
		s_y = 0,
		e_x = 688+15,
		e_y = 144+15,
		replacement_sprite = 11,
		is_discovered = false,
		call_unlock = unlock_heavy_door
	})
end
:: static_interactable.lua
--[[pod_format="raw",created="2024-05-23 20:57:56",modified="2024-09-13 23:17:56",revision=5741]]
include './types.lua'
include './util.lua'
include './containers.lua'
include './rooms.lua'


function update_interactables(inv, c)
	local is_cont_in_range = false
	for i,ft in pairs(_flagged_tiles) do
		if fget_precalc(ft.flags,1) == true then
			local container_co = tostr(ft.tile_co.x) .. "_" .. tostr(ft.tile_co.y)
			local container_obj = _containers[container_co]
			if container_obj != nil then
				is_cont_in_range = true
				container_obj.in_range = true
				if inv.selected_container == 1 or inv.selected_container == container_co then
					spr(
						container_obj.in_range_sprite, 
						(flr(ft.tile_co.x*_tile_size)) + container_obj.in_range_sprite_adjustment.x,
						(flr(ft.tile_co.y*_tile_size)) + container_obj.in_range_sprite_adjustment.y
					)
				end
				if _discovered_containers[container_co] == nil then
					_discovered_containers[container_co] = container_obj
				else
					_discovered_containers[container_co].in_range = true
				end
			end
		end
		if fget_precalc(ft.flags,2) == true then
			if keyp("e") then
				local room_key = ft.tile_co.x .. "_" .. ft.tile_co.y
				local room = _rooms[room_key]
				if room != nil then
					room.call_unlock(room, ft)
				else
					replacement_tile = mget(ft.tile_co.x, ft.tile_co.y-1)
					unlock_inner_door(ft, replacement_tile) 
				end
			end
		end
		if fget_precalc(ft.flags,3) == true then
			if (coalesce(c.d_y2, 0)-16) < (ft.tile_co.y*16) then
				add(_redraw_list, ft)
			end
		end	
	end
	if not is_cont_in_range then
		for i, dc in pairs(_discovered_containers) do
			dc.in_range = false
		end
	end
	_flagged_tiles = {}
end

function redraw_tiles(c)
	for i, ft in ipairs(_redraw_list) do
		palt(48, true)
		spr(ft.sprite, ft.tile_co.x*16, ft.tile_co.y*16)
		pal()
		poke4(0x5000, get(fetch(pwd().."/pal/0.pal")))
	end
	_redraw_list={}
end
:: types.lua
--[[pod_format="raw",created="2024-05-06 22:22:02",modified="2024-09-13 23:17:56",revision=6075]]
class={
	new=
		function(self,tbl)
			tbl=tbl or {}
			setmetatable(tbl, {
				__index=self
				}
			)
			return tbl
		end,
}

entity=class:new({
	x=0,
	y=0,
})

container_slot=entity:new({
	container_id = 1,
	quantity = 0,
	item = nil,
	starting_x = 0,
	starting_y = 0,
	ending_x = 0,
	ending_y = 0,
})

object_type={
	item=1,
}

button={
	up=4,
	down=8,
	left=1,
	right=2,
	down_right=10,
	up_left=5,
	up_right=6,
	down_left=9,
	none=0
}

direction={
	up = 1,
	down = 2,
	left = 3,
	right = 4
}
:: util.lua
--[[pod_format="raw",created="2024-05-03 22:03:54",modified="2024-09-13 23:17:56",revision=6403]]

--object, start frame,
--num frames, speed, flip
function animate_sprite(o, sf, nf, sp, fl)
	if(not o.a_la) o.a_la = sf
	if(not o.a_ct) o.a_ct = 0
	if(not o.a_st) o.a_st = 0
	if(not o.fl) o.fl = false
	o.a_ct += 1
	if o.a_ct % (60/(sp*o.anim_spd)) == 0 then
	 o.a_st += 1
	 if(o.a_st == nf) o.a_st = 0
	elseif o.a_la != sf then
	o.a_st = 0
	end

	o.a_fr = sf + o.a_st
	spr(o.a_fr, o.x, o.y, fl)
	o.a_la = sf
end

-- object, radius, flag
function collide(o,f)
	f = f or 0
	local p_adj = 0
	local x1 = (c.x+6)/_tile_size
	local y1 = (c.y+10)/_tile_size
	local x2 = ((c.x+c.max_width)-6)/_tile_size
	local y2 = ((c.y+c.max_height))/_tile_size
	local ax1 = ((c.x+6)-p_adj)/_tile_size
	local ax2 = (((c.x+c.max_width)-6)+p_adj)/_tile_size
	local ay1 = ((c.y+10)-p_adj)/_tile_size
	local ay2 = (((c.y+c.max_height))+p_adj)/_tile_size
	c.d_x1 = x1*_tile_size
	c.d_y1 = y1*_tile_size
	c.d_x2 = x2*_tile_size
	c.d_y2 = y2*_tile_size
	c1 = fget2(mget(x1, y1), f)
	c2 = fget2(mget(x1, y2), f)
	c3 = fget2(mget(x2, y2), f)
	c4 = fget2(mget(x2, y1), f)
	c5 = fget2(mget(x1, y2-1), f)
	c6 = fget2(mget(x2, y2-1), f)
	down_right = fget2(mget(ax2, ay2), f)
	down_left = fget2(mget(ax1, ay2), f)
	up_left = fget2(mget(ax1, ay1), f)
	up_right = fget2(mget(ax2, ay1), f)
	if (c1 or c2 or c3 or c4 or c5 or c6) then
		local has_adj = false
		local adj_val = 0.6
		if down_right == false then
			if c.i_dir == direction.down then
				c.x+=adj_val
				has_adj = true
			elseif c.i_dir == direction.right then
				c.y+=adj_val
				has_adj = true
			end
		end
		if down_left == false and has_adj == false then
			if c.i_dir == direction.down then
				c.x-=adj_val
				has_adj = true
			elseif c.i_dir == direction.left then
				c.y+=adj_val
				has_adj = true
			end
		end
		if up_left == false and has_adj == false then
			if c.i_dir == direction.up then
				c.x-=adj_val
				has_adj = true
			elseif c.i_dir == direction.left then
				c.y-=adj_val
				has_adj = true
			end
		end
		if up_right == false and has_adj == false then
			if c.i_dir == direction.up then
				c.x+=adj_val
				has_adj = true
			elseif c.i_dir == direction.right then
				c.y-=adj_val
				has_adj = true
			end
		end
		return true
	end
	return false
end

function coalesce(a, b)
	if a == nil then
		return b
	else
		return a
	end
end

function time_since(from, to, f)
	if f == true then
		return flr(to) - flr(from)
	else
		return to - from 
	end
end

--tile sprite number, flag
function fget2(n, f)
	if f then
		return (fget(n)>>f)&1==1
	else
		return fget(n)
	end
end

-- pre calculated flag, flag
function fget_precalc(pcf, f)
	return (pcf>>f)&1==1	
end

function table_length(t)
	local length = 0
	for i, c in pairs(t) do
		length+=1
	end
	return length
end

function draw_border()
	rect(_c_x-479, _c_y, _c_x-1, _c_y+269, 17)
	rect(_c_x-478, _c_y+1, _c_x-2, _c_y+268, 0)
	rect(_c_x-477, _c_y+2, _c_x-3, _c_y+267, 33)
end

function draw_info_text(t, d)
	local func = cocreate(function()
		local l = #t
		local n_px = l*5 
		local x_offset = (480-n_px)/2
		for i=1,(d*60) do
			local x = (_c_x-480)+x_offset
			rectfill(x-1, _c_y+239, x+n_px+1, _c_y+248, 0)
			print(t, x, _c_y+240, 33)	
			yield()
		end
	end)
	add(_coroutines, func)
end

gfx_offset={
	gfx_0=0,
	gfx_1=256,
	gfx_2=512,
	gfx_3=768
}
:: .info.pod
b64$LS1bW3BvZCx3b3Jrc3BhY2VzPXt7bG9jYXRpb249Im1haW4ubHVhIzEwMyIsd29ya3NwYWNl
X2luZGV4PTF9LHtsb2NhdGlvbj0iY2hhcmFjdGVyLmx1YSMyNjMiLHdvcmtzcGFjZV9pbmRleD0x
fSx7bG9jYXRpb249InN0YXRpY19pbnRlcmFjdGFibGUubHVhIzQzIix3b3Jrc3BhY2VfaW5kZXg9
MX0se2xvY2F0aW9uPSJjb250YWluZXJzLmx1YSM0NyIsd29ya3NwYWNlX2luZGV4PTF9LHtsb2Nh
dGlvbj0iaW52ZW50b3J5Lmx1YSMxMTEiLHdvcmtzcGFjZV9pbmRleD0xfSx7bG9jYXRpb249ImNv
bnRleHRfbWVudS5sdWEjNzMiLHdvcmtzcGFjZV9pbmRleD0xfSx7bG9jYXRpb249Iml0ZW1zLmx1
YSMxOTQiLHdvcmtzcGFjZV9pbmRleD0xfSx7bG9jYXRpb249Im1vb2RsZXMubHVhIzExNyIsd29y
a3NwYWNlX2luZGV4PTF9LHtsb2NhdGlvbj0idHlwZXMubHVhIzI4Iix3b3Jrc3BhY2VfaW5kZXg9
MX0se2xvY2F0aW9uPSJ1dGlsLmx1YSMyNSIsd29ya3NwYWNlX2luZGV4PTF9LHtsb2NhdGlvbj0i
cm9vbXMubHVhIzQ5Iix3b3Jrc3BhY2VfaW5kZXg9MX0se2xvY2F0aW9uPSJnZngvMS5nZngiLHdv
cmtzcGFjZV9pbmRleD0yfSx7bG9jYXRpb249ImdmeC8yLmdmeCIsd29ya3NwYWNlX2luZGV4PTJ9
LHtsb2NhdGlvbj0iZ2Z4LzAuZ2Z4Iix3b3Jrc3BhY2VfaW5kZXg9Mn0se2xvY2F0aW9uPSJnZngv
My5nZngiLHdvcmtzcGFjZV9pbmRleD0yfSx7bG9jYXRpb249Im1hcC8wLm1hcCIsd29ya3NwYWNl
X2luZGV4PTN9LHtsb2NhdGlvbj0ic2Z4LzAuc2Z4Iix3b3Jrc3BhY2VfaW5kZXg9NH0se2xvY2F0
aW9uPSJwYWwvMC5wYWwiLHdvcmtzcGFjZV9pbmRleD03fX0sdmVyc2lvbj0iMC4wLjgiLHJ1bnRp
bWU9OSxtb2RpZmllZD0iMjAyNC0wOS0xMyAyMzoxNzo1NiIsbm90ZXM9IlZlcnkgbXVjaCBXSVAs
IEhvcGluZyB0byBmaW5pc2ggdGhpcyB5ZWFyLiIsdGl0bGU9Ikd1dCBXb3VuZCAoV29ya2luZyBU
aXRsZSkiLGNyZWF0ZWQ9IjIwMjQtMDUtMDMgMTM6NDg6NDciLGF1dGhvcj0iQmF1bGVycyIsaWNv
bj11c2VyZGF0YSgidTgiLDE2LDE2LCIwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAw
MDYwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA2MDAwMDAwMDAwMDAwMDAwMDAwMDAw
MDAwMDAwMDAwMDAwNjAwMGQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA2MGQwMDAwMGQwMDAw
MDAwMDAwMDAwMDAwMDAwMDAwMGQwNjA2MGQwMDBkMDAwMDAwMDAwMDAwMDAwMDAwMGQwMDAwMGQw
NjBkMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMGQwMDBkMDYwMDAwMGQwMDAwMDAwMDAwMDAwMDAw
MDAwMDBkMDAwNjA2MGQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMGQwNjAwMGQwMDAwMDAw
MDAwMDAwMDAwMDAwMDAwMGQwMDA2MGQwMDAwMGQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMGQwNjA2
MGQwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMGQwMDAwMGQwNjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAw
MDAwMGQwMDAwMDYwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDA2MDAwMDAwMDAwMDAw
MDAwMDAwMDAwMDAwMDAwMDAwMDAwMCIpXV0=
:: [eoc]
